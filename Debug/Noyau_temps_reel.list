
Noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010b38  20000080  08009098  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010bb8  08009098  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dbd  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b48  00000000  00000000  00039e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0c6  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197de  00000000  00000000  0006a136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc80c  00000000  00000000  00083914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc0  00000000  00000000  00180170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a60 	.word	0x08008a60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008a60 	.word	0x08008a60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

char uart_read() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	char c;
	HAL_UART_Receive_IT(&huart1, (uint8_t*)(&c), sizeof(char));
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <uart_read+0x2c>)
 80005c2:	f003 fba8 	bl	8003d16 <HAL_UART_Receive_IT>
	xSemaphoreTake(semaphori,HAL_MAX_DELAY);
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <uart_read+0x30>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 31ff 	mov.w	r1, #4294967295
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 f840 	bl	8005654 <xQueueSemaphoreTake>
	return c;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200009d0 	.word	0x200009d0
 80005e4:	2000095c 	.word	0x2000095c

080005e8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken;

	if (huart==&huart1){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_UART_RxCpltCallback+0x44>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d109      	bne.n	800060c <HAL_UART_RxCpltCallback+0x24>
		higher_priority_task_woken = pdFALSE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(semaphori,&higher_priority_task_woken);
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_UART_RxCpltCallback+0x48>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f107 020c 	add.w	r2, r7, #12
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f004 ff8f 	bl	800552a <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR(higher_priority_task_woken);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d007      	beq.n	8000622 <HAL_UART_RxCpltCallback+0x3a>
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy

}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200009d0 	.word	0x200009d0
 8000630:	2000095c 	.word	0x2000095c
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <uart_write>:


int uart_write(char * s, uint16_t size) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <uart_write+0x24>)
 800064e:	f003 fadf 	bl	8003c10 <HAL_UART_Transmit>
	return size;
 8000652:	887b      	ldrh	r3, [r7, #2]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200009d0 	.word	0x200009d0

08000660 <sh_help>:




static int sh_help(int argc, char ** argv) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e023      	b.n	80006b8 <sh_help+0x58>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000670:	4916      	ldr	r1, [pc, #88]	; (80006cc <sh_help+0x6c>)
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <sh_help+0x6c>)
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3308      	adds	r3, #8
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4603      	mov	r3, r0
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <sh_help+0x70>)
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <sh_help+0x74>)
 80006a0:	f007 f996 	bl	80079d0 <sniprintf>
 80006a4:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <sh_help+0x74>)
 80006ae:	f7ff ffc3 	bl	8000638 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <sh_help+0x78>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbd6      	blt.n	8000670 <sh_help+0x10>
	}

	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001a0 	.word	0x200001a0
 80006d0:	08008a78 	.word	0x08008a78
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	2000019c 	.word	0x2000019c

080006dc <shell_init>:

void shell_init() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	int size = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <shell_init+0x38>)
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <shell_init+0x3c>)
 80006ee:	f007 f96f 	bl	80079d0 <sniprintf>
 80006f2:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <shell_init+0x3c>)
 80006fc:	f7ff ff9c 	bl	8000638 <uart_write>

	shell_add('h', sh_help, "Help");
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <shell_init+0x40>)
 8000702:	4907      	ldr	r1, [pc, #28]	; (8000720 <shell_init+0x44>)
 8000704:	2068      	movs	r0, #104	; 0x68
 8000706:	f000 f80d 	bl	8000724 <shell_add>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08008a84 	.word	0x08008a84
 8000718:	2000009c 	.word	0x2000009c
 800071c:	08008aac 	.word	0x08008aac
 8000720:	08000661 	.word	0x08000661

08000724 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <shell_add+0x74>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	dc26      	bgt.n	8000788 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <shell_add+0x74>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4917      	ldr	r1, [pc, #92]	; (800079c <shell_add+0x78>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	7bfa      	ldrb	r2, [r7, #15]
 800074c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <shell_add+0x74>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4912      	ldr	r1, [pc, #72]	; (800079c <shell_add+0x78>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	3304      	adds	r3, #4
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <shell_add+0x74>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <shell_add+0x78>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <shell_add+0x74>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <shell_add+0x74>)
 8000782:	6013      	str	r3, [r2, #0]
		return 0;
 8000784:	2300      	movs	r3, #0
 8000786:	e001      	b.n	800078c <shell_add+0x68>
	}

	return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078c:	4618      	mov	r0, r3
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	2000019c 	.word	0x2000019c
 800079c:	200001a0 	.word	0x200001a0

080007a0 <shell_exec>:

static int shell_exec(char * buf) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007b4:	e040      	b.n	8000838 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80007b6:	492d      	ldr	r1, [pc, #180]	; (800086c <shell_exec+0xcc>)
 80007b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d131      	bne.n	8000832 <shell_exec+0x92>
			argc = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
 80007da:	e013      	b.n	8000804 <shell_exec+0x64>
				if(*p == ' ') {
 80007dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b20      	cmp	r3, #32
 80007e2:	d10c      	bne.n	80007fe <shell_exec+0x5e>
					*p = '\0';
 80007e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80007ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80007f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f2:	3201      	adds	r2, #1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3340      	adds	r3, #64	; 0x40
 80007f8:	443b      	add	r3, r7
 80007fa:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80007fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000800:	3301      	adds	r3, #1
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
 8000804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <shell_exec+0x72>
 800080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800080e:	2b07      	cmp	r3, #7
 8000810:	dde4      	ble.n	80007dc <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <shell_exec+0xcc>)
 8000814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f107 020c 	add.w	r2, r7, #12
 8000828:	4611      	mov	r1, r2
 800082a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	e018      	b.n	8000864 <shell_exec+0xc4>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000834:	3301      	adds	r3, #1
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <shell_exec+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800083e:	429a      	cmp	r2, r3
 8000840:	dbb9      	blt.n	80007b6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <shell_exec+0xd4>)
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <shell_exec+0xd8>)
 800084e:	f007 f8bf 	bl	80079d0 <sniprintf>
 8000852:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <shell_exec+0xd8>)
 800085c:	f7ff feec 	bl	8000638 <uart_write>
	return -1;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000864:	4618      	mov	r0, r3
 8000866:	3740      	adds	r7, #64	; 0x40
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001a0 	.word	0x200001a0
 8000870:	2000019c 	.word	0x2000019c
 8000874:	08008ab4 	.word	0x08008ab4
 8000878:	2000009c 	.word	0x2000009c

0800087c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
	int reading = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800088a:	2102      	movs	r1, #2
 800088c:	482b      	ldr	r0, [pc, #172]	; (800093c <shell_run+0xc0>)
 800088e:	f7ff fed3 	bl	8000638 <uart_write>
		reading = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8000896:	e049      	b.n	800092c <shell_run+0xb0>
			char c = uart_read();
 8000898:	f7ff fe8c 	bl	80005b4 <uart_read>
 800089c:	4603      	mov	r3, r0
 800089e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b08      	cmp	r3, #8
 80008a4:	d027      	beq.n	80008f6 <shell_run+0x7a>
 80008a6:	2b0d      	cmp	r3, #13
 80008a8:	d130      	bne.n	800090c <shell_run+0x90>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <shell_run+0xc4>)
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4824      	ldr	r0, [pc, #144]	; (8000944 <shell_run+0xc8>)
 80008b2:	f007 f88d 	bl	80079d0 <sniprintf>
 80008b6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <shell_run+0xc8>)
 80008c0:	f7ff feba 	bl	8000638 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <shell_run+0xcc>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <shell_run+0xcc>)
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <shell_run+0xd0>)
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <shell_run+0xc8>)
 80008da:	f007 f879 	bl	80079d0 <sniprintf>
 80008de:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <shell_run+0xc8>)
 80008e8:	f7ff fea6 	bl	8000638 <uart_write>
				reading = 0;        //exit read loop
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
				break;
 80008f4:	e01a      	b.n	800092c <shell_run+0xb0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dd16      	ble.n	800092a <shell_run+0xae>
					pos--;          //remove it in buffer
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3b01      	subs	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8000902:	2103      	movs	r1, #3
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <shell_run+0xd4>)
 8000906:	f7ff fe97 	bl	8000638 <uart_write>
				}
				break;
 800090a:	e00e      	b.n	800092a <shell_run+0xae>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2bff      	cmp	r3, #255	; 0xff
 8000910:	dc0c      	bgt.n	800092c <shell_run+0xb0>
					uart_write(&c, 1);
 8000912:	1cfb      	adds	r3, r7, #3
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe8e 	bl	8000638 <uart_write>
					cmd_buffer[pos++] = c; //store
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	78f9      	ldrb	r1, [r7, #3]
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <shell_run+0xcc>)
 8000926:	54d1      	strb	r1, [r2, r3]
 8000928:	e000      	b.n	800092c <shell_run+0xb0>
				break;
 800092a:	bf00      	nop
		while(reading) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1b2      	bne.n	8000898 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <shell_run+0xcc>)
 8000934:	f7ff ff34 	bl	80007a0 <shell_exec>
		uart_write(prompt, 2);
 8000938:	e7a7      	b.n	800088a <shell_run+0xe>
 800093a:	bf00      	nop
 800093c:	20000004 	.word	0x20000004
 8000940:	08008acc 	.word	0x08008acc
 8000944:	2000009c 	.word	0x2000009c
 8000948:	200004a0 	.word	0x200004a0
 800094c:	08008ad0 	.word	0x08008ad0
 8000950:	20000000 	.word	0x20000000

08000954 <fonction>:
extern char print_buffer[BUFFER_SIZE];
extern int LED_DELAY;


int fonction(int argc, char ** argv)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	int size = snprintf (print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <fonction+0x30>)
 8000960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <fonction+0x34>)
 8000966:	f007 f833 	bl	80079d0 <sniprintf>
 800096a:	60f8      	str	r0, [r7, #12]
	uart_write(print_buffer, size);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	b29b      	uxth	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <fonction+0x34>)
 8000974:	f7ff fe60 	bl	8000638 <uart_write>

	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	08008ad8 	.word	0x08008ad8
 8000988:	200005a0 	.word	0x200005a0

0800098c <addition>:


int addition( int argc, char ** argv)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	if(argc !=3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d00f      	beq.n	80009bc <addition+0x30>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument pour une somme de deux\r\n");
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <addition+0x80>)
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <addition+0x84>)
 80009a4:	f007 f814 	bl	80079d0 <sniprintf>
 80009a8:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	4817      	ldr	r0, [pc, #92]	; (8000a10 <addition+0x84>)
 80009b2:	f7ff fe41 	bl	8000638 <uart_write>
		return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e022      	b.n	8000a02 <addition+0x76>
	}
	else
	{
		int a = atoi(argv[1]);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fd2a 	bl	800741c <atoi>
 80009c8:	6178      	str	r0, [r7, #20]
		int b = atoi(argv[2]);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	3308      	adds	r3, #8
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fd23 	bl	800741c <atoi>
 80009d6:	6138      	str	r0, [r7, #16]
		int size = snprintf (print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n\r\n", a, b, a+b);
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4413      	add	r3, r2
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <addition+0x88>)
 80009e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <addition+0x84>)
 80009ee:	f006 ffef 	bl	80079d0 <sniprintf>
 80009f2:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <addition+0x84>)
 80009fc:	f7ff fe1c 	bl	8000638 <uart_write>

	}
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08008af8 	.word	0x08008af8
 8000a10:	200005a0 	.word	0x200005a0
 8000a14:	08008b38 	.word	0x08008b38

08000a18 <setLedRate>:
	return 0;
}
*/

int setLedRate( int argc, char ** argv)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	if(argc!=2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d00d      	beq.n	8000a44 <setLedRate+0x2c>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'arguments pour la fonction setLedRate\r\n");
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <setLedRate+0x60>)
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <setLedRate+0x64>)
 8000a30:	f006 ffce 	bl	80079d0 <sniprintf>
 8000a34:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <setLedRate+0x64>)
 8000a3e:	f7ff fdfb 	bl	8000638 <uart_write>
 8000a42:	e00d      	b.n	8000a60 <setLedRate+0x48>
	}
	else
	{
		LED_DELAY = atoi(argv[1]);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	3304      	adds	r3, #4
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 fce6 	bl	800741c <atoi>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <setLedRate+0x68>)
 8000a54:	6013      	str	r3, [r2, #0]
		vTaskResume(xHandleLED); //reveille la tache si elle est suspended else pass
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <setLedRate+0x6c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 fa3e 	bl	8005edc <vTaskResume>
	}
	printf("%d\n\r", LED_DELAY);
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <setLedRate+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <setLedRate+0x70>)
 8000a68:	f006 feaa 	bl	80077c0 <iprintf>
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08008b4c 	.word	0x08008b4c
 8000a7c:	200005a0 	.word	0x200005a0
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000964 	.word	0x20000964
 8000a88:	08008b94 	.word	0x08008b94

08000a8c <led>:




int led()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	int LED_Delay_local_var;
	while(1)
	{
		LED_Delay_local_var = LED_DELAY;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <led+0x44>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	607b      	str	r3, [r7, #4]
		switch(LED_Delay_local_var)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <led+0x28>
				{
					case 0 :
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <led+0x48>)
 8000aa4:	f001 fca6 	bl	80023f4 <HAL_GPIO_WritePin>
						vTaskSuspend(xHandleLED); // communiquer PROPREMENT cad suspendre si l 0 == led off
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <led+0x4c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 f94d 	bl	8005d4c <vTaskSuspend>
						break;
 8000ab2:	e008      	b.n	8000ac6 <led+0x3a>


					default :
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <led+0x48>)
 8000ab8:	f001 fcb5 	bl	8002426 <HAL_GPIO_TogglePin>
						vTaskDelay(LED_Delay_local_var);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 f90e 	bl	8005ce0 <vTaskDelay>
						break;
 8000ac4:	bf00      	nop

				}
		vTaskDelay(LED_Delay_local_var);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 f909 	bl	8005ce0 <vTaskDelay>
		LED_Delay_local_var = LED_DELAY;
 8000ace:	e7e0      	b.n	8000a92 <led+0x6>
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	20000964 	.word	0x20000964

08000adc <spammer>:
	return 0;
}


int spammer( int argc, char ** argv)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	if(argc!=3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d00f      	beq.n	8000b0c <spammer+0x30>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'arguments pour la fonction Spam \r\n");
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <spammer+0x7c>)
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	481a      	ldr	r0, [pc, #104]	; (8000b5c <spammer+0x80>)
 8000af4:	f006 ff6c 	bl	80079d0 <sniprintf>
 8000af8:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	4816      	ldr	r0, [pc, #88]	; (8000b5c <spammer+0x80>)
 8000b02:	f7ff fd99 	bl	8000638 <uart_write>
		return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e020      	b.n	8000b4e <spammer+0x72>
	}
	else
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "%s\r\n", argv[1]);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <spammer+0x84>)
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <spammer+0x80>)
 8000b1a:	f006 ff59 	bl	80079d0 <sniprintf>
 8000b1e:	6138      	str	r0, [r7, #16]
		for (int i=0; i<atoi(argv[2]);i++) uart_write(print_buffer, size);
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e008      	b.n	8000b38 <spammer+0x5c>
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <spammer+0x80>)
 8000b2e:	f7ff fd83 	bl	8000638 <uart_write>
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 fc6c 	bl	800741c <atoi>
 8000b44:	4602      	mov	r2, r0
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dbec      	blt.n	8000b26 <spammer+0x4a>
	}

	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08008b9c 	.word	0x08008b9c
 8000b5c:	200005a0 	.word	0x200005a0
 8000b60:	08008be0 	.word	0x08008be0

08000b64 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName ){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]

	int size = snprintf (print_buffer, BUFFER_SIZE, "STACK OVER FLOWN \r\nDepassement de la pile de %s\r\n",pcTaskName );
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <vApplicationStackOverflowHook+0x34>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <vApplicationStackOverflowHook+0x38>)
 8000b78:	f006 ff2a 	bl	80079d0 <sniprintf>
 8000b7c:	60f8      	str	r0, [r7, #12]
	uart_write(print_buffer, size);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <vApplicationStackOverflowHook+0x38>)
 8000b86:	f7ff fd57 	bl	8000638 <uart_write>

	Error_Handler();
 8000b8a:	f000 fe7b 	bl	8001884 <Error_Handler>

}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08008be8 	.word	0x08008be8
 8000b9c:	200005a0 	.word	0x200005a0

08000ba0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200006a4 	.word	0x200006a4
 8000bd0:	20000758 	.word	0x20000758

08000bd4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_FREERTOS_Init+0x30>)
 8000bdc:	1d3c      	adds	r4, r7, #4
 8000bde:	461d      	mov	r5, r3
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 faba 	bl	800516a <osThreadCreate>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <MX_FREERTOS_Init+0x34>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	08008c28 	.word	0x08008c28
 8000c08:	200006a0 	.word	0x200006a0

08000c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f004 faf4 	bl	8005202 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0x8>

08000c1c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b090      	sub	sp, #64	; 0x40
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	4bad      	ldr	r3, [pc, #692]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4aac      	ldr	r2, [pc, #688]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4baa      	ldr	r3, [pc, #680]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4ba7      	ldr	r3, [pc, #668]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4aa6      	ldr	r2, [pc, #664]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4ba4      	ldr	r3, [pc, #656]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4aa0      	ldr	r2, [pc, #640]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b9e      	ldr	r3, [pc, #632]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b9b      	ldr	r3, [pc, #620]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a9a      	ldr	r2, [pc, #616]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b95      	ldr	r3, [pc, #596]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a94      	ldr	r2, [pc, #592]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a8e      	ldr	r2, [pc, #568]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a88      	ldr	r2, [pc, #544]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cda:	4b83      	ldr	r3, [pc, #524]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a82      	ldr	r2, [pc, #520]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a7c      	ldr	r2, [pc, #496]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b7a      	ldr	r3, [pc, #488]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b77      	ldr	r3, [pc, #476]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a76      	ldr	r2, [pc, #472]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b71      	ldr	r3, [pc, #452]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a70      	ldr	r2, [pc, #448]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <MX_GPIO_Init+0x2cc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	486b      	ldr	r0, [pc, #428]	; (8000eec <MX_GPIO_Init+0x2d0>)
 8000d40:	f001 fb58 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f241 010e 	movw	r1, #4110	; 0x100e
 8000d4a:	4869      	ldr	r0, [pc, #420]	; (8000ef0 <MX_GPIO_Init+0x2d4>)
 8000d4c:	f001 fb52 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2108      	movs	r1, #8
 8000d54:	4867      	ldr	r0, [pc, #412]	; (8000ef4 <MX_GPIO_Init+0x2d8>)
 8000d56:	f001 fb4d 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4865      	ldr	r0, [pc, #404]	; (8000ef8 <MX_GPIO_Init+0x2dc>)
 8000d62:	f001 fb47 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	21c8      	movs	r1, #200	; 0xc8
 8000d6a:	4864      	ldr	r0, [pc, #400]	; (8000efc <MX_GPIO_Init+0x2e0>)
 8000d6c:	f001 fb42 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000d70:	2310      	movs	r3, #16
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d80:	230e      	movs	r3, #14
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	485d      	ldr	r0, [pc, #372]	; (8000f00 <MX_GPIO_Init+0x2e4>)
 8000d8c:	f001 f986 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d90:	2308      	movs	r3, #8
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4857      	ldr	r0, [pc, #348]	; (8000f00 <MX_GPIO_Init+0x2e4>)
 8000da4:	f001 f97a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000da8:	2304      	movs	r3, #4
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000db8:	2309      	movs	r3, #9
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	484f      	ldr	r0, [pc, #316]	; (8000f00 <MX_GPIO_Init+0x2e4>)
 8000dc4:	f001 f96a 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000dc8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	4845      	ldr	r0, [pc, #276]	; (8000efc <MX_GPIO_Init+0x2e0>)
 8000de6:	f001 f959 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000dea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	483e      	ldr	r0, [pc, #248]	; (8000f00 <MX_GPIO_Init+0x2e4>)
 8000e08:	f001 f948 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e26:	4619      	mov	r1, r3
 8000e28:	4836      	ldr	r0, [pc, #216]	; (8000f04 <MX_GPIO_Init+0x2e8>)
 8000e2a:	f001 f937 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000e2e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e40:	230a      	movs	r3, #10
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482e      	ldr	r0, [pc, #184]	; (8000f04 <MX_GPIO_Init+0x2e8>)
 8000e4c:	f001 f926 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e50:	2310      	movs	r3, #16
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e60:	2302      	movs	r3, #2
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	; (8000f04 <MX_GPIO_Init+0x2e8>)
 8000e6c:	f001 f916 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e80:	2308      	movs	r3, #8
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <MX_GPIO_Init+0x2d0>)
 8000e8c:	f001 f906 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000e90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <MX_GPIO_Init+0x2ec>)
 8000eae:	f001 f8f5 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <MX_GPIO_Init+0x2f0>)
 8000ed0:	f001 f8e4 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000ed4:	2360      	movs	r3, #96	; 0x60
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ee4:	230d      	movs	r3, #13
 8000ee6:	e013      	b.n	8000f10 <MX_GPIO_Init+0x2f4>
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	40022000 	.word	0x40022000
 8000ef4:	40022800 	.word	0x40022800
 8000ef8:	40021c00 	.word	0x40021c00
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	48bc      	ldr	r0, [pc, #752]	; (800120c <MX_GPIO_Init+0x5f0>)
 8000f1a:	f001 f8bf 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	48b5      	ldr	r0, [pc, #724]	; (8001210 <MX_GPIO_Init+0x5f4>)
 8000f3a:	f001 f8af 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000f3e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f50:	230c      	movs	r3, #12
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	48ae      	ldr	r0, [pc, #696]	; (8001214 <MX_GPIO_Init+0x5f8>)
 8000f5c:	f001 f89e 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000f60:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f72:	230e      	movs	r3, #14
 8000f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	48a6      	ldr	r0, [pc, #664]	; (8001218 <MX_GPIO_Init+0x5fc>)
 8000f7e:	f001 f88d 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	48a0      	ldr	r0, [pc, #640]	; (8001218 <MX_GPIO_Init+0x5fc>)
 8000f98:	f001 f880 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fa0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	489a      	ldr	r0, [pc, #616]	; (800121c <MX_GPIO_Init+0x600>)
 8000fb2:	f001 f873 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000fb6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fc8:	230c      	movs	r3, #12
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4892      	ldr	r0, [pc, #584]	; (800121c <MX_GPIO_Init+0x600>)
 8000fd4:	f001 f862 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000fd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fea:	230a      	movs	r3, #10
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	488a      	ldr	r0, [pc, #552]	; (8001220 <MX_GPIO_Init+0x604>)
 8000ff6:	f001 f851 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin;
 8000ffa:	23b0      	movs	r3, #176	; 0xb0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800100a:	230a      	movs	r3, #10
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4883      	ldr	r0, [pc, #524]	; (8001224 <MX_GPIO_Init+0x608>)
 8001016:	f001 f841 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800101a:	23f7      	movs	r3, #247	; 0xf7
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800102a:	230e      	movs	r3, #14
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	4619      	mov	r1, r3
 8001034:	487c      	ldr	r0, [pc, #496]	; (8001228 <MX_GPIO_Init+0x60c>)
 8001036:	f001 f831 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800104c:	2309      	movs	r3, #9
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	486f      	ldr	r0, [pc, #444]	; (8001214 <MX_GPIO_Init+0x5f8>)
 8001058:	f001 f820 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800106e:	230a      	movs	r3, #10
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	4866      	ldr	r0, [pc, #408]	; (8001214 <MX_GPIO_Init+0x5f8>)
 800107a:	f001 f80f 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800107e:	2320      	movs	r3, #32
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	4861      	ldr	r0, [pc, #388]	; (800121c <MX_GPIO_Init+0x600>)
 8001096:	f001 f801 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010aa:	230d      	movs	r3, #13
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4859      	ldr	r0, [pc, #356]	; (800121c <MX_GPIO_Init+0x600>)
 80010b6:	f000 fff1 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 80010ba:	f241 030e 	movw	r3, #4110	; 0x100e
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4854      	ldr	r0, [pc, #336]	; (8001224 <MX_GPIO_Init+0x608>)
 80010d4:	f000 ffe2 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	484f      	ldr	r0, [pc, #316]	; (800122c <MX_GPIO_Init+0x610>)
 80010ee:	f000 ffd5 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80010f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001104:	230c      	movs	r3, #12
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4848      	ldr	r0, [pc, #288]	; (8001230 <MX_GPIO_Init+0x614>)
 8001110:	f000 ffc4 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001114:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001126:	230e      	movs	r3, #14
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	483c      	ldr	r0, [pc, #240]	; (8001224 <MX_GPIO_Init+0x608>)
 8001132:	f000 ffb3 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001136:	2308      	movs	r3, #8
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114a:	4619      	mov	r1, r3
 800114c:	4836      	ldr	r0, [pc, #216]	; (8001228 <MX_GPIO_Init+0x60c>)
 800114e:	f000 ffa5 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001164:	230d      	movs	r3, #13
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116c:	4619      	mov	r1, r3
 800116e:	4829      	ldr	r0, [pc, #164]	; (8001214 <MX_GPIO_Init+0x5f8>)
 8001170:	f000 ff94 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001174:	2310      	movs	r3, #16
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <MX_GPIO_Init+0x600>)
 8001188:	f000 ff88 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800118c:	2304      	movs	r3, #4
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800119c:	230c      	movs	r3, #12
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	481d      	ldr	r0, [pc, #116]	; (800121c <MX_GPIO_Init+0x600>)
 80011a8:	f000 ff78 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80011ac:	f248 0304 	movw	r3, #32772	; 0x8004
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	481c      	ldr	r0, [pc, #112]	; (8001234 <MX_GPIO_Init+0x618>)
 80011c2:	f000 ff6b 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <MX_GPIO_Init+0x618>)
 80011e0:	f000 ff5c 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80011e4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011f6:	230d      	movs	r3, #13
 80011f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_GPIO_Init+0x618>)
 8001202:	f000 ff4b 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001206:	2301      	movs	r3, #1
 8001208:	e016      	b.n	8001238 <MX_GPIO_Init+0x61c>
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40020400 	.word	0x40020400
 8001214:	40021800 	.word	0x40021800
 8001218:	40022400 	.word	0x40022400
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40020000 	.word	0x40020000
 8001224:	40022000 	.word	0x40022000
 8001228:	40022800 	.word	0x40022800
 800122c:	40020800 	.word	0x40020800
 8001230:	40021400 	.word	0x40021400
 8001234:	40021c00 	.word	0x40021c00
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001246:	2302      	movs	r3, #2
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	489d      	ldr	r0, [pc, #628]	; (80014c8 <MX_GPIO_Init+0x8ac>)
 8001252:	f000 ff23 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001268:	2301      	movs	r3, #1
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4896      	ldr	r0, [pc, #600]	; (80014cc <MX_GPIO_Init+0x8b0>)
 8001274:	f000 ff12 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800127e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128c:	4619      	mov	r1, r3
 800128e:	488e      	ldr	r0, [pc, #568]	; (80014c8 <MX_GPIO_Init+0x8ac>)
 8001290:	f000 ff04 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012a4:	2308      	movs	r3, #8
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ac:	4619      	mov	r1, r3
 80012ae:	4888      	ldr	r0, [pc, #544]	; (80014d0 <MX_GPIO_Init+0x8b4>)
 80012b0:	f000 fef4 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80012b4:	2310      	movs	r3, #16
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012c4:	230a      	movs	r3, #10
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4881      	ldr	r0, [pc, #516]	; (80014d4 <MX_GPIO_Init+0x8b8>)
 80012d0:	f000 fee4 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80012d4:	2328      	movs	r3, #40	; 0x28
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	230c      	movs	r3, #12
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4879      	ldr	r0, [pc, #484]	; (80014d4 <MX_GPIO_Init+0x8b8>)
 80012f0:	f000 fed4 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	4873      	ldr	r0, [pc, #460]	; (80014d8 <MX_GPIO_Init+0x8bc>)
 800130c:	f000 fec6 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001310:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	486d      	ldr	r0, [pc, #436]	; (80014dc <MX_GPIO_Init+0x8c0>)
 8001326:	f000 feb9 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800132a:	2308      	movs	r3, #8
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800133a:	230c      	movs	r3, #12
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4862      	ldr	r0, [pc, #392]	; (80014d0 <MX_GPIO_Init+0x8b4>)
 8001346:	f000 fea9 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800134a:	2305      	movs	r3, #5
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800135a:	230a      	movs	r3, #10
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	485a      	ldr	r0, [pc, #360]	; (80014d0 <MX_GPIO_Init+0x8b4>)
 8001366:	f000 fe99 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800136a:	2332      	movs	r3, #50	; 0x32
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137a:	230b      	movs	r3, #11
 800137c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	4852      	ldr	r0, [pc, #328]	; (80014d0 <MX_GPIO_Init+0x8b4>)
 8001386:	f000 fe89 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800138a:	2304      	movs	r3, #4
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800139a:	2309      	movs	r3, #9
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	484e      	ldr	r0, [pc, #312]	; (80014e0 <MX_GPIO_Init+0x8c4>)
 80013a6:	f000 fe79 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80013aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013bc:	2309      	movs	r3, #9
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c4:	4619      	mov	r1, r3
 80013c6:	4847      	ldr	r0, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x8c8>)
 80013c8:	f000 fe68 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80013cc:	2304      	movs	r3, #4
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013dc:	4619      	mov	r1, r3
 80013de:	483e      	ldr	r0, [pc, #248]	; (80014d8 <MX_GPIO_Init+0x8bc>)
 80013e0:	f000 fe5c 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013e4:	2386      	movs	r3, #134	; 0x86
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f4:	230b      	movs	r3, #11
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fc:	4619      	mov	r1, r3
 80013fe:	4833      	ldr	r0, [pc, #204]	; (80014cc <MX_GPIO_Init+0x8b0>)
 8001400:	f000 fe4c 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001404:	2301      	movs	r3, #1
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001408:	2303      	movs	r3, #3
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001414:	4619      	mov	r1, r3
 8001416:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_GPIO_Init+0x8b0>)
 8001418:	f000 fe40 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800141c:	2350      	movs	r3, #80	; 0x50
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800142c:	230d      	movs	r3, #13
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001434:	4619      	mov	r1, r3
 8001436:	4825      	ldr	r0, [pc, #148]	; (80014cc <MX_GPIO_Init+0x8b0>)
 8001438:	f000 fe30 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800143c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800144e:	2304      	movs	r3, #4
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001456:	4619      	mov	r1, r3
 8001458:	481e      	ldr	r0, [pc, #120]	; (80014d4 <MX_GPIO_Init+0x8b8>)
 800145a:	f000 fe1f 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800145e:	2328      	movs	r3, #40	; 0x28
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800146e:	230a      	movs	r3, #10
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_GPIO_Init+0x8b0>)
 800147a:	f000 fe0f 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800148e:	2309      	movs	r3, #9
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001496:	4619      	mov	r1, r3
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_GPIO_Init+0x8b8>)
 800149a:	f000 fdff 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800149e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b0:	2305      	movs	r3, #5
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <MX_GPIO_Init+0x8c4>)
 80014bc:	f000 fdee 	bl	800209c <HAL_GPIO_Init>

}
 80014c0:	bf00      	nop
 80014c2:	3740      	adds	r7, #64	; 0x40
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014f0:	1d39      	adds	r1, r7, #4
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2201      	movs	r2, #1
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <__io_putchar+0x20>)
 80014fa:	f002 fb89 	bl	8003c10 <HAL_UART_Transmit>

	return ch;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200009d0 	.word	0x200009d0

0800150c <codeTache>:

/*
 * Code d'une tache bidon
 */
void codeTache (void * pvParameters) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	int compteur = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
	int duree = (int) pvParameters;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	613b      	str	r3, [r7, #16]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 800151c:	f005 f99a 	bl	8006854 <xTaskGetCurrentTaskHandle>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fe54 	bl	80061d0 <pcTaskGetName>
 8001528:	60f8      	str	r0, [r7, #12]
	while (1) {
		printf("Je suis la tache %s et je m'endors pour %d periodes\n", s, duree);
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <codeTache+0x38>)
 8001530:	f006 f946 	bl	80077c0 <iprintf>
		vTaskDelay(duree);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fbd2 	bl	8005ce0 <vTaskDelay>
		compteur++;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
		printf("Je suis la tache %s et je m'endors pour %d periodes\n", s, duree);
 8001542:	e7f2      	b.n	800152a <codeTache+0x1e>
 8001544:	08008c44 	.word	0x08008c44

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fc04 	bl	8001d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f91d 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f7ff fb61 	bl	8000c1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800155a:	f000 fb1b 	bl	8001b94 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Init\r\n");
 800155e:	4866      	ldr	r0, [pc, #408]	; (80016f8 <main+0x1b0>)
 8001560:	f006 f9b4 	bl	80078cc <puts>
  semaphori = xSemaphoreCreateBinary();
 8001564:	2203      	movs	r2, #3
 8001566:	2100      	movs	r1, #0
 8001568:	2001      	movs	r0, #1
 800156a:	f003 ff7d 	bl	8005468 <xQueueGenericCreate>
 800156e:	4603      	mov	r3, r0
 8001570:	4a62      	ldr	r2, [pc, #392]	; (80016fc <main+0x1b4>)
 8001572:	6013      	str	r3, [r2, #0]
  semaphore_led = xSemaphoreCreateBinary();
 8001574:	2203      	movs	r2, #3
 8001576:	2100      	movs	r1, #0
 8001578:	2001      	movs	r0, #1
 800157a:	f003 ff75 	bl	8005468 <xQueueGenericCreate>
 800157e:	4603      	mov	r3, r0
 8001580:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <main+0x1b8>)
 8001582:	6013      	str	r3, [r2, #0]

  if (semaphori == NULL) Error_Handler();
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <main+0x1b4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <main+0x48>
 800158c:	f000 f97a 	bl	8001884 <Error_Handler>
  if (semaphore_led == NULL) Error_Handler();
 8001590:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <main+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <main+0x54>
 8001598:	f000 f974 	bl	8001884 <Error_Handler>

  xReturned = xTaskCreate(
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <main+0x1bc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <main+0x1c0>)
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	2304      	movs	r3, #4
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	4956      	ldr	r1, [pc, #344]	; (800170c <main+0x1c4>)
 80015b2:	4857      	ldr	r0, [pc, #348]	; (8001710 <main+0x1c8>)
 80015b4:	f004 fa45 	bl	8005a42 <xTaskCreate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <main+0x1cc>)
 80015bc:	6013      	str	r3, [r2, #0]
    		STACK_SIZE, 	// Stack size in words, not bytes.
    		(void *)LED_DELAY, // Parameter passed into the task.
    		LED_PRIORITY,	// Priority at which the task is created.
    		&xHandleLED ); // Used to pass out the created task's handle.

  if(xReturned == pdTRUE)
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <main+0x1cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d103      	bne.n	80015ce <main+0x86>
  {
	  printf("LED task created \r\n");
 80015c6:	4854      	ldr	r0, [pc, #336]	; (8001718 <main+0x1d0>)
 80015c8:	f006 f980 	bl	80078cc <puts>
 80015cc:	e004      	b.n	80015d8 <main+0x90>
  }
  else
  {
	  printf("Error LED task not created \r\n");
 80015ce:	4853      	ldr	r0, [pc, #332]	; (800171c <main+0x1d4>)
 80015d0:	f006 f97c 	bl	80078cc <puts>
	  Error_Handler();
 80015d4:	f000 f956 	bl	8001884 <Error_Handler>
  }


  xReturned = xTaskCreate(
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <main+0x1d8>)
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2305      	movs	r3, #5
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	494f      	ldr	r1, [pc, #316]	; (8001724 <main+0x1dc>)
 80015e8:	484f      	ldr	r0, [pc, #316]	; (8001728 <main+0x1e0>)
 80015ea:	f004 fa2a 	bl	8005a42 <xTaskCreate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <main+0x1cc>)
 80015f2:	6013      	str	r3, [r2, #0]
      		(void *) pdTRUE, /* Parameter passed into the task. */
      		SHELL_PRIORITY,/* Priority at which the task is created. */
      		&xHandleSHELL ); /* Used to pass out the created task's handle. */


  if(xReturned == pdTRUE)
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <main+0x1cc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d103      	bne.n	8001604 <main+0xbc>
  {
	  printf("Shell task created \r\n");
 80015fc:	484b      	ldr	r0, [pc, #300]	; (800172c <main+0x1e4>)
 80015fe:	f006 f965 	bl	80078cc <puts>
 8001602:	e004      	b.n	800160e <main+0xc6>
  }
  else
  {
	  printf("Error Shell task not created \r\n");
 8001604:	484a      	ldr	r0, [pc, #296]	; (8001730 <main+0x1e8>)
 8001606:	f006 f961 	bl	80078cc <puts>
	  Error_Handler();
 800160a:	f000 f93b 	bl	8001884 <Error_Handler>

  /*
   * Debut de fonction bidons à STACK_SIZE_BIDON 4096
   */

  if (SOV_FLAG){
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <main+0x1ec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <main+0x102>
	  xReturned = xTaskCreate(
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <main+0x1f0>)
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2301      	movs	r3, #1
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	220a      	movs	r2, #10
 8001622:	4946      	ldr	r1, [pc, #280]	; (800173c <main+0x1f4>)
 8001624:	4846      	ldr	r0, [pc, #280]	; (8001740 <main+0x1f8>)
 8001626:	f004 fa0c 	bl	8005a42 <xTaskCreate>
 800162a:	4603      	mov	r3, r0
 800162c:	4a39      	ldr	r2, [pc, #228]	; (8001714 <main+0x1cc>)
 800162e:	6013      	str	r3, [r2, #0]
				small_STACK_SIZE, 	// Stack size in words, not bytes.
				(void *)NULL, // Parameter passed into the task.
				BIDON_PRIORITY,	// Priority at which the task is created.
				&xHandleBidon1 ); // Used to pass out the created task's handle.

	  if(xReturned == pdTRUE)
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <main+0x1cc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d103      	bne.n	8001640 <main+0xf8>
	  {
		  printf("Bidon1 task created \r\n");
 8001638:	4842      	ldr	r0, [pc, #264]	; (8001744 <main+0x1fc>)
 800163a:	f006 f947 	bl	80078cc <puts>
 800163e:	e004      	b.n	800164a <main+0x102>
	  }
	  else
	  {
		  printf("Error Bidon1 task not created \r\n");
 8001640:	4841      	ldr	r0, [pc, #260]	; (8001748 <main+0x200>)
 8001642:	f006 f943 	bl	80078cc <puts>
		  Error_Handler();
 8001646:	f000 f91d 	bl	8001884 <Error_Handler>
	  }
  }

  if (BIDON_FLAG){
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <main+0x204>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d035      	beq.n	80016be <main+0x176>



	  xReturned = xTaskCreate(
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <main+0x208>)
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2301      	movs	r3, #1
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	493c      	ldr	r1, [pc, #240]	; (8001754 <main+0x20c>)
 8001662:	4837      	ldr	r0, [pc, #220]	; (8001740 <main+0x1f8>)
 8001664:	f004 f9ed 	bl	8005a42 <xTaskCreate>
 8001668:	4603      	mov	r3, r0
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <main+0x1cc>)
 800166c:	6013      	str	r3, [r2, #0]
				STACK_SIZE, 	// Stack size in words, not bytes.
				(void *)NULL, // Parameter passed into the task.
				BIDON_PRIORITY,	// Priority at which the task is created.
				&xHandleBidon2 ); // Used to pass out the created task's handle.

	  if(xReturned == pdTRUE)
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <main+0x1cc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d103      	bne.n	800167e <main+0x136>
	  {
		  printf("Bidon2 task created \r\n");
 8001676:	4838      	ldr	r0, [pc, #224]	; (8001758 <main+0x210>)
 8001678:	f006 f928 	bl	80078cc <puts>
 800167c:	e004      	b.n	8001688 <main+0x140>
	  }
	  else
	  {
		  printf("Error Bidon2 task not created \r\n");
 800167e:	4837      	ldr	r0, [pc, #220]	; (800175c <main+0x214>)
 8001680:	f006 f924 	bl	80078cc <puts>
		  Error_Handler();
 8001684:	f000 f8fe 	bl	8001884 <Error_Handler>
	  }

	  xReturned = xTaskCreate(
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <main+0x218>)
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001696:	4933      	ldr	r1, [pc, #204]	; (8001764 <main+0x21c>)
 8001698:	4829      	ldr	r0, [pc, #164]	; (8001740 <main+0x1f8>)
 800169a:	f004 f9d2 	bl	8005a42 <xTaskCreate>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <main+0x1cc>)
 80016a2:	6013      	str	r3, [r2, #0]
				STACK_SIZE_BIDON, 	// Stack size in words, not bytes.
				(void *)NULL, // Parameter passed into the task.
				BIDON_PRIORITY,	// Priority at which the task is created.
				&xHandleBidon3 ); // Used to pass out the created task's handle.

	  if(xReturned == pdTRUE)
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <main+0x1cc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d103      	bne.n	80016b4 <main+0x16c>
	  {
		  printf("Bidon3 task created \r\n");
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <main+0x220>)
 80016ae:	f006 f90d 	bl	80078cc <puts>
 80016b2:	e004      	b.n	80016be <main+0x176>
	  }
	  else
	  {
		  printf("Error Bidon3 task not created \r\n");
 80016b4:	482d      	ldr	r0, [pc, #180]	; (800176c <main+0x224>)
 80016b6:	f006 f909 	bl	80078cc <puts>
		  Error_Handler();
 80016ba:	f000 f8e3 	bl	8001884 <Error_Handler>
	  }

  }

	shell_init();
 80016be:	f7ff f80d 	bl	80006dc <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <main+0x228>)
 80016c4:	492b      	ldr	r1, [pc, #172]	; (8001774 <main+0x22c>)
 80016c6:	2066      	movs	r0, #102	; 0x66
 80016c8:	f7ff f82c 	bl	8000724 <shell_add>
	shell_add('a', addition, "addition de deux entiers");
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <main+0x230>)
 80016ce:	492b      	ldr	r1, [pc, #172]	; (800177c <main+0x234>)
 80016d0:	2061      	movs	r0, #97	; 0x61
 80016d2:	f7ff f827 	bl	8000724 <shell_add>
	shell_add('l', setLedRate, "faire clignoter la led a la frequence 1/p");
 80016d6:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <main+0x238>)
 80016d8:	492a      	ldr	r1, [pc, #168]	; (8001784 <main+0x23c>)
 80016da:	206c      	movs	r0, #108	; 0x6c
 80016dc:	f7ff f822 	bl	8000724 <shell_add>
	shell_add('s', spammer, "spam un mot le nombre que vous donnez en argument");
 80016e0:	4a29      	ldr	r2, [pc, #164]	; (8001788 <main+0x240>)
 80016e2:	492a      	ldr	r1, [pc, #168]	; (800178c <main+0x244>)
 80016e4:	2073      	movs	r0, #115	; 0x73
 80016e6:	f7ff f81d 	bl	8000724 <shell_add>

	vTaskStartScheduler();
 80016ea:	f004 fc57 	bl	8005f9c <vTaskStartScheduler>

	//shell_run(&h_shell); <-- plus besoin car appelée a la creation de la task
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016ee:	f7ff fa71 	bl	8000bd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016f2:	f003 fd33 	bl	800515c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80016f6:	e7fe      	b.n	80016f6 <main+0x1ae>
 80016f8:	08008c7c 	.word	0x08008c7c
 80016fc:	2000095c 	.word	0x2000095c
 8001700:	20000960 	.word	0x20000960
 8001704:	20000008 	.word	0x20000008
 8001708:	20000964 	.word	0x20000964
 800170c:	08008c84 	.word	0x08008c84
 8001710:	08000a8d 	.word	0x08000a8d
 8001714:	20000958 	.word	0x20000958
 8001718:	08008c88 	.word	0x08008c88
 800171c:	08008c9c 	.word	0x08008c9c
 8001720:	20000968 	.word	0x20000968
 8001724:	08008cbc 	.word	0x08008cbc
 8001728:	0800087d 	.word	0x0800087d
 800172c:	08008cc4 	.word	0x08008cc4
 8001730:	08008cdc 	.word	0x08008cdc
 8001734:	2000097c 	.word	0x2000097c
 8001738:	2000096c 	.word	0x2000096c
 800173c:	08008cfc 	.word	0x08008cfc
 8001740:	0800150d 	.word	0x0800150d
 8001744:	08008d04 	.word	0x08008d04
 8001748:	08008d1c 	.word	0x08008d1c
 800174c:	20000978 	.word	0x20000978
 8001750:	20000970 	.word	0x20000970
 8001754:	08008d3c 	.word	0x08008d3c
 8001758:	08008d44 	.word	0x08008d44
 800175c:	08008d5c 	.word	0x08008d5c
 8001760:	20000974 	.word	0x20000974
 8001764:	08008d7c 	.word	0x08008d7c
 8001768:	08008d84 	.word	0x08008d84
 800176c:	08008d9c 	.word	0x08008d9c
 8001770:	08008dbc 	.word	0x08008dbc
 8001774:	08000955 	.word	0x08000955
 8001778:	08008dd4 	.word	0x08008dd4
 800177c:	0800098d 	.word	0x0800098d
 8001780:	08008df0 	.word	0x08008df0
 8001784:	08000a19 	.word	0x08000a19
 8001788:	08008e1c 	.word	0x08008e1c
 800178c:	08000add 	.word	0x08000add

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	; 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 ff71 	bl	8007686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <SystemClock_Config+0xc8>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <SystemClock_Config+0xc8>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <SystemClock_Config+0xc8>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <SystemClock_Config+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <SystemClock_Config+0xcc>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <SystemClock_Config+0xcc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80017fc:	230a      	movs	r3, #10
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001800:	23d2      	movs	r3, #210	; 0xd2
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001808:	2302      	movs	r3, #2
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fe23 	bl	800245c <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800181c:	f000 f832 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800182c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2105      	movs	r1, #5
 800183e:	4618      	mov	r0, r3
 8001840:	f001 f8b0 	bl	80029a4 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800184a:	f000 f81b 	bl	8001884 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	; 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001872:	f000 fa7f 	bl	8001d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40001000 	.word	0x40001000

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	210f      	movs	r1, #15
 80018ca:	f06f 0001 	mvn.w	r0, #1
 80018ce:	f000 fb29 	bl	8001f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_InitTick+0xe0>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <HAL_InitTick+0xe0>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_InitTick+0xe0>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001908:	f107 0210 	add.w	r2, r7, #16
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fa2c 	bl	8002d70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001922:	f001 f9fd 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8001926:	6378      	str	r0, [r7, #52]	; 0x34
 8001928:	e004      	b.n	8001934 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800192a:	f001 f9f9 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800192e:	4603      	mov	r3, r0
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_InitTick+0xe4>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	3b01      	subs	r3, #1
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_InitTick+0xe8>)
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <HAL_InitTick+0xec>)
 8001946:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_InitTick+0xe8>)
 800194a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800194e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_InitTick+0xe8>)
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_InitTick+0xe8>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_InitTick+0xe8>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_InitTick+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001968:	4817      	ldr	r0, [pc, #92]	; (80019c8 <HAL_InitTick+0xe8>)
 800196a:	f001 fe23 	bl	80035b4 <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11b      	bne.n	80019b4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800197c:	4812      	ldr	r0, [pc, #72]	; (80019c8 <HAL_InitTick+0xe8>)
 800197e:	f001 fe7b 	bl	8003678 <HAL_TIM_Base_Start_IT>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001990:	2036      	movs	r0, #54	; 0x36
 8001992:	f000 fae3 	bl	8001f5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d808      	bhi.n	80019ae <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	2036      	movs	r0, #54	; 0x36
 80019a2:	f000 fabf 	bl	8001f24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_InitTick+0xf0>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e002      	b.n	80019b4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3738      	adds	r7, #56	; 0x38
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	20000980 	.word	0x20000980
 80019cc:	40001000 	.word	0x40001000
 80019d0:	20000010 	.word	0x20000010

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <USART1_IRQHandler+0x10>)
 8001a06:	f002 f9cb 	bl	8003da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200009d0 	.word	0x200009d0

08001a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM6_DAC_IRQHandler+0x10>)
 8001a1a:	f001 fea5 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000980 	.word	0x20000980

08001a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
  }

  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd33 	bl	80014e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
  }
  return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f005 fc76 	bl	8007424 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20050000 	.word	0x20050000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200009cc 	.word	0x200009cc
 8001b6c:	20010bb8 	.word	0x20010bb8

08001b70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <MX_USART1_UART_Init+0x5c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bd8:	f001 ffcc 	bl	8003b74 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001be2:	f7ff fe4f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200009d0 	.word	0x200009d0
 8001bf0:	40011000 	.word	0x40011000

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0ac      	sub	sp, #176	; 0xb0
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	2284      	movs	r2, #132	; 0x84
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fd36 	bl	8007686 <memset>
  if(uartHandle->Instance==USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_UART_MspInit+0x104>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d164      	bne.n	8001cee <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c24:	2340      	movs	r3, #64	; 0x40
 8001c26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 f8cf 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7ff fe22 	bl	8001884 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c46:	f043 0310 	orr.w	r3, r3, #16
 8001c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_UART_MspInit+0x108>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001caa:	4619      	mov	r1, r3
 8001cac:	4814      	ldr	r0, [pc, #80]	; (8001d00 <HAL_UART_MspInit+0x10c>)
 8001cae:	f000 f9f5 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <HAL_UART_MspInit+0x110>)
 8001cda:	f000 f9df 	bl	800209c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	2025      	movs	r0, #37	; 0x25
 8001ce4:	f000 f91e 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce8:	2025      	movs	r0, #37	; 0x25
 8001cea:	f000 f937 	bl	8001f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	37b0      	adds	r7, #176	; 0xb0
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020000 	.word	0x40020000

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ff1d 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f005 fc71 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff fc05 	bl	8001548 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d4c:	08009018 	.word	0x08009018
  ldr r2, =_sbss
 8001d50:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d54:	20010bb8 	.word	0x20010bb8

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>

08001d5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 f8d5 	bl	8001f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d64:	200f      	movs	r0, #15
 8001d66:	f7ff fdbb 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6a:	f7ff fd91 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x20>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_IncTick+0x24>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_IncTick+0x24>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000014 	.word	0x20000014
 8001d98:	20000a58 	.word	0x20000a58

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000a58 	.word	0x20000a58

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x40>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	05fa0000 	.word	0x05fa0000

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <__NVIC_EnableIRQ+0x38>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff4c 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f36:	f7ff ff61 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	6978      	ldr	r0, [r7, #20]
 8001f42:	f7ff ffb1 	bl	8001ea8 <NVIC_EncodePriority>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff80 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff54 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff ff09 	bl	8001d9c <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e052      	b.n	8002050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_Abort+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	e013      	b.n	8002024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7ff fece 	bl	8001d9c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d90c      	bls.n	8002024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e4      	bne.n	8001ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e175      	b.n	80023a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8164 	bne.w	80023a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x56>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80be 	beq.w	80023a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800223e:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <HAL_GPIO_Init+0x328>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_GPIO_Init+0x32c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d037      	beq.n	80022da <HAL_GPIO_Init+0x23e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a57      	ldr	r2, [pc, #348]	; (80023cc <HAL_GPIO_Init+0x330>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_GPIO_Init+0x23a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a56      	ldr	r2, [pc, #344]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02b      	beq.n	80022d2 <HAL_GPIO_Init+0x236>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a55      	ldr	r2, [pc, #340]	; (80023d4 <HAL_GPIO_Init+0x338>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d025      	beq.n	80022ce <HAL_GPIO_Init+0x232>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_GPIO_Init+0x33c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01f      	beq.n	80022ca <HAL_GPIO_Init+0x22e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_GPIO_Init+0x340>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d019      	beq.n	80022c6 <HAL_GPIO_Init+0x22a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_GPIO_Init+0x344>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a51      	ldr	r2, [pc, #324]	; (80023e4 <HAL_GPIO_Init+0x348>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x222>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_GPIO_Init+0x34c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_GPIO_Init+0x350>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x21a>
 80022b2:	2309      	movs	r3, #9
 80022b4:	e012      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022b6:	230a      	movs	r3, #10
 80022b8:	e010      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e00e      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022be:	2307      	movs	r3, #7
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x240>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x328>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_GPIO_Init+0x354>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a34      	ldr	r2, [pc, #208]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002372:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_GPIO_Init+0x354>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_GPIO_Init+0x354>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae86 	bls.w	80020bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40021c00 	.word	0x40021c00
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40022400 	.word	0x40022400
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002438:	887a      	ldrh	r2, [r7, #2]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	041a      	lsls	r2, r3, #16
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43d9      	mvns	r1, r3
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	400b      	ands	r3, r1
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e291      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8087 	beq.w	800258e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002480:	4b96      	ldr	r3, [pc, #600]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b04      	cmp	r3, #4
 800248a:	d00c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248c:	4b93      	ldr	r3, [pc, #588]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d112      	bne.n	80024be <HAL_RCC_OscConfig+0x62>
 8002498:	4b90      	ldr	r3, [pc, #576]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d10b      	bne.n	80024be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a6:	4b8d      	ldr	r3, [pc, #564]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d06c      	beq.n	800258c <HAL_RCC_OscConfig+0x130>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d168      	bne.n	800258c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e26b      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x7a>
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a83      	ldr	r2, [pc, #524]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e02e      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x9c>
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7b      	ldr	r2, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0xc0>
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a75      	ldr	r2, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a72      	ldr	r2, [pc, #456]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 800251c:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6e      	ldr	r2, [pc, #440]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b6c      	ldr	r3, [pc, #432]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6b      	ldr	r2, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fc2e 	bl	8001d9c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fc2a 	bl	8001d9c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e21f      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b61      	ldr	r3, [pc, #388]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xe8>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff fc1a 	bl	8001d9c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fc16 	bl	8001d9c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e20b      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x110>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d069      	beq.n	800266e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259a:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x190>
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1df      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	493d      	ldr	r1, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e040      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d023      	beq.n	800263c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a38      	ldr	r2, [pc, #224]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fbcc 	bl	8001d9c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff fbc8 	bl	8001d9c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1bd      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4929      	ldr	r1, [pc, #164]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a26      	ldr	r2, [pc, #152]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fba8 	bl	8001d9c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff fba4 	bl	8001d9c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e199      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d038      	beq.n	80026ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d019      	beq.n	80026b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7ff fb85 	bl	8001d9c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002696:	f7ff fb81 	bl	8001d9c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e176      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x23a>
 80026b4:	e01a      	b.n	80026ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_RCC_OscConfig+0x280>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff fb6b 	bl	8001d9c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ca:	f7ff fb67 	bl	8001d9c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d903      	bls.n	80026e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e15c      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
 80026dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a4 	beq.w	8002842 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a87      	ldr	r2, [pc, #540]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002722:	4b82      	ldr	r3, [pc, #520]	; (800292c <HAL_RCC_OscConfig+0x4d0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800272e:	4b7f      	ldr	r3, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x4d0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7e      	ldr	r2, [pc, #504]	; (800292c <HAL_RCC_OscConfig+0x4d0>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7ff fb2f 	bl	8001d9c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7ff fb2b 	bl	8001d9c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e120      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x4d0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x31a>
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	e02d      	b.n	80027d2 <HAL_RCC_OscConfig+0x376>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x33c>
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a69      	ldr	r2, [pc, #420]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a66      	ldr	r2, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x376>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x35e>
 80027a0:	4b61      	ldr	r3, [pc, #388]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x376>
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7ff fadf 	bl	8001d9c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7ff fadb 	bl	8001d9c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ce      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x386>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7ff fac9 	bl	8001d9c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7ff fac5 	bl	8001d9c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a4 	beq.w	8002994 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d06b      	beq.n	8002930 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d149      	bne.n	80028f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a30      	ldr	r2, [pc, #192]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff fa96 	bl	8001d9c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff fa92 	bl	8001d9c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e087      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4313      	orrs	r3, r2
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa66 	bl	8001d9c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff fa62 	bl	8001d9c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e057      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x478>
 80028f2:	e04f      	b.n	8002994 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fa4c 	bl	8001d9c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff fa48 	bl	8001d9c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e03d      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCC_OscConfig+0x4cc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x4ac>
 8002926:	e035      	b.n	8002994 <HAL_RCC_OscConfig+0x538>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x544>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d028      	beq.n	8002990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d121      	bne.n	8002990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d11a      	bne.n	8002990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002968:	4293      	cmp	r3, r2
 800296a:	d111      	bne.n	8002990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0d0      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 020f 	bic.w	r2, r3, #15
 80029d2:	4965      	ldr	r1, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d040      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e073      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4936      	ldr	r1, [pc, #216]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7ff f980 	bl	8001d9c <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7ff f97c 	bl	8001d9c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e053      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d210      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1cc>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1d0>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1d4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fec2 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08008e58 	.word	0x08008e58
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	20000010 	.word	0x20000010

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b80:	b090      	sub	sp, #64	; 0x40
 8002b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	2300      	movs	r3, #0
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d00d      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x40>
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	f200 80a1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bae:	e09b      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bb4:	e09b      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bba:	e098      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d028      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	623b      	str	r3, [r7, #32]
 8002bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002be4:	2100      	movs	r1, #0
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be8:	fb03 f201 	mul.w	r2, r3, r1
 8002bec:	2300      	movs	r3, #0
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8002bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c02:	4413      	add	r3, r2
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	61fa      	str	r2, [r7, #28]
 8002c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c16:	f7fd fb4b 	bl	80002b0 <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c22:	e053      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	617a      	str	r2, [r7, #20]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c36:	f04f 0b00 	mov.w	fp, #0
 8002c3a:	4652      	mov	r2, sl
 8002c3c:	465b      	mov	r3, fp
 8002c3e:	f04f 0000 	mov.w	r0, #0
 8002c42:	f04f 0100 	mov.w	r1, #0
 8002c46:	0159      	lsls	r1, r3, #5
 8002c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4c:	0150      	lsls	r0, r2, #5
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	ebb2 080a 	subs.w	r8, r2, sl
 8002c56:	eb63 090b 	sbc.w	r9, r3, fp
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c72:	eb63 0509 	sbc.w	r5, r3, r9
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	00eb      	lsls	r3, r5, #3
 8002c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c84:	00e2      	lsls	r2, r4, #3
 8002c86:	4614      	mov	r4, r2
 8002c88:	461d      	mov	r5, r3
 8002c8a:	eb14 030a 	adds.w	r3, r4, sl
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	eb45 030b 	adc.w	r3, r5, fp
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cc0:	f7fd faf6 	bl	80002b0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3740      	adds	r7, #64	; 0x40
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	017d7840 	.word	0x017d7840

08002d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08008e68 	.word	0x08008e68

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08008e68 	.word	0x08008e68

08002d70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_GetClockConfig+0x5c>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_RCC_GetClockConfig+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40023c00 	.word	0x40023c00

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dfc:	4b69      	ldr	r3, [pc, #420]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a68      	ldr	r2, [pc, #416]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e10:	4964      	ldr	r1, [pc, #400]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	4959      	ldr	r1, [pc, #356]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	494a      	ldr	r1, [pc, #296]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 808b 	beq.w	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe ff5e 	bl	8001d9c <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe ff5a 	bl	8001d9c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e357      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d035      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d02e      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d114      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe ff22 	bl	8001d9c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe ff1e 	bl	8001d9c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e319      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	4901      	ldr	r1, [pc, #4]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	0ffffcff 	.word	0x0ffffcff
 8002fb0:	4baa      	ldr	r3, [pc, #680]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4aa9      	ldr	r2, [pc, #676]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	4ba7      	ldr	r3, [pc, #668]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	49a4      	ldr	r1, [pc, #656]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe0:	4a9e      	ldr	r2, [pc, #632]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fea:	4b9c      	ldr	r3, [pc, #624]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	4999      	ldr	r1, [pc, #612]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003008:	4b94      	ldr	r3, [pc, #592]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003016:	4991      	ldr	r1, [pc, #580]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302a:	4b8c      	ldr	r3, [pc, #560]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003038:	4988      	ldr	r1, [pc, #544]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304c:	4b83      	ldr	r3, [pc, #524]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305a:	4980      	ldr	r1, [pc, #512]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800306e:	4b7b      	ldr	r3, [pc, #492]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4977      	ldr	r1, [pc, #476]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003090:	4b72      	ldr	r3, [pc, #456]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	496f      	ldr	r1, [pc, #444]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f023 020c 	bic.w	r2, r3, #12
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c0:	4966      	ldr	r1, [pc, #408]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	495e      	ldr	r1, [pc, #376]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f6:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	4955      	ldr	r1, [pc, #340]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800313a:	4b48      	ldr	r3, [pc, #288]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4944      	ldr	r1, [pc, #272]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	493c      	ldr	r1, [pc, #240]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318c:	4933      	ldr	r1, [pc, #204]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ae:	492b      	ldr	r1, [pc, #172]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d0:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	4912      	ldr	r1, [pc, #72]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00b      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003234:	4909      	ldr	r1, [pc, #36]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d006      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80d9 	beq.w	8003402 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a01      	ldr	r2, [pc, #4]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800325c:	40023800 	.word	0x40023800
 8003260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003262:	f7fe fd9b 	bl	8001d9c <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800326a:	f7fe fd97 	bl	8001d9c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e194      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800327c:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d021      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a2:	0c1b      	lsrs	r3, r3, #16
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b0:	0e1b      	lsrs	r3, r3, #24
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	019a      	lsls	r2, r3, #6
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	071b      	lsls	r3, r3, #28
 80032d0:	4957      	ldr	r1, [pc, #348]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02e      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003302:	d129      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003304:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003318:	0f1b      	lsrs	r3, r3, #28
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	019a      	lsls	r2, r3, #6
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	431a      	orrs	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	071b      	lsls	r3, r3, #28
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003346:	f023 021f 	bic.w	r2, r3, #31
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	3b01      	subs	r3, #1
 8003350:	4937      	ldr	r1, [pc, #220]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01d      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003372:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003378:	0f1b      	lsrs	r3, r3, #28
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	019a      	lsls	r2, r3, #6
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	071b      	lsls	r3, r3, #28
 8003398:	4925      	ldr	r1, [pc, #148]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	019a      	lsls	r2, r3, #6
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	071b      	lsls	r3, r3, #28
 80033c8:	4919      	ldr	r1, [pc, #100]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe fcde 	bl	8001d9c <HAL_GetTick>
 80033e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033e4:	f7fe fcda 	bl	8001d9c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0d7      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 80cd 	bne.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003416:	f7fe fcc1 	bl	8001d9c <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800341e:	f7fe fcbd 	bl	8001d9c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d903      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0ba      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003430:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003440:	d0ed      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02e      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d12a      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800346a:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	0f1b      	lsrs	r3, r3, #28
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	019a      	lsls	r2, r3, #6
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	4944      	ldr	r1, [pc, #272]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	493d      	ldr	r1, [pc, #244]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d022      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d4:	d11d      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	0f1b      	lsrs	r3, r3, #28
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	4929      	ldr	r1, [pc, #164]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d028      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800352c:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	019a      	lsls	r2, r3, #6
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	4917      	ldr	r1, [pc, #92]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fe fc0e 	bl	8001d9c <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003584:	f7fe fc0a 	bl	8001d9c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e007      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a2:	d1ef      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e049      	b.n	800365a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f841 	bl	8003662 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fa00 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e054      	b.n	800373a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d022      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d01d      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_TIM_Base_Start_IT+0xd4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d018      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_TIM_Base_Start_IT+0xd8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_TIM_Base_Start_IT+0xdc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_TIM_Base_Start_IT+0xe0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_TIM_Base_Start_IT+0xe4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_TIM_Base_Start_IT+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d115      	bne.n	8003724 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_TIM_Base_Start_IT+0xec>)
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b06      	cmp	r3, #6
 8003708:	d015      	beq.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d011      	beq.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	e008      	b.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e000      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f905 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8f7 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f908 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8db 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8cd 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8de 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8b1 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8a3 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8b4 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f887 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f879 	bl	80039a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f88a 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd ffba 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f91a 	bl	8003b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f90d 	bl	8003b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f838 	bl	80039e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0220 	mvn.w	r2, #32
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8cd 	bl	8003b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d027      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d023      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01f      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d017      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <TIM_Base_SetConfig+0x128>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <TIM_Base_SetConfig+0x12c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00f      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <TIM_Base_SetConfig+0x130>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <TIM_Base_SetConfig+0x134>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <TIM_Base_SetConfig+0x138>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <TIM_Base_SetConfig+0x13c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	40001800 	.word	0x40001800
 8003b30:	40001c00 	.word	0x40001c00
 8003b34:	40002000 	.word	0x40002000

08003b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e040      	b.n	8003c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fe f82c 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fbe6 	bl	8004384 <UART_SetConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fe3e 	bl	800484c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fec5 	bl	8004990 <UART_CheckIdleState>
 8003c06:	4603      	mov	r3, r0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d171      	bne.n	8003d0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Transmit+0x24>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e06a      	b.n	8003d0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c46:	f7fe f8a9 	bl	8001d9c <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c64:	d108      	bne.n	8003c78 <HAL_UART_Transmit+0x68>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e003      	b.n	8003c80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c80:	e02c      	b.n	8003cdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 feb6 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e038      	b.n	8003d0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1cc      	bne.n	8003c82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2140      	movs	r1, #64	; 0x40
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fe83 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e005      	b.n	8003d0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	; 0x28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d132      	bne.n	8003d94 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_UART_Receive_IT+0x24>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02b      	b.n	8003d96 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fefe 	bl	8004b8c <UART_Start_Receive_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	e000      	b.n	8003d96 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3728      	adds	r7, #40	; 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0ba      	sub	sp, #232	; 0xe8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003dca:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dce:	4013      	ands	r3, r2
 8003dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d115      	bne.n	8003e08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00f      	beq.n	8003e08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8297 	beq.w	800432c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
      }
      return;
 8003e06:	e291      	b.n	800432c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8117 	beq.w	8004040 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e22:	4b85      	ldr	r3, [pc, #532]	; (8004038 <HAL_UART_IRQHandler+0x298>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 810a 	beq.w	8004040 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d011      	beq.n	8003e5c <HAL_UART_IRQHandler+0xbc>
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <HAL_UART_IRQHandler+0xec>
 8003e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_UART_IRQHandler+0x11c>
 8003e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d017      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	f043 0208 	orr.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d012      	beq.n	8003f2a <HAL_UART_IRQHandler+0x18a>
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00c      	beq.n	8003f2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 81fd 	beq.w	8004330 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d04f      	beq.n	8004022 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fec8 	bl	8004d18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d141      	bne.n	800401a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1d9      	bne.n	8003f96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d013      	beq.n	8004012 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_UART_IRQHandler+0x29c>)
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe f82e 	bl	8002058 <HAL_DMA_Abort_IT>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800400c:	4610      	mov	r0, r2
 800400e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e00f      	b.n	8004032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9a0 	bl	8004358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	e00b      	b.n	8004032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f99c 	bl	8004358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	e007      	b.n	8004032 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f998 	bl	8004358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004030:	e17e      	b.n	8004330 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004032:	bf00      	nop
    return;
 8004034:	e17c      	b.n	8004330 <HAL_UART_IRQHandler+0x590>
 8004036:	bf00      	nop
 8004038:	04000120 	.word	0x04000120
 800403c:	08004de1 	.word	0x08004de1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 814c 	bne.w	80042e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8145 	beq.w	80042e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 813e 	beq.w	80042e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2210      	movs	r2, #16
 800406c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	f040 80b6 	bne.w	80041ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800408a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8150 	beq.w	8004334 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800409a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800409e:	429a      	cmp	r2, r3
 80040a0:	f080 8148 	bcs.w	8004334 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b8:	f000 8086 	beq.w	80041c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1da      	bne.n	80040bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800412a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800412e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800413c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e1      	bne.n	8004106 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800416c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004198:	f023 0310 	bic.w	r3, r3, #16
 800419c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e4      	bne.n	8004188 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fed8 	bl	8001f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8c2 	bl	800436c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041e8:	e0a4      	b.n	8004334 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8096 	beq.w	8004338 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800420c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8091 	beq.w	8004338 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800422a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800423e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e4      	bne.n	8004216 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	623b      	str	r3, [r7, #32]
   return(result);
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004270:	633a      	str	r2, [r7, #48]	; 0x30
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e3      	bne.n	800424c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	617b      	str	r3, [r7, #20]
   return(result);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e4      	bne.n	8004298 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f846 	bl	800436c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042e0:	e02a      	b.n	8004338 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01c      	beq.n	800433c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
    }
    return;
 800430a:	e017      	b.n	800433c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_UART_IRQHandler+0x59e>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fd71 	bl	8004e0c <UART_EndTransmit_IT>
    return;
 800432a:	e008      	b.n	800433e <HAL_UART_IRQHandler+0x59e>
      return;
 800432c:	bf00      	nop
 800432e:	e006      	b.n	800433e <HAL_UART_IRQHandler+0x59e>
    return;
 8004330:	bf00      	nop
 8004332:	e004      	b.n	800433e <HAL_UART_IRQHandler+0x59e>
      return;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_UART_IRQHandler+0x59e>
      return;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_UART_IRQHandler+0x59e>
    return;
 800433c:	bf00      	nop
  }

}
 800433e:	37e8      	adds	r7, #232	; 0xe8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4ba6      	ldr	r3, [pc, #664]	; (8004648 <UART_SetConfig+0x2c4>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	6979      	ldr	r1, [r7, #20]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a94      	ldr	r2, [pc, #592]	; (800464c <UART_SetConfig+0x2c8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d120      	bne.n	8004442 <UART_SetConfig+0xbe>
 8004400:	4b93      	ldr	r3, [pc, #588]	; (8004650 <UART_SetConfig+0x2cc>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b03      	cmp	r3, #3
 800440c:	d816      	bhi.n	800443c <UART_SetConfig+0xb8>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x90>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004425 	.word	0x08004425
 8004418:	08004431 	.word	0x08004431
 800441c:	0800442b 	.word	0x0800442b
 8004420:	08004437 	.word	0x08004437
 8004424:	2301      	movs	r3, #1
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e150      	b.n	80046cc <UART_SetConfig+0x348>
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e14d      	b.n	80046cc <UART_SetConfig+0x348>
 8004430:	2304      	movs	r3, #4
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e14a      	b.n	80046cc <UART_SetConfig+0x348>
 8004436:	2308      	movs	r3, #8
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e147      	b.n	80046cc <UART_SetConfig+0x348>
 800443c:	2310      	movs	r3, #16
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e144      	b.n	80046cc <UART_SetConfig+0x348>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a83      	ldr	r2, [pc, #524]	; (8004654 <UART_SetConfig+0x2d0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d132      	bne.n	80044b2 <UART_SetConfig+0x12e>
 800444c:	4b80      	ldr	r3, [pc, #512]	; (8004650 <UART_SetConfig+0x2cc>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d828      	bhi.n	80044ac <UART_SetConfig+0x128>
 800445a:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <UART_SetConfig+0xdc>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004495 	.word	0x08004495
 8004464:	080044ad 	.word	0x080044ad
 8004468:	080044ad 	.word	0x080044ad
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044a1 	.word	0x080044a1
 8004474:	080044ad 	.word	0x080044ad
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044ad 	.word	0x080044ad
 8004480:	0800449b 	.word	0x0800449b
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044ad 	.word	0x080044ad
 8004490:	080044a7 	.word	0x080044a7
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e118      	b.n	80046cc <UART_SetConfig+0x348>
 800449a:	2302      	movs	r3, #2
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e115      	b.n	80046cc <UART_SetConfig+0x348>
 80044a0:	2304      	movs	r3, #4
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e112      	b.n	80046cc <UART_SetConfig+0x348>
 80044a6:	2308      	movs	r3, #8
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e10f      	b.n	80046cc <UART_SetConfig+0x348>
 80044ac:	2310      	movs	r3, #16
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e10c      	b.n	80046cc <UART_SetConfig+0x348>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a68      	ldr	r2, [pc, #416]	; (8004658 <UART_SetConfig+0x2d4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d120      	bne.n	80044fe <UART_SetConfig+0x17a>
 80044bc:	4b64      	ldr	r3, [pc, #400]	; (8004650 <UART_SetConfig+0x2cc>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044c6:	2b30      	cmp	r3, #48	; 0x30
 80044c8:	d013      	beq.n	80044f2 <UART_SetConfig+0x16e>
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d814      	bhi.n	80044f8 <UART_SetConfig+0x174>
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d009      	beq.n	80044e6 <UART_SetConfig+0x162>
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d810      	bhi.n	80044f8 <UART_SetConfig+0x174>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <UART_SetConfig+0x15c>
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d006      	beq.n	80044ec <UART_SetConfig+0x168>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x174>
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e0f2      	b.n	80046cc <UART_SetConfig+0x348>
 80044e6:	2302      	movs	r3, #2
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e0ef      	b.n	80046cc <UART_SetConfig+0x348>
 80044ec:	2304      	movs	r3, #4
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e0ec      	b.n	80046cc <UART_SetConfig+0x348>
 80044f2:	2308      	movs	r3, #8
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e0e9      	b.n	80046cc <UART_SetConfig+0x348>
 80044f8:	2310      	movs	r3, #16
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e0e6      	b.n	80046cc <UART_SetConfig+0x348>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a56      	ldr	r2, [pc, #344]	; (800465c <UART_SetConfig+0x2d8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d120      	bne.n	800454a <UART_SetConfig+0x1c6>
 8004508:	4b51      	ldr	r3, [pc, #324]	; (8004650 <UART_SetConfig+0x2cc>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004512:	2bc0      	cmp	r3, #192	; 0xc0
 8004514:	d013      	beq.n	800453e <UART_SetConfig+0x1ba>
 8004516:	2bc0      	cmp	r3, #192	; 0xc0
 8004518:	d814      	bhi.n	8004544 <UART_SetConfig+0x1c0>
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d009      	beq.n	8004532 <UART_SetConfig+0x1ae>
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d810      	bhi.n	8004544 <UART_SetConfig+0x1c0>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <UART_SetConfig+0x1a8>
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d006      	beq.n	8004538 <UART_SetConfig+0x1b4>
 800452a:	e00b      	b.n	8004544 <UART_SetConfig+0x1c0>
 800452c:	2300      	movs	r3, #0
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e0cc      	b.n	80046cc <UART_SetConfig+0x348>
 8004532:	2302      	movs	r3, #2
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e0c9      	b.n	80046cc <UART_SetConfig+0x348>
 8004538:	2304      	movs	r3, #4
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e0c6      	b.n	80046cc <UART_SetConfig+0x348>
 800453e:	2308      	movs	r3, #8
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e0c3      	b.n	80046cc <UART_SetConfig+0x348>
 8004544:	2310      	movs	r3, #16
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e0c0      	b.n	80046cc <UART_SetConfig+0x348>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a44      	ldr	r2, [pc, #272]	; (8004660 <UART_SetConfig+0x2dc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d125      	bne.n	80045a0 <UART_SetConfig+0x21c>
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <UART_SetConfig+0x2cc>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004562:	d017      	beq.n	8004594 <UART_SetConfig+0x210>
 8004564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004568:	d817      	bhi.n	800459a <UART_SetConfig+0x216>
 800456a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456e:	d00b      	beq.n	8004588 <UART_SetConfig+0x204>
 8004570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004574:	d811      	bhi.n	800459a <UART_SetConfig+0x216>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <UART_SetConfig+0x1fe>
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d006      	beq.n	800458e <UART_SetConfig+0x20a>
 8004580:	e00b      	b.n	800459a <UART_SetConfig+0x216>
 8004582:	2300      	movs	r3, #0
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e0a1      	b.n	80046cc <UART_SetConfig+0x348>
 8004588:	2302      	movs	r3, #2
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e09e      	b.n	80046cc <UART_SetConfig+0x348>
 800458e:	2304      	movs	r3, #4
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e09b      	b.n	80046cc <UART_SetConfig+0x348>
 8004594:	2308      	movs	r3, #8
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e098      	b.n	80046cc <UART_SetConfig+0x348>
 800459a:	2310      	movs	r3, #16
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e095      	b.n	80046cc <UART_SetConfig+0x348>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2f      	ldr	r2, [pc, #188]	; (8004664 <UART_SetConfig+0x2e0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d125      	bne.n	80045f6 <UART_SetConfig+0x272>
 80045aa:	4b29      	ldr	r3, [pc, #164]	; (8004650 <UART_SetConfig+0x2cc>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b8:	d017      	beq.n	80045ea <UART_SetConfig+0x266>
 80045ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045be:	d817      	bhi.n	80045f0 <UART_SetConfig+0x26c>
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c4:	d00b      	beq.n	80045de <UART_SetConfig+0x25a>
 80045c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ca:	d811      	bhi.n	80045f0 <UART_SetConfig+0x26c>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <UART_SetConfig+0x254>
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d006      	beq.n	80045e4 <UART_SetConfig+0x260>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x26c>
 80045d8:	2301      	movs	r3, #1
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e076      	b.n	80046cc <UART_SetConfig+0x348>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e073      	b.n	80046cc <UART_SetConfig+0x348>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e070      	b.n	80046cc <UART_SetConfig+0x348>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e06d      	b.n	80046cc <UART_SetConfig+0x348>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e06a      	b.n	80046cc <UART_SetConfig+0x348>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <UART_SetConfig+0x2e4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d138      	bne.n	8004672 <UART_SetConfig+0x2ee>
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <UART_SetConfig+0x2cc>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800460a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x2bc>
 8004610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004614:	d82a      	bhi.n	800466c <UART_SetConfig+0x2e8>
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461a:	d00b      	beq.n	8004634 <UART_SetConfig+0x2b0>
 800461c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004620:	d824      	bhi.n	800466c <UART_SetConfig+0x2e8>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <UART_SetConfig+0x2aa>
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d006      	beq.n	800463a <UART_SetConfig+0x2b6>
 800462c:	e01e      	b.n	800466c <UART_SetConfig+0x2e8>
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e04b      	b.n	80046cc <UART_SetConfig+0x348>
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e048      	b.n	80046cc <UART_SetConfig+0x348>
 800463a:	2304      	movs	r3, #4
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e045      	b.n	80046cc <UART_SetConfig+0x348>
 8004640:	2308      	movs	r3, #8
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e042      	b.n	80046cc <UART_SetConfig+0x348>
 8004646:	bf00      	nop
 8004648:	efff69f3 	.word	0xefff69f3
 800464c:	40011000 	.word	0x40011000
 8004650:	40023800 	.word	0x40023800
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	40004c00 	.word	0x40004c00
 8004660:	40005000 	.word	0x40005000
 8004664:	40011400 	.word	0x40011400
 8004668:	40007800 	.word	0x40007800
 800466c:	2310      	movs	r3, #16
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e02c      	b.n	80046cc <UART_SetConfig+0x348>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a72      	ldr	r2, [pc, #456]	; (8004840 <UART_SetConfig+0x4bc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d125      	bne.n	80046c8 <UART_SetConfig+0x344>
 800467c:	4b71      	ldr	r3, [pc, #452]	; (8004844 <UART_SetConfig+0x4c0>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004686:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800468a:	d017      	beq.n	80046bc <UART_SetConfig+0x338>
 800468c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004690:	d817      	bhi.n	80046c2 <UART_SetConfig+0x33e>
 8004692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004696:	d00b      	beq.n	80046b0 <UART_SetConfig+0x32c>
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d811      	bhi.n	80046c2 <UART_SetConfig+0x33e>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <UART_SetConfig+0x326>
 80046a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a6:	d006      	beq.n	80046b6 <UART_SetConfig+0x332>
 80046a8:	e00b      	b.n	80046c2 <UART_SetConfig+0x33e>
 80046aa:	2300      	movs	r3, #0
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e00d      	b.n	80046cc <UART_SetConfig+0x348>
 80046b0:	2302      	movs	r3, #2
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e00a      	b.n	80046cc <UART_SetConfig+0x348>
 80046b6:	2304      	movs	r3, #4
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e007      	b.n	80046cc <UART_SetConfig+0x348>
 80046bc:	2308      	movs	r3, #8
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e004      	b.n	80046cc <UART_SetConfig+0x348>
 80046c2:	2310      	movs	r3, #16
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e001      	b.n	80046cc <UART_SetConfig+0x348>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d4:	d15b      	bne.n	800478e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80046d6:	7ffb      	ldrb	r3, [r7, #31]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d828      	bhi.n	800472e <UART_SetConfig+0x3aa>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x360>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800472f 	.word	0x0800472f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fb0a 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800470c:	61b8      	str	r0, [r7, #24]
        break;
 800470e:	e013      	b.n	8004738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fb1a 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004714:	61b8      	str	r0, [r7, #24]
        break;
 8004716:	e00f      	b.n	8004738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b4b      	ldr	r3, [pc, #300]	; (8004848 <UART_SetConfig+0x4c4>)
 800471a:	61bb      	str	r3, [r7, #24]
        break;
 800471c:	e00c      	b.n	8004738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe fa2d 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8004722:	61b8      	str	r0, [r7, #24]
        break;
 8004724:	e008      	b.n	8004738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	61bb      	str	r3, [r7, #24]
        break;
 800472c:	e004      	b.n	8004738 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	77bb      	strb	r3, [r7, #30]
        break;
 8004736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d074      	beq.n	8004828 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	005a      	lsls	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d916      	bls.n	8004788 <UART_SetConfig+0x404>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d212      	bcs.n	8004788 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f023 030f 	bic.w	r3, r3, #15
 800476a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	b29a      	uxth	r2, r3
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	4313      	orrs	r3, r2
 800477c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	89fa      	ldrh	r2, [r7, #14]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e04f      	b.n	8004828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77bb      	strb	r3, [r7, #30]
 800478c:	e04c      	b.n	8004828 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d828      	bhi.n	80047e6 <UART_SetConfig+0x462>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0x418>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047e7 	.word	0x080047e7
 80047ac:	080047d7 	.word	0x080047d7
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	080047e7 	.word	0x080047e7
 80047b8:	080047e7 	.word	0x080047e7
 80047bc:	080047df 	.word	0x080047df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe faae 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80047c4:	61b8      	str	r0, [r7, #24]
        break;
 80047c6:	e013      	b.n	80047f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c8:	f7fe fabe 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 80047cc:	61b8      	str	r0, [r7, #24]
        break;
 80047ce:	e00f      	b.n	80047f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <UART_SetConfig+0x4c4>)
 80047d2:	61bb      	str	r3, [r7, #24]
        break;
 80047d4:	e00c      	b.n	80047f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d6:	f7fe f9d1 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 80047da:	61b8      	str	r0, [r7, #24]
        break;
 80047dc:	e008      	b.n	80047f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e2:	61bb      	str	r3, [r7, #24]
        break;
 80047e4:	e004      	b.n	80047f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	77bb      	strb	r3, [r7, #30]
        break;
 80047ee:	bf00      	nop
    }

    if (pclk != 0U)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	085a      	lsrs	r2, r3, #1
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d909      	bls.n	8004824 <UART_SetConfig+0x4a0>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d205      	bcs.n	8004824 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	e001      	b.n	8004828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004834:	7fbb      	ldrb	r3, [r7, #30]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40007c00 	.word	0x40007c00
 8004844:	40023800 	.word	0x40023800
 8004848:	00f42400 	.word	0x00f42400

0800484c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01a      	beq.n	8004962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d10a      	bne.n	8004962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a0:	f7fd f9fc 	bl	8001d9c <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d10e      	bne.n	80049d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f81b 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e011      	b.n	80049f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b09c      	sub	sp, #112	; 0x70
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	e0a7      	b.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	f000 80a3 	beq.w	8004b60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fd f9bf 	bl	8001d9c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d13f      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a44:	667b      	str	r3, [r7, #100]	; 0x64
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e068      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d050      	beq.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004acc:	d148      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b2a:	623a      	str	r2, [r7, #32]
 8004b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	69f9      	ldr	r1, [r7, #28]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e010      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	f43f af48 	beq.w	8004a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3770      	adds	r7, #112	; 0x70
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b097      	sub	sp, #92	; 0x5c
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d10e      	bne.n	8004bde <UART_Start_Receive_IT+0x52>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <UART_Start_Receive_IT+0x48>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bd2:	e02d      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bdc:	e028      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <UART_Start_Receive_IT+0x76>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <UART_Start_Receive_IT+0x6c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf6:	e01b      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	227f      	movs	r2, #127	; 0x7f
 8004bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c00:	e016      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0a:	d10d      	bne.n	8004c28 <UART_Start_Receive_IT+0x9c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <UART_Start_Receive_IT+0x92>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	227f      	movs	r2, #127	; 0x7f
 8004c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c1c:	e008      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	223f      	movs	r2, #63	; 0x3f
 8004c22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c26:	e003      	b.n	8004c30 <UART_Start_Receive_IT+0xa4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2222      	movs	r2, #34	; 0x22
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	657b      	str	r3, [r7, #84]	; 0x54
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c60:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d107      	bne.n	8004c8e <UART_Start_Receive_IT+0x102>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <UART_Start_Receive_IT+0x184>)
 8004c8a:	669a      	str	r2, [r3, #104]	; 0x68
 8004c8c:	e002      	b.n	8004c94 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <UART_Start_Receive_IT+0x188>)
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d019      	beq.n	8004cd0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_Start_Receive_IT+0x110>
 8004cce:	e018      	b.n	8004d02 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f043 0320 	orr.w	r3, r3, #32
 8004ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	69f9      	ldr	r1, [r7, #28]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	375c      	adds	r7, #92	; 0x5c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	08004fc7 	.word	0x08004fc7
 8004d14:	08004e61 	.word	0x08004e61

08004d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b095      	sub	sp, #84	; 0x54
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e6      	bne.n	8004d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d118      	bne.n	8004dc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dd4:	bf00      	nop
 8004dd6:	3754      	adds	r7, #84	; 0x54
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff faaa 	bl	8004358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fa76 	bl	8004344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e58:	bf00      	nop
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b096      	sub	sp, #88	; 0x58
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e6e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	f040 8098 	bne.w	8004fae <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e88:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004e8c:	b2d9      	uxtb	r1, r3
 8004e8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	400a      	ands	r2, r1
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d17b      	bne.n	8004fbe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	623b      	str	r3, [r7, #32]
   return(result);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f18:	633a      	str	r2, [r7, #48]	; 0x30
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d12e      	bne.n	8004fa6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d103      	bne.n	8004f96 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff f9e4 	bl	800436c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fa4:	e00b      	b.n	8004fbe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fb1e 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8004fac:	e007      	b.n	8004fbe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	619a      	str	r2, [r3, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	3758      	adds	r7, #88	; 0x58
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b096      	sub	sp, #88	; 0x58
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fde:	2b22      	cmp	r3, #34	; 0x22
 8004fe0:	f040 8098 	bne.w	8005114 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ff4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ff8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005002:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d17b      	bne.n	8005124 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504a:	643b      	str	r3, [r7, #64]	; 0x40
 800504c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e6      	bne.n	800502c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	61fb      	str	r3, [r7, #28]
   return(result);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	64bb      	str	r3, [r7, #72]	; 0x48
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d12e      	bne.n	800510c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6979      	ldr	r1, [r7, #20]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	613b      	str	r3, [r7, #16]
   return(result);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d103      	bne.n	80050fc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2210      	movs	r2, #16
 80050fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff f931 	bl	800436c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800510a:	e00b      	b.n	8005124 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fb fa6b 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8005112:	e007      	b.n	8005124 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	619a      	str	r2, [r3, #24]
}
 8005124:	bf00      	nop
 8005126:	3758      	adds	r7, #88	; 0x58
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800513a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800513e:	2b84      	cmp	r3, #132	; 0x84
 8005140:	d005      	beq.n	800514e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005142:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	3303      	adds	r3, #3
 800514c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005160:	f000 ff1c 	bl	8005f9c <vTaskStartScheduler>
  
  return osOK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	bd80      	pop	{r7, pc}

0800516a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800516a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516c:	b089      	sub	sp, #36	; 0x24
 800516e:	af04      	add	r7, sp, #16
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <osThreadCreate+0x54>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685c      	ldr	r4, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681d      	ldr	r5, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691e      	ldr	r6, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ffc8 	bl	800512c <makeFreeRtosPriority>
 800519c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a6:	9202      	str	r2, [sp, #8]
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	9100      	str	r1, [sp, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4632      	mov	r2, r6
 80051b0:	4629      	mov	r1, r5
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fbe2 	bl	800597c <xTaskCreateStatic>
 80051b8:	4603      	mov	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e01c      	b.n	80051f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685c      	ldr	r4, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ca:	b29e      	uxth	r6, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff ffaa 	bl	800512c <makeFreeRtosPriority>
 80051d8:	4602      	mov	r2, r0
 80051da:	f107 030c 	add.w	r3, r7, #12
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	4632      	mov	r2, r6
 80051e6:	4629      	mov	r1, r5
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 fc2a 	bl	8005a42 <xTaskCreate>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d001      	beq.n	80051f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005202 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <osDelay+0x16>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	e000      	b.n	800521a <osDelay+0x18>
 8005218:	2301      	movs	r3, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fd60 	bl	8005ce0 <vTaskDelay>
  
  return osOK;
 8005220:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f103 0208 	add.w	r2, r3, #8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f103 0208 	add.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f103 0208 	add.w	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	601a      	str	r2, [r3, #0]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d103      	bne.n	80052ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e00c      	b.n	8005306 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3308      	adds	r3, #8
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e002      	b.n	80052fa <vListInsert+0x2e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	d2f6      	bcs.n	80052f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6892      	ldr	r2, [r2, #8]
 8005354:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6852      	ldr	r2, [r2, #4]
 800535e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d103      	bne.n	8005372 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10c      	bne.n	80053c2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053a8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053ac:	b672      	cpsid	i
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	b662      	cpsie	i
 80053bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80053c2:	f001 fd1b 	bl	8006dfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	441a      	add	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	3b01      	subs	r3, #1
 80053f4:	68f9      	ldr	r1, [r7, #12]
 80053f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	441a      	add	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d114      	bne.n	8005442 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3310      	adds	r3, #16
 8005424:	4618      	mov	r0, r3
 8005426:	f001 f84d 	bl	80064c4 <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <xQueueGenericReset+0xd0>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e009      	b.n	8005456 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3310      	adds	r3, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff feef 	bl	800522a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff feea 	bl	800522a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005456:	f001 fd05 	bl	8006e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <xQueueGenericCreate+0x2e>
	__asm volatile
 800547c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005480:	b672      	cpsid	i
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	b662      	cpsie	i
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e004      	b.n	80054ac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	3348      	adds	r3, #72	; 0x48
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fdcf 	bl	8007054 <pvPortMalloc>
 80054b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3348      	adds	r3, #72	; 0x48
 80054c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054d0:	79fa      	ldrb	r2, [r7, #7]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f805 	bl	80054ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054e2:	69bb      	ldr	r3, [r7, #24]
	}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d103      	bne.n	8005508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	e002      	b.n	800550e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800551a:	2101      	movs	r1, #1
 800551c:	69b8      	ldr	r0, [r7, #24]
 800551e:	f7ff ff39 	bl	8005394 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08e      	sub	sp, #56	; 0x38
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800553e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	623b      	str	r3, [r7, #32]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00c      	beq.n	800557a <xQueueGiveFromISR+0x50>
	__asm volatile
 8005560:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005564:	b672      	cpsid	i
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	b662      	cpsie	i
 8005574:	61fb      	str	r3, [r7, #28]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <xQueueGiveFromISR+0x60>
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <xQueueGiveFromISR+0x64>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueGiveFromISR+0x66>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <xQueueGiveFromISR+0x84>
	__asm volatile
 8005594:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005598:	b672      	cpsid	i
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	b662      	cpsie	i
 80055a8:	61bb      	str	r3, [r7, #24]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ae:	f001 fd0d 	bl	8006fcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b2:	f3ef 8211 	mrs	r2, BASEPRI
 80055b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055ba:	b672      	cpsid	i
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	b662      	cpsie	i
 80055ca:	617a      	str	r2, [r7, #20]
 80055cc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	429a      	cmp	r2, r3
 80055e0:	d22b      	bcs.n	800563a <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d112      	bne.n	8005624 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	3324      	adds	r3, #36	; 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f000 ff5a 	bl	80064c4 <xTaskRemoveFromEventList>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e007      	b.n	8005634 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005628:	3301      	adds	r3, #1
 800562a:	b2db      	uxtb	r3, r3
 800562c:	b25a      	sxtb	r2, r3
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005634:	2301      	movs	r3, #1
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
 8005638:	e001      	b.n	800563e <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800563a:	2300      	movs	r3, #0
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005648:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800564c:	4618      	mov	r0, r3
 800564e:	3738      	adds	r7, #56	; 0x38
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10c      	bne.n	800568a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005670:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005674:	b672      	cpsid	i
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	b662      	cpsie	i
 8005684:	623b      	str	r3, [r7, #32]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005692:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005696:	b672      	cpsid	i
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	b662      	cpsie	i
 80056a6:	61fb      	str	r3, [r7, #28]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ac:	f001 f8e2 	bl	8006874 <xTaskGetSchedulerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueSemaphoreTake+0x68>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueSemaphoreTake+0x6c>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueSemaphoreTake+0x6e>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10c      	bne.n	80056e0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80056c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80056ca:	b672      	cpsid	i
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	b662      	cpsie	i
 80056da:	61bb      	str	r3, [r7, #24]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056e0:	f001 fb8c 	bl	8006dfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d024      	beq.n	800573a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005700:	f001 f9f4 	bl	8006aec <pvTaskIncrementMutexHeldCount>
 8005704:	4602      	mov	r2, r0
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00f      	beq.n	8005732 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	3310      	adds	r3, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fed4 	bl	80064c4 <xTaskRemoveFromEventList>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005722:	4b55      	ldr	r3, [pc, #340]	; (8005878 <xQueueSemaphoreTake+0x224>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005732:	f001 fb97 	bl	8006e64 <vPortExitCritical>
				return pdPASS;
 8005736:	2301      	movs	r3, #1
 8005738:	e099      	b.n	800586e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d113      	bne.n	8005768 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005746:	f04f 0380 	mov.w	r3, #128	; 0x80
 800574a:	b672      	cpsid	i
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	b662      	cpsie	i
 800575a:	617b      	str	r3, [r7, #20]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005760:	f001 fb80 	bl	8006e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005764:	2300      	movs	r3, #0
 8005766:	e082      	b.n	800586e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff0a 	bl	800658c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577c:	f001 fb72 	bl	8006e64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005780:	f000 fc7a 	bl	8006078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005784:	f001 fb3a 	bl	8006dfc <vPortEnterCritical>
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578e:	b25b      	sxtb	r3, r3
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d103      	bne.n	800579e <xQueueSemaphoreTake+0x14a>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d103      	bne.n	80057b4 <xQueueSemaphoreTake+0x160>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b4:	f001 fb56 	bl	8006e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b8:	463a      	mov	r2, r7
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fef9 	bl	80065b8 <xTaskCheckForTimeOut>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d132      	bne.n	8005832 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057ce:	f000 f8bf 	bl	8005950 <prvIsQueueEmpty>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d026      	beq.n	8005826 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80057e0:	f001 fb0c 	bl	8006dfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f861 	bl	80068b0 <xTaskPriorityInherit>
 80057ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057f0:	f001 fb38 	bl	8006e64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe3b 	bl	8006478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005804:	f000 f852 	bl	80058ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005808:	f000 fc44 	bl	8006094 <xTaskResumeAll>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	f47f af66 	bne.w	80056e0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xQueueSemaphoreTake+0x224>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	e75c      	b.n	80056e0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005828:	f000 f840 	bl	80058ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582c:	f000 fc32 	bl	8006094 <xTaskResumeAll>
 8005830:	e756      	b.n	80056e0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005834:	f000 f83a 	bl	80058ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005838:	f000 fc2c 	bl	8006094 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800583c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800583e:	f000 f887 	bl	8005950 <prvIsQueueEmpty>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f43f af4b 	beq.w	80056e0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005850:	f001 fad4 	bl	8006dfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005856:	f000 f811 	bl	800587c <prvGetDisinheritPriorityAfterTimeout>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f8a4 	bl	80069b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005868:	f001 fafc 	bl	8006e64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800586e:	4618      	mov	r0, r3
 8005870:	3738      	adds	r7, #56	; 0x38
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d006      	beq.n	800589a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1c3 0307 	rsb	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e001      	b.n	800589e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800589e:	68fb      	ldr	r3, [r7, #12]
	}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058b4:	f001 faa2 	bl	8006dfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058c0:	e011      	b.n	80058e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d012      	beq.n	80058f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3324      	adds	r3, #36	; 0x24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fdf8 	bl	80064c4 <xTaskRemoveFromEventList>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058da:	f000 fed3 	bl	8006684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	dce9      	bgt.n	80058c2 <prvUnlockQueue+0x16>
 80058ee:	e000      	b.n	80058f2 <prvUnlockQueue+0x46>
					break;
 80058f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058fa:	f001 fab3 	bl	8006e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058fe:	f001 fa7d 	bl	8006dfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005908:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800590a:	e011      	b.n	8005930 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d012      	beq.n	800593a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3310      	adds	r3, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fdd3 	bl	80064c4 <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005924:	f000 feae 	bl	8006684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	3b01      	subs	r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	dce9      	bgt.n	800590c <prvUnlockQueue+0x60>
 8005938:	e000      	b.n	800593c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800593a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005944:	f001 fa8e 	bl	8006e64 <vPortExitCritical>
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005958:	f001 fa50 	bl	8006dfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005964:	2301      	movs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e001      	b.n	800596e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f001 fa79 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <xTaskCreateStatic+0x2e>
	__asm volatile
 8005990:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005994:	b672      	cpsid	i
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	623b      	str	r3, [r7, #32]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10c      	bne.n	80059ca <xTaskCreateStatic+0x4e>
	__asm volatile
 80059b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059b4:	b672      	cpsid	i
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	b662      	cpsie	i
 80059c4:	61fb      	str	r3, [r7, #28]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ca:	23b4      	movs	r3, #180	; 0xb4
 80059cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2bb4      	cmp	r3, #180	; 0xb4
 80059d2:	d00c      	beq.n	80059ee <xTaskCreateStatic+0x72>
	__asm volatile
 80059d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01e      	beq.n	8005a34 <xTaskCreateStatic+0xb8>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f850 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a2e:	f000 f8ed 	bl	8005c0c <prvAddNewTaskToReadyList>
 8005a32:	e001      	b.n	8005a38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a38:	697b      	ldr	r3, [r7, #20]
	}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3728      	adds	r7, #40	; 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08c      	sub	sp, #48	; 0x30
 8005a46:	af04      	add	r7, sp, #16
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fafc 	bl	8007054 <pvPortMalloc>
 8005a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a64:	20b4      	movs	r0, #180	; 0xb4
 8005a66:	f001 faf5 	bl	8007054 <pvPortMalloc>
 8005a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
 8005a78:	e005      	b.n	8005a86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f001 fbb4 	bl	80071e8 <vPortFree>
 8005a80:	e001      	b.n	8005a86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f80e 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 f8ab 	bl	8005c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e002      	b.n	8005ac2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005ae4:	440b      	add	r3, r1
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005afe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	617b      	str	r3, [r7, #20]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01f      	beq.n	8005b5e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e012      	b.n	8005b4a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	3334      	adds	r3, #52	; 0x34
 8005b34:	460a      	mov	r2, r1
 8005b36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d9e9      	bls.n	8005b24 <prvInitialiseNewTask+0x58>
 8005b50:	e000      	b.n	8005b54 <prvInitialiseNewTask+0x88>
			{
				break;
 8005b52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b5c:	e003      	b.n	8005b66 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d901      	bls.n	8005b70 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fb6f 	bl	800526a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fb6a 	bl	800526a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f1c3 0207 	rsb	r2, r3, #7
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	334c      	adds	r3, #76	; 0x4c
 8005bc0:	2260      	movs	r2, #96	; 0x60
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 fd5e 	bl	8007686 <memset>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <prvInitialiseNewTask+0x134>)
 8005bce:	651a      	str	r2, [r3, #80]	; 0x50
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <prvInitialiseNewTask+0x138>)
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <prvInitialiseNewTask+0x13c>)
 8005bda:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	69b8      	ldr	r0, [r7, #24]
 8005be2:	f000 fffd 	bl	8006be0 <pxPortInitialiseStack>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf8:	bf00      	nop
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08008e90 	.word	0x08008e90
 8005c04:	08008eb0 	.word	0x08008eb0
 8005c08:	08008e70 	.word	0x08008e70

08005c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c14:	f001 f8f2 	bl	8006dfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c18:	4b2a      	ldr	r3, [pc, #168]	; (8005cc4 <prvAddNewTaskToReadyList+0xb8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <prvAddNewTaskToReadyList+0xb8>)
 8005c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <prvAddNewTaskToReadyList+0xbc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c2a:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <prvAddNewTaskToReadyList+0xbc>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <prvAddNewTaskToReadyList+0xb8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d110      	bne.n	8005c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c38:	f000 fd48 	bl	80066cc <prvInitialiseTaskLists>
 8005c3c:	e00d      	b.n	8005c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c3e:	4b23      	ldr	r3, [pc, #140]	; (8005ccc <prvAddNewTaskToReadyList+0xc0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <prvAddNewTaskToReadyList+0xbc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d802      	bhi.n	8005c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c54:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <prvAddNewTaskToReadyList+0xbc>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <prvAddNewTaskToReadyList+0xc4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <prvAddNewTaskToReadyList+0xc4>)
 8005c62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <prvAddNewTaskToReadyList+0xc8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <prvAddNewTaskToReadyList+0xc8>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvAddNewTaskToReadyList+0xcc>)
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7ff faf9 	bl	8005284 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c92:	f001 f8e7 	bl	8006e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <prvAddNewTaskToReadyList+0xc0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00e      	beq.n	8005cbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvAddNewTaskToReadyList+0xbc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d207      	bcs.n	8005cbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <prvAddNewTaskToReadyList+0xd0>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000b5c 	.word	0x20000b5c
 8005cc8:	20000a5c 	.word	0x20000a5c
 8005ccc:	20000b68 	.word	0x20000b68
 8005cd0:	20000b78 	.word	0x20000b78
 8005cd4:	20000b64 	.word	0x20000b64
 8005cd8:	20000a60 	.word	0x20000a60
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d019      	beq.n	8005d26 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <vTaskDelay+0x64>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <vTaskDelay+0x34>
	__asm volatile
 8005cfa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005cfe:	b672      	cpsid	i
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	b662      	cpsie	i
 8005d0e:	60bb      	str	r3, [r7, #8]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005d14:	f000 f9b0 	bl	8006078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fefa 	bl	8006b14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d20:	f000 f9b8 	bl	8006094 <xTaskResumeAll>
 8005d24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <vTaskDelay+0x68>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000b84 	.word	0x20000b84
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d54:	f001 f852 	bl	8006dfc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <vTaskSuspend+0x18>
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <vTaskSuspend+0x108>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	e000      	b.n	8005d66 <vTaskSuspend+0x1a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fae6 	bl	800533e <uxListRemove>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d115      	bne.n	8005da4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	4936      	ldr	r1, [pc, #216]	; (8005e58 <vTaskSuspend+0x10c>)
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <vTaskSuspend+0x58>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	2201      	movs	r2, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <vTaskSuspend+0x110>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <vTaskSuspend+0x110>)
 8005da2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3318      	adds	r3, #24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fac4 	bl	800533e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4828      	ldr	r0, [pc, #160]	; (8005e60 <vTaskSuspend+0x114>)
 8005dbe:	f7ff fa61 	bl	8005284 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d103      	bne.n	8005dd6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005dd6:	f001 f845 	bl	8006e64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <vTaskSuspend+0x118>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005de2:	f001 f80b 	bl	8006dfc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005de6:	f000 fd15 	bl	8006814 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005dea:	f001 f83b 	bl	8006e64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005dee:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <vTaskSuspend+0x108>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d129      	bne.n	8005e4c <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8005df8:	4b1a      	ldr	r3, [pc, #104]	; (8005e64 <vTaskSuspend+0x118>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d019      	beq.n	8005e34 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <vTaskSuspend+0x11c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00c      	beq.n	8005e22 <vTaskSuspend+0xd6>
	__asm volatile
 8005e08:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e0c:	b672      	cpsid	i
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	b662      	cpsie	i
 8005e1c:	60bb      	str	r3, [r7, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <vTaskSuspend+0x120>)
 8005e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e32:	e00b      	b.n	8005e4c <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <vTaskSuspend+0x114>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <vTaskSuspend+0x124>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d103      	bne.n	8005e48 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8005e40:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <vTaskSuspend+0x108>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
	}
 8005e46:	e001      	b.n	8005e4c <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8005e48:	f000 faa2 	bl	8006390 <vTaskSwitchContext>
	}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000a5c 	.word	0x20000a5c
 8005e58:	20000a60 	.word	0x20000a60
 8005e5c:	20000b64 	.word	0x20000b64
 8005e60:	20000b48 	.word	0x20000b48
 8005e64:	20000b68 	.word	0x20000b68
 8005e68:	20000b84 	.word	0x20000b84
 8005e6c:	e000ed04 	.word	0xe000ed04
 8005e70:	20000b5c 	.word	0x20000b5c

08005e74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8005e8a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e8e:	b672      	cpsid	i
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	b662      	cpsie	i
 8005e9e:	60fb      	str	r3, [r7, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <prvTaskIsTaskSuspended+0x60>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10a      	bne.n	8005ec4 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <prvTaskIsTaskSuspended+0x64>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d005      	beq.n	8005ec4 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ec4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000b48 	.word	0x20000b48
 8005ed8:	20000b1c 	.word	0x20000b1c

08005edc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <vTaskResume+0x2c>
	__asm volatile
 8005eee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ef2:	b672      	cpsid	i
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	b662      	cpsie	i
 8005f02:	60bb      	str	r3, [r7, #8]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005f08:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <vTaskResume+0xb0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d037      	beq.n	8005f82 <vTaskResume+0xa6>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d034      	beq.n	8005f82 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8005f18:	f000 ff70 	bl	8006dfc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ffa9 	bl	8005e74 <prvTaskIsTaskSuspended>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d02a      	beq.n	8005f7e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fa06 	bl	800533e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	2201      	movs	r2, #1
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <vTaskResume+0xb4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <vTaskResume+0xb4>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a10      	ldr	r2, [pc, #64]	; (8005f94 <vTaskResume+0xb8>)
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7ff f992 	bl	8005284 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <vTaskResume+0xb0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d307      	bcc.n	8005f7e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <vTaskResume+0xbc>)
 8005f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005f7e:	f000 ff71 	bl	8006e64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000a5c 	.word	0x20000a5c
 8005f90:	20000b64 	.word	0x20000b64
 8005f94:	20000a60 	.word	0x20000a60
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005faa:	463a      	mov	r2, r7
 8005fac:	1d39      	adds	r1, r7, #4
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fdf4 	bl	8000ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	460a      	mov	r2, r1
 8005fca:	4923      	ldr	r1, [pc, #140]	; (8006058 <vTaskStartScheduler+0xbc>)
 8005fcc:	4823      	ldr	r0, [pc, #140]	; (800605c <vTaskStartScheduler+0xc0>)
 8005fce:	f7ff fcd5 	bl	800597c <xTaskCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <vTaskStartScheduler+0xc4>)
 8005fd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fd8:	4b21      	ldr	r3, [pc, #132]	; (8006060 <vTaskStartScheduler+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e001      	b.n	8005fea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d11d      	bne.n	800602c <vTaskStartScheduler+0x90>
	__asm volatile
 8005ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ff4:	b672      	cpsid	i
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	b662      	cpsie	i
 8006004:	613b      	str	r3, [r7, #16]
}
 8006006:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <vTaskStartScheduler+0xc8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	334c      	adds	r3, #76	; 0x4c
 800600e:	4a16      	ldr	r2, [pc, #88]	; (8006068 <vTaskStartScheduler+0xcc>)
 8006010:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <vTaskStartScheduler+0xd0>)
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <vTaskStartScheduler+0xd4>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <vTaskStartScheduler+0xd8>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006026:	f000 fe6b 	bl	8006d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800602a:	e010      	b.n	800604e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d10c      	bne.n	800604e <vTaskStartScheduler+0xb2>
	__asm volatile
 8006034:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006038:	b672      	cpsid	i
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	b662      	cpsie	i
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <vTaskStartScheduler+0xb0>
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08008e50 	.word	0x08008e50
 800605c:	0800669d 	.word	0x0800669d
 8006060:	20000b80 	.word	0x20000b80
 8006064:	20000a5c 	.word	0x20000a5c
 8006068:	2000001c 	.word	0x2000001c
 800606c:	20000b7c 	.word	0x20000b7c
 8006070:	20000b68 	.word	0x20000b68
 8006074:	20000b60 	.word	0x20000b60

08006078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <vTaskSuspendAll+0x18>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	4a03      	ldr	r2, [pc, #12]	; (8006090 <vTaskSuspendAll+0x18>)
 8006084:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006086:	bf00      	nop
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000b84 	.word	0x20000b84

08006094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060a2:	4b42      	ldr	r3, [pc, #264]	; (80061ac <xTaskResumeAll+0x118>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <xTaskResumeAll+0x30>
	__asm volatile
 80060aa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80060ae:	b672      	cpsid	i
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	b662      	cpsie	i
 80060be:	603b      	str	r3, [r7, #0]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060c4:	f000 fe9a 	bl	8006dfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060c8:	4b38      	ldr	r3, [pc, #224]	; (80061ac <xTaskResumeAll+0x118>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4a37      	ldr	r2, [pc, #220]	; (80061ac <xTaskResumeAll+0x118>)
 80060d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <xTaskResumeAll+0x118>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d161      	bne.n	800619e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060da:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <xTaskResumeAll+0x11c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d05d      	beq.n	800619e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e2:	e02e      	b.n	8006142 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <xTaskResumeAll+0x120>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff f924 	bl	800533e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff f91f 	bl	800533e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	409a      	lsls	r2, r3
 8006108:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <xTaskResumeAll+0x124>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <xTaskResumeAll+0x124>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4a27      	ldr	r2, [pc, #156]	; (80061bc <xTaskResumeAll+0x128>)
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7ff f8ab 	bl	8005284 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <xTaskResumeAll+0x12c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <xTaskResumeAll+0x130>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xTaskResumeAll+0x120>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1cc      	bne.n	80060e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006150:	f000 fb60 	bl	8006814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <xTaskResumeAll+0x134>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006160:	f000 f85c 	bl	800621c <xTaskIncrementTick>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <xTaskResumeAll+0x130>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3b01      	subs	r3, #1
 8006174:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f1      	bne.n	8006160 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <xTaskResumeAll+0x134>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <xTaskResumeAll+0x130>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <xTaskResumeAll+0x138>)
 8006190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800619e:	f000 fe61 	bl	8006e64 <vPortExitCritical>

	return xAlreadyYielded;
 80061a2:	68bb      	ldr	r3, [r7, #8]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000b84 	.word	0x20000b84
 80061b0:	20000b5c 	.word	0x20000b5c
 80061b4:	20000b1c 	.word	0x20000b1c
 80061b8:	20000b64 	.word	0x20000b64
 80061bc:	20000a60 	.word	0x20000a60
 80061c0:	20000a5c 	.word	0x20000a5c
 80061c4:	20000b70 	.word	0x20000b70
 80061c8:	20000b6c 	.word	0x20000b6c
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <pcTaskGetName+0x14>
 80061de:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <pcTaskGetName+0x48>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	e000      	b.n	80061e6 <pcTaskGetName+0x16>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <pcTaskGetName+0x38>
	__asm volatile
 80061ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80061f2:	b672      	cpsid	i
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	b662      	cpsie	i
 8006202:	60bb      	str	r3, [r7, #8]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <pcTaskGetName+0x36>
	return &( pxTCB->pcTaskName[ 0 ] );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3334      	adds	r3, #52	; 0x34
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000a5c 	.word	0x20000a5c

0800621c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006226:	4b4f      	ldr	r3, [pc, #316]	; (8006364 <xTaskIncrementTick+0x148>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 808a 	bne.w	8006344 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006230:	4b4d      	ldr	r3, [pc, #308]	; (8006368 <xTaskIncrementTick+0x14c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006238:	4a4b      	ldr	r2, [pc, #300]	; (8006368 <xTaskIncrementTick+0x14c>)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d122      	bne.n	800628a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006244:	4b49      	ldr	r3, [pc, #292]	; (800636c <xTaskIncrementTick+0x150>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <xTaskIncrementTick+0x4c>
	__asm volatile
 800624e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006252:	b672      	cpsid	i
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	b662      	cpsie	i
 8006262:	603b      	str	r3, [r7, #0]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xTaskIncrementTick+0x4a>
 8006268:	4b40      	ldr	r3, [pc, #256]	; (800636c <xTaskIncrementTick+0x150>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b40      	ldr	r3, [pc, #256]	; (8006370 <xTaskIncrementTick+0x154>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3e      	ldr	r2, [pc, #248]	; (800636c <xTaskIncrementTick+0x150>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4a3e      	ldr	r2, [pc, #248]	; (8006370 <xTaskIncrementTick+0x154>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <xTaskIncrementTick+0x158>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a3c      	ldr	r2, [pc, #240]	; (8006374 <xTaskIncrementTick+0x158>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	f000 fac5 	bl	8006814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800628a:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <xTaskIncrementTick+0x15c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	429a      	cmp	r2, r3
 8006292:	d348      	bcc.n	8006326 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006294:	4b35      	ldr	r3, [pc, #212]	; (800636c <xTaskIncrementTick+0x150>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	4b36      	ldr	r3, [pc, #216]	; (8006378 <xTaskIncrementTick+0x15c>)
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]
					break;
 80062a6:	e03e      	b.n	8006326 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a8:	4b30      	ldr	r3, [pc, #192]	; (800636c <xTaskIncrementTick+0x150>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d203      	bcs.n	80062c8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062c0:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <xTaskIncrementTick+0x15c>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062c6:	e02e      	b.n	8006326 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f836 	bl	800533e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff f82d 	bl	800533e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	4b23      	ldr	r3, [pc, #140]	; (800637c <xTaskIncrementTick+0x160>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <xTaskIncrementTick+0x160>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <xTaskIncrementTick+0x164>)
 8006304:	441a      	add	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe ffb9 	bl	8005284 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <xTaskIncrementTick+0x168>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d3b9      	bcc.n	8006294 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006324:	e7b6      	b.n	8006294 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <xTaskIncrementTick+0x168>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4914      	ldr	r1, [pc, #80]	; (8006380 <xTaskIncrementTick+0x164>)
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d907      	bls.n	800634e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	e004      	b.n	800634e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006344:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xTaskIncrementTick+0x16c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <xTaskIncrementTick+0x16c>)
 800634c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTaskIncrementTick+0x170>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000b84 	.word	0x20000b84
 8006368:	20000b60 	.word	0x20000b60
 800636c:	20000b14 	.word	0x20000b14
 8006370:	20000b18 	.word	0x20000b18
 8006374:	20000b74 	.word	0x20000b74
 8006378:	20000b7c 	.word	0x20000b7c
 800637c:	20000b64 	.word	0x20000b64
 8006380:	20000a60 	.word	0x20000a60
 8006384:	20000a5c 	.word	0x20000a5c
 8006388:	20000b6c 	.word	0x20000b6c
 800638c:	20000b70 	.word	0x20000b70

08006390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006396:	4b32      	ldr	r3, [pc, #200]	; (8006460 <vTaskSwitchContext+0xd0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800639e:	4b31      	ldr	r3, [pc, #196]	; (8006464 <vTaskSwitchContext+0xd4>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063a4:	e057      	b.n	8006456 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80063a6:	4b2f      	ldr	r3, [pc, #188]	; (8006464 <vTaskSwitchContext+0xd4>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80063ac:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <vTaskSwitchContext+0xd8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <vTaskSwitchContext+0xd8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d808      	bhi.n	80063ce <vTaskSwitchContext+0x3e>
 80063bc:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <vTaskSwitchContext+0xd8>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b29      	ldr	r3, [pc, #164]	; (8006468 <vTaskSwitchContext+0xd8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3334      	adds	r3, #52	; 0x34
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7fa fbcb 	bl	8000b64 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ce:	4b27      	ldr	r3, [pc, #156]	; (800646c <vTaskSwitchContext+0xdc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	fab3 f383 	clz	r3, r3
 80063da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	f1c3 031f 	rsb	r3, r3, #31
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	4922      	ldr	r1, [pc, #136]	; (8006470 <vTaskSwitchContext+0xe0>)
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10c      	bne.n	8006412 <vTaskSwitchContext+0x82>
	__asm volatile
 80063f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063fc:	b672      	cpsid	i
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	b662      	cpsie	i
 800640c:	607b      	str	r3, [r7, #4]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <vTaskSwitchContext+0x80>
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a14      	ldr	r2, [pc, #80]	; (8006470 <vTaskSwitchContext+0xe0>)
 800641e:	4413      	add	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3308      	adds	r3, #8
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <vTaskSwitchContext+0xb2>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a07      	ldr	r2, [pc, #28]	; (8006468 <vTaskSwitchContext+0xd8>)
 800644a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <vTaskSwitchContext+0xd8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	334c      	adds	r3, #76	; 0x4c
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <vTaskSwitchContext+0xe4>)
 8006454:	6013      	str	r3, [r2, #0]
}
 8006456:	bf00      	nop
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000b84 	.word	0x20000b84
 8006464:	20000b70 	.word	0x20000b70
 8006468:	20000a5c 	.word	0x20000a5c
 800646c:	20000b64 	.word	0x20000b64
 8006470:	20000a60 	.word	0x20000a60
 8006474:	2000001c 	.word	0x2000001c

08006478 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10c      	bne.n	80064a2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006488:	f04f 0380 	mov.w	r3, #128	; 0x80
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <vTaskPlaceOnEventList+0x48>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3318      	adds	r3, #24
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fe ff0e 	bl	80052cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064b0:	2101      	movs	r1, #1
 80064b2:	6838      	ldr	r0, [r7, #0]
 80064b4:	f000 fb2e 	bl	8006b14 <prvAddCurrentTaskToDelayedList>
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000a5c 	.word	0x20000a5c

080064c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10c      	bne.n	80064f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80064da:	f04f 0380 	mov.w	r3, #128	; 0x80
 80064de:	b672      	cpsid	i
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	b662      	cpsie	i
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3318      	adds	r3, #24
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe ff20 	bl	800533e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064fe:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <xTaskRemoveFromEventList+0xb0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d11c      	bne.n	8006540 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	3304      	adds	r3, #4
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe ff17 	bl	800533e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2201      	movs	r2, #1
 8006516:	409a      	lsls	r2, r3
 8006518:	4b17      	ldr	r3, [pc, #92]	; (8006578 <xTaskRemoveFromEventList+0xb4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4313      	orrs	r3, r2
 800651e:	4a16      	ldr	r2, [pc, #88]	; (8006578 <xTaskRemoveFromEventList+0xb4>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a13      	ldr	r2, [pc, #76]	; (800657c <xTaskRemoveFromEventList+0xb8>)
 8006530:	441a      	add	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe fea3 	bl	8005284 <vListInsertEnd>
 800653e:	e005      	b.n	800654c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3318      	adds	r3, #24
 8006544:	4619      	mov	r1, r3
 8006546:	480e      	ldr	r0, [pc, #56]	; (8006580 <xTaskRemoveFromEventList+0xbc>)
 8006548:	f7fe fe9c 	bl	8005284 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <xTaskRemoveFromEventList+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	429a      	cmp	r2, r3
 8006558:	d905      	bls.n	8006566 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <xTaskRemoveFromEventList+0xc4>)
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e001      	b.n	800656a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800656a:	697b      	ldr	r3, [r7, #20]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000b84 	.word	0x20000b84
 8006578:	20000b64 	.word	0x20000b64
 800657c:	20000a60 	.word	0x20000a60
 8006580:	20000b1c 	.word	0x20000b1c
 8006584:	20000a5c 	.word	0x20000a5c
 8006588:	20000b70 	.word	0x20000b70

0800658c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <vTaskInternalSetTimeOutState+0x24>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <vTaskInternalSetTimeOutState+0x28>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	605a      	str	r2, [r3, #4]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000b74 	.word	0x20000b74
 80065b4:	20000b60 	.word	0x20000b60

080065b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80065c8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80065cc:	b672      	cpsid	i
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	b662      	cpsie	i
 80065dc:	613b      	str	r3, [r7, #16]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10c      	bne.n	8006602 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80065e8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80065ec:	b672      	cpsid	i
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	b662      	cpsie	i
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006602:	f000 fbfb 	bl	8006dfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <xTaskCheckForTimeOut+0xc4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d102      	bne.n	8006626 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e023      	b.n	800666e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <xTaskCheckForTimeOut+0xc8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d007      	beq.n	8006642 <xTaskCheckForTimeOut+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e015      	b.n	800666e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	429a      	cmp	r2, r3
 800664a:	d20b      	bcs.n	8006664 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff97 	bl	800658c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	e004      	b.n	800666e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800666a:	2301      	movs	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800666e:	f000 fbf9 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 8006672:	69fb      	ldr	r3, [r7, #28]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000b60 	.word	0x20000b60
 8006680:	20000b74 	.word	0x20000b74

08006684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006688:	4b03      	ldr	r3, [pc, #12]	; (8006698 <vTaskMissedYield+0x14>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000b70 	.word	0x20000b70

0800669c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066a4:	f000 f852 	bl	800674c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <prvIdleTask+0x28>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d9f9      	bls.n	80066a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <prvIdleTask+0x2c>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066c0:	e7f0      	b.n	80066a4 <prvIdleTask+0x8>
 80066c2:	bf00      	nop
 80066c4:	20000a60 	.word	0x20000a60
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e00c      	b.n	80066f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a12      	ldr	r2, [pc, #72]	; (800672c <prvInitialiseTaskLists+0x60>)
 80066e4:	4413      	add	r3, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fd9f 	bl	800522a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3301      	adds	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d9ef      	bls.n	80066d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066f8:	480d      	ldr	r0, [pc, #52]	; (8006730 <prvInitialiseTaskLists+0x64>)
 80066fa:	f7fe fd96 	bl	800522a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066fe:	480d      	ldr	r0, [pc, #52]	; (8006734 <prvInitialiseTaskLists+0x68>)
 8006700:	f7fe fd93 	bl	800522a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006704:	480c      	ldr	r0, [pc, #48]	; (8006738 <prvInitialiseTaskLists+0x6c>)
 8006706:	f7fe fd90 	bl	800522a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800670a:	480c      	ldr	r0, [pc, #48]	; (800673c <prvInitialiseTaskLists+0x70>)
 800670c:	f7fe fd8d 	bl	800522a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006710:	480b      	ldr	r0, [pc, #44]	; (8006740 <prvInitialiseTaskLists+0x74>)
 8006712:	f7fe fd8a 	bl	800522a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <prvInitialiseTaskLists+0x78>)
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <prvInitialiseTaskLists+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <prvInitialiseTaskLists+0x7c>)
 800671e:	4a05      	ldr	r2, [pc, #20]	; (8006734 <prvInitialiseTaskLists+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000a60 	.word	0x20000a60
 8006730:	20000aec 	.word	0x20000aec
 8006734:	20000b00 	.word	0x20000b00
 8006738:	20000b1c 	.word	0x20000b1c
 800673c:	20000b30 	.word	0x20000b30
 8006740:	20000b48 	.word	0x20000b48
 8006744:	20000b14 	.word	0x20000b14
 8006748:	20000b18 	.word	0x20000b18

0800674c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006752:	e019      	b.n	8006788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006754:	f000 fb52 	bl	8006dfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	4b10      	ldr	r3, [pc, #64]	; (800679c <prvCheckTasksWaitingTermination+0x50>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fdea 	bl	800533e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3b01      	subs	r3, #1
 8006770:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 8006772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800677c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800677e:	f000 fb71 	bl	8006e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f810 	bl	80067a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e1      	bne.n	8006754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000b30 	.word	0x20000b30
 80067a0:	20000b5c 	.word	0x20000b5c
 80067a4:	20000b44 	.word	0x20000b44

080067a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	334c      	adds	r3, #76	; 0x4c
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f89f 	bl	80078f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d108      	bne.n	80067d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fd0d 	bl	80071e8 <vPortFree>
				vPortFree( pxTCB );
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fd0a 	bl	80071e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067d4:	e01a      	b.n	800680c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d103      	bne.n	80067e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fd01 	bl	80071e8 <vPortFree>
	}
 80067e6:	e011      	b.n	800680c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d00c      	beq.n	800680c <prvDeleteTCB+0x64>
	__asm volatile
 80067f2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <prvDeleteTCB+0x62>
	}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800681a:	4b0c      	ldr	r3, [pc, #48]	; (800684c <prvResetNextTaskUnblockTime+0x38>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvResetNextTaskUnblockTime+0x3c>)
 8006826:	f04f 32ff 	mov.w	r2, #4294967295
 800682a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800682c:	e008      	b.n	8006840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <prvResetNextTaskUnblockTime+0x38>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a04      	ldr	r2, [pc, #16]	; (8006850 <prvResetNextTaskUnblockTime+0x3c>)
 800683e:	6013      	str	r3, [r2, #0]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	20000b14 	.word	0x20000b14
 8006850:	20000b7c 	.word	0x20000b7c

08006854 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <xTaskGetCurrentTaskHandle+0x1c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006860:	687b      	ldr	r3, [r7, #4]
	}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000a5c 	.word	0x20000a5c

08006874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <xTaskGetSchedulerState+0x34>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006882:	2301      	movs	r3, #1
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	e008      	b.n	800689a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006888:	4b08      	ldr	r3, [pc, #32]	; (80068ac <xTaskGetSchedulerState+0x38>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006890:	2302      	movs	r3, #2
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	e001      	b.n	800689a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800689a:	687b      	ldr	r3, [r7, #4]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	20000b68 	.word	0x20000b68
 80068ac:	20000b84 	.word	0x20000b84

080068b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d069      	beq.n	800699a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ca:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <xTaskPriorityInherit+0xf4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d259      	bcs.n	8006988 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db06      	blt.n	80068ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068dc:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <xTaskPriorityInherit+0xf4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	f1c3 0207 	rsb	r2, r3, #7
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6959      	ldr	r1, [r3, #20]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a2b      	ldr	r2, [pc, #172]	; (80069a8 <xTaskPriorityInherit+0xf8>)
 80068fc:	4413      	add	r3, r2
 80068fe:	4299      	cmp	r1, r3
 8006900:	d13a      	bne.n	8006978 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fd19 	bl	800533e <uxListRemove>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d115      	bne.n	800693e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006916:	4924      	ldr	r1, [pc, #144]	; (80069a8 <xTaskPriorityInherit+0xf8>)
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xTaskPriorityInherit+0x8e>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2201      	movs	r2, #1
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43da      	mvns	r2, r3
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <xTaskPriorityInherit+0xfc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4013      	ands	r3, r2
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <xTaskPriorityInherit+0xfc>)
 800693c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <xTaskPriorityInherit+0xf4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	4b16      	ldr	r3, [pc, #88]	; (80069ac <xTaskPriorityInherit+0xfc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <xTaskPriorityInherit+0xfc>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a10      	ldr	r2, [pc, #64]	; (80069a8 <xTaskPriorityInherit+0xf8>)
 8006968:	441a      	add	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe fc87 	bl	8005284 <vListInsertEnd>
 8006976:	e004      	b.n	8006982 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <xTaskPriorityInherit+0xf4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006982:	2301      	movs	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	e008      	b.n	800699a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <xTaskPriorityInherit+0xf4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	429a      	cmp	r2, r3
 8006994:	d201      	bcs.n	800699a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006996:	2301      	movs	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800699a:	68fb      	ldr	r3, [r7, #12]
	}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000a5c 	.word	0x20000a5c
 80069a8:	20000a60 	.word	0x20000a60
 80069ac:	20000b64 	.word	0x20000b64

080069b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8087 	beq.w	8006ad8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10c      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80069d2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80069d6:	b672      	cpsid	i
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	b662      	cpsie	i
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d902      	bls.n	80069fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e002      	b.n	8006a02 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d065      	beq.n	8006ad8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d160      	bne.n	8006ad8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a16:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d10c      	bne.n	8006a3a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006a20:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a24:	b672      	cpsid	i
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	60bb      	str	r3, [r7, #8]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	db04      	blt.n	8006a58 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f1c3 0207 	rsb	r2, r3, #7
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	6959      	ldr	r1, [r3, #20]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	d134      	bne.n	8006ad8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fc63 	bl	800533e <uxListRemove>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d115      	bne.n	8006aaa <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	4918      	ldr	r1, [pc, #96]	; (8006ae4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2201      	movs	r2, #1
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43da      	mvns	r2, r3
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006aa8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	2201      	movs	r2, #1
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006aca:	441a      	add	r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f7fe fbd6 	bl	8005284 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ad8:	bf00      	nop
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000a5c 	.word	0x20000a5c
 8006ae4:	20000a60 	.word	0x20000a60
 8006ae8:	20000b64 	.word	0x20000b64

08006aec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006afe:	3201      	adds	r2, #1
 8006b00:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006b02:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b04:	681b      	ldr	r3, [r3, #0]
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000a5c 	.word	0x20000a5c

08006b14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1e:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b24:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fc07 	bl	800533e <uxListRemove>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b36:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43da      	mvns	r2, r3
 8006b44:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d10a      	bne.n	8006b6c <prvAddCurrentTaskToDelayedList+0x58>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	481a      	ldr	r0, [pc, #104]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b66:	f7fe fb8d 	bl	8005284 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b6a:	e026      	b.n	8006bba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b74:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d209      	bcs.n	8006b98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b84:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4610      	mov	r0, r2
 8006b92:	f7fe fb9b 	bl	80052cc <vListInsert>
}
 8006b96:	e010      	b.n	8006bba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f7fe fb91 	bl	80052cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d202      	bcs.n	8006bba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bb4:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6013      	str	r3, [r2, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000b60 	.word	0x20000b60
 8006bc8:	20000a5c 	.word	0x20000a5c
 8006bcc:	20000b64 	.word	0x20000b64
 8006bd0:	20000b48 	.word	0x20000b48
 8006bd4:	20000b18 	.word	0x20000b18
 8006bd8:	20000b14 	.word	0x20000b14
 8006bdc:	20000b7c 	.word	0x20000b7c

08006be0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3b04      	subs	r3, #4
 8006bf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b04      	subs	r3, #4
 8006bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c10:	4a0c      	ldr	r2, [pc, #48]	; (8006c44 <pxPortInitialiseStack+0x64>)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3b14      	subs	r3, #20
 8006c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3b04      	subs	r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f06f 0202 	mvn.w	r2, #2
 8006c2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3b20      	subs	r3, #32
 8006c34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c36:	68fb      	ldr	r3, [r7, #12]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	08006c49 	.word	0x08006c49

08006c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <prvTaskExitError+0x5c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d00c      	beq.n	8006c76 <prvTaskExitError+0x2e>
	__asm volatile
 8006c5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <prvTaskExitError+0x2c>
	__asm volatile
 8006c76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c7a:	b672      	cpsid	i
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	b662      	cpsie	i
 8006c8a:	60bb      	str	r3, [r7, #8]
}
 8006c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c8e:	bf00      	nop
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0fc      	beq.n	8006c90 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	20000018 	.word	0x20000018
	...

08006cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <pxCurrentTCBConst2>)
 8006cb2:	6819      	ldr	r1, [r3, #0]
 8006cb4:	6808      	ldr	r0, [r1, #0]
 8006cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	f380 8809 	msr	PSP, r0
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f380 8811 	msr	BASEPRI, r0
 8006cca:	4770      	bx	lr
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst2>:
 8006cd0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cd8:	4808      	ldr	r0, [pc, #32]	; (8006cfc <prvPortStartFirstTask+0x24>)
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f380 8808 	msr	MSP, r0
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f380 8814 	msr	CONTROL, r0
 8006cea:	b662      	cpsie	i
 8006cec:	b661      	cpsie	f
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	df00      	svc	0
 8006cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cfa:	bf00      	nop
 8006cfc:	e000ed08 	.word	0xe000ed08

08006d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d06:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <xPortStartScheduler+0xe4>)
 8006d08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	22ff      	movs	r2, #255	; 0xff
 8006d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <xPortStartScheduler+0xe8>)
 8006d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d2e:	4b2f      	ldr	r3, [pc, #188]	; (8006dec <xPortStartScheduler+0xec>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d34:	e009      	b.n	8006d4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d36:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <xPortStartScheduler+0xec>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <xPortStartScheduler+0xec>)
 8006d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d0ef      	beq.n	8006d36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d56:	4b25      	ldr	r3, [pc, #148]	; (8006dec <xPortStartScheduler+0xec>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1c3 0307 	rsb	r3, r3, #7
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00c      	beq.n	8006d7c <xPortStartScheduler+0x7c>
	__asm volatile
 8006d62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d66:	b672      	cpsid	i
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	b662      	cpsie	i
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <xPortStartScheduler+0xec>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <xPortStartScheduler+0xec>)
 8006d84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d86:	4b19      	ldr	r3, [pc, #100]	; (8006dec <xPortStartScheduler+0xec>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8e:	4a17      	ldr	r2, [pc, #92]	; (8006dec <xPortStartScheduler+0xec>)
 8006d90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <xPortStartScheduler+0xf0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a14      	ldr	r2, [pc, #80]	; (8006df0 <xPortStartScheduler+0xf0>)
 8006da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006da4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <xPortStartScheduler+0xf0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <xPortStartScheduler+0xf0>)
 8006dac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006db0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006db2:	f000 f8dd 	bl	8006f70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <xPortStartScheduler+0xf4>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dbc:	f000 f8fc 	bl	8006fb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <xPortStartScheduler+0xf8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a0c      	ldr	r2, [pc, #48]	; (8006df8 <xPortStartScheduler+0xf8>)
 8006dc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dcc:	f7ff ff84 	bl	8006cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dd0:	f7ff fade 	bl	8006390 <vTaskSwitchContext>
	prvTaskExitError();
 8006dd4:	f7ff ff38 	bl	8006c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000e400 	.word	0xe000e400
 8006de8:	20000b88 	.word	0x20000b88
 8006dec:	20000b8c 	.word	0x20000b8c
 8006df0:	e000ed20 	.word	0xe000ed20
 8006df4:	20000018 	.word	0x20000018
 8006df8:	e000ef34 	.word	0xe000ef34

08006dfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	__asm volatile
 8006e02:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	607b      	str	r3, [r7, #4]
}
 8006e18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e1a:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <vPortEnterCritical+0x60>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	4a0e      	ldr	r2, [pc, #56]	; (8006e5c <vPortEnterCritical+0x60>)
 8006e22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <vPortEnterCritical+0x60>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d111      	bne.n	8006e50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <vPortEnterCritical+0x64>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <vPortEnterCritical+0x54>
	__asm volatile
 8006e36:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e3a:	b672      	cpsid	i
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	b662      	cpsie	i
 8006e4a:	603b      	str	r3, [r7, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortEnterCritical+0x52>
	}
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000018 	.word	0x20000018
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <vPortExitCritical+0x54>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10c      	bne.n	8006e8c <vPortExitCritical+0x28>
	__asm volatile
 8006e72:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e76:	b672      	cpsid	i
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	b662      	cpsie	i
 8006e86:	607b      	str	r3, [r7, #4]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <vPortExitCritical+0x54>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <vPortExitCritical+0x54>)
 8006e94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <vPortExitCritical+0x54>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <vPortExitCritical+0x46>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f383 8811 	msr	BASEPRI, r3
}
 8006ea8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000018 	.word	0x20000018
 8006ebc:	00000000 	.word	0x00000000

08006ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ec0:	f3ef 8009 	mrs	r0, PSP
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <pxCurrentTCBConst>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f01e 0f10 	tst.w	lr, #16
 8006ed0:	bf08      	it	eq
 8006ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6010      	str	r0, [r2, #0]
 8006edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ee0:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006ee4:	b672      	cpsid	i
 8006ee6:	f380 8811 	msr	BASEPRI, r0
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	b662      	cpsie	i
 8006ef4:	f7ff fa4c 	bl	8006390 <vTaskSwitchContext>
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	f380 8811 	msr	BASEPRI, r0
 8006f00:	bc09      	pop	{r0, r3}
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f01e 0f10 	tst.w	lr, #16
 8006f0e:	bf08      	it	eq
 8006f10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f14:	f380 8809 	msr	PSP, r0
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop

08006f20 <pxCurrentTCBConst>:
 8006f20:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f32:	b672      	cpsid	i
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	b662      	cpsie	i
 8006f42:	607b      	str	r3, [r7, #4]
}
 8006f44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f46:	f7ff f969 	bl	800621c <xTaskIncrementTick>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <SysTick_Handler+0x44>)
 8006f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f383 8811 	msr	BASEPRI, r3
}
 8006f62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <vPortSetupTimerInterrupt+0x34>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <vPortSetupTimerInterrupt+0x38>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <vPortSetupTimerInterrupt+0x3c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <vPortSetupTimerInterrupt+0x40>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	099b      	lsrs	r3, r3, #6
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <vPortSetupTimerInterrupt+0x44>)
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <vPortSetupTimerInterrupt+0x34>)
 8006f94:	2207      	movs	r2, #7
 8006f96:	601a      	str	r2, [r3, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	e000e010 	.word	0xe000e010
 8006fa8:	e000e018 	.word	0xe000e018
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	10624dd3 	.word	0x10624dd3
 8006fb4:	e000e014 	.word	0xe000e014

08006fb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fc8 <vPortEnableVFP+0x10>
 8006fbc:	6801      	ldr	r1, [r0, #0]
 8006fbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fc2:	6001      	str	r1, [r0, #0]
 8006fc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fc6:	bf00      	nop
 8006fc8:	e000ed88 	.word	0xe000ed88

08006fcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fd2:	f3ef 8305 	mrs	r3, IPSR
 8006fd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b0f      	cmp	r3, #15
 8006fdc:	d916      	bls.n	800700c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <vPortValidateInterruptPriority+0x78>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fe8:	4b17      	ldr	r3, [pc, #92]	; (8007048 <vPortValidateInterruptPriority+0x7c>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	7afa      	ldrb	r2, [r7, #11]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d20c      	bcs.n	800700c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006ff2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	607b      	str	r3, [r7, #4]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <vPortValidateInterruptPriority+0x80>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <vPortValidateInterruptPriority+0x84>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d90c      	bls.n	8007036 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800701c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	603b      	str	r3, [r7, #0]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <vPortValidateInterruptPriority+0x68>
	}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	e000e3f0 	.word	0xe000e3f0
 8007048:	20000b88 	.word	0x20000b88
 800704c:	e000ed0c 	.word	0xe000ed0c
 8007050:	20000b8c 	.word	0x20000b8c

08007054 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007060:	f7ff f80a 	bl	8006078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007064:	4b5b      	ldr	r3, [pc, #364]	; (80071d4 <pvPortMalloc+0x180>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800706c:	f000 f91a 	bl	80072a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007070:	4b59      	ldr	r3, [pc, #356]	; (80071d8 <pvPortMalloc+0x184>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 8092 	bne.w	80071a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01f      	beq.n	80070c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007084:	2208      	movs	r2, #8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	3308      	adds	r3, #8
 800709e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00c      	beq.n	80070c4 <pvPortMalloc+0x70>
	__asm volatile
 80070aa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070ae:	b672      	cpsid	i
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	b662      	cpsie	i
 80070be:	617b      	str	r3, [r7, #20]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d06b      	beq.n	80071a2 <pvPortMalloc+0x14e>
 80070ca:	4b44      	ldr	r3, [pc, #272]	; (80071dc <pvPortMalloc+0x188>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d866      	bhi.n	80071a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070d4:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <pvPortMalloc+0x18c>)
 80070d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070d8:	4b41      	ldr	r3, [pc, #260]	; (80071e0 <pvPortMalloc+0x18c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070de:	e004      	b.n	80070ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d903      	bls.n	80070fc <pvPortMalloc+0xa8>
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f1      	bne.n	80070e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070fc:	4b35      	ldr	r3, [pc, #212]	; (80071d4 <pvPortMalloc+0x180>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	429a      	cmp	r2, r3
 8007104:	d04d      	beq.n	80071a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2208      	movs	r2, #8
 800710c:	4413      	add	r3, r2
 800710e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	2308      	movs	r3, #8
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	429a      	cmp	r2, r3
 8007126:	d921      	bls.n	800716c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <pvPortMalloc+0x100>
	__asm volatile
 800713a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800713e:	b672      	cpsid	i
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	b662      	cpsie	i
 800714e:	613b      	str	r3, [r7, #16]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007166:	69b8      	ldr	r0, [r7, #24]
 8007168:	f000 f8fe 	bl	8007368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <pvPortMalloc+0x188>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <pvPortMalloc+0x188>)
 8007178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <pvPortMalloc+0x188>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <pvPortMalloc+0x190>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d203      	bcs.n	800718e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <pvPortMalloc+0x188>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <pvPortMalloc+0x190>)
 800718c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <pvPortMalloc+0x184>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	431a      	orrs	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071a2:	f7fe ff77 	bl	8006094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <pvPortMalloc+0x176>
	__asm volatile
 80071b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071b4:	b672      	cpsid	i
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	b662      	cpsie	i
 80071c4:	60fb      	str	r3, [r7, #12]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <pvPortMalloc+0x174>
	return pvReturn;
 80071ca:	69fb      	ldr	r3, [r7, #28]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3728      	adds	r7, #40	; 0x28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20010b98 	.word	0x20010b98
 80071d8:	20010ba4 	.word	0x20010ba4
 80071dc:	20010b9c 	.word	0x20010b9c
 80071e0:	20010b90 	.word	0x20010b90
 80071e4:	20010ba0 	.word	0x20010ba0

080071e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04c      	beq.n	8007294 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071fa:	2308      	movs	r3, #8
 80071fc:	425b      	negs	r3, r3
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b23      	ldr	r3, [pc, #140]	; (800729c <vPortFree+0xb4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4013      	ands	r3, r2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10c      	bne.n	8007230 <vPortFree+0x48>
	__asm volatile
 8007216:	f04f 0380 	mov.w	r3, #128	; 0x80
 800721a:	b672      	cpsid	i
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	b662      	cpsie	i
 800722a:	60fb      	str	r3, [r7, #12]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <vPortFree+0x6a>
	__asm volatile
 8007238:	f04f 0380 	mov.w	r3, #128	; 0x80
 800723c:	b672      	cpsid	i
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	b662      	cpsie	i
 800724c:	60bb      	str	r3, [r7, #8]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	4b11      	ldr	r3, [pc, #68]	; (800729c <vPortFree+0xb4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4013      	ands	r3, r2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d019      	beq.n	8007294 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d115      	bne.n	8007294 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <vPortFree+0xb4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	43db      	mvns	r3, r3
 8007272:	401a      	ands	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007278:	f7fe fefe 	bl	8006078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vPortFree+0xb8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4413      	add	r3, r2
 8007286:	4a06      	ldr	r2, [pc, #24]	; (80072a0 <vPortFree+0xb8>)
 8007288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800728a:	6938      	ldr	r0, [r7, #16]
 800728c:	f000 f86c 	bl	8007368 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007290:	f7fe ff00 	bl	8006094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007294:	bf00      	nop
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20010ba4 	.word	0x20010ba4
 80072a0:	20010b9c 	.word	0x20010b9c

080072a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <prvHeapInit+0xac>)
 80072b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3307      	adds	r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <prvHeapInit+0xac>)
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <prvHeapInit+0xb0>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <prvHeapInit+0xb0>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f0:	2208      	movs	r2, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <prvHeapInit+0xb4>)
 8007304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvHeapInit+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <prvHeapInit+0xb4>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a0a      	ldr	r2, [pc, #40]	; (800735c <prvHeapInit+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <prvHeapInit+0xbc>)
 800733a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <prvHeapInit+0xc0>)
 800733e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000b90 	.word	0x20000b90
 8007354:	20010b90 	.word	0x20010b90
 8007358:	20010b98 	.word	0x20010b98
 800735c:	20010ba0 	.word	0x20010ba0
 8007360:	20010b9c 	.word	0x20010b9c
 8007364:	20010ba4 	.word	0x20010ba4

08007368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvInsertBlockIntoFreeList+0xac>)
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <prvInsertBlockIntoFreeList+0x14>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d8f7      	bhi.n	8007376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d108      	bne.n	80073aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d118      	bne.n	80073f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d00d      	beq.n	80073e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e008      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e003      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d002      	beq.n	8007406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20010b90 	.word	0x20010b90
 8007418:	20010b98 	.word	0x20010b98

0800741c <atoi>:
 800741c:	220a      	movs	r2, #10
 800741e:	2100      	movs	r1, #0
 8007420:	f000 bbd0 	b.w	8007bc4 <strtol>

08007424 <__errno>:
 8007424:	4b01      	ldr	r3, [pc, #4]	; (800742c <__errno+0x8>)
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2000001c 	.word	0x2000001c

08007430 <std>:
 8007430:	2300      	movs	r3, #0
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	e9c0 3300 	strd	r3, r3, [r0]
 800743a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800743e:	6083      	str	r3, [r0, #8]
 8007440:	8181      	strh	r1, [r0, #12]
 8007442:	6643      	str	r3, [r0, #100]	; 0x64
 8007444:	81c2      	strh	r2, [r0, #14]
 8007446:	6183      	str	r3, [r0, #24]
 8007448:	4619      	mov	r1, r3
 800744a:	2208      	movs	r2, #8
 800744c:	305c      	adds	r0, #92	; 0x5c
 800744e:	f000 f91a 	bl	8007686 <memset>
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std+0x38>)
 8007454:	6263      	str	r3, [r4, #36]	; 0x24
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <std+0x3c>)
 8007458:	62a3      	str	r3, [r4, #40]	; 0x28
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <std+0x40>)
 800745c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800745e:	4b05      	ldr	r3, [pc, #20]	; (8007474 <std+0x44>)
 8007460:	6224      	str	r4, [r4, #32]
 8007462:	6323      	str	r3, [r4, #48]	; 0x30
 8007464:	bd10      	pop	{r4, pc}
 8007466:	bf00      	nop
 8007468:	08007a39 	.word	0x08007a39
 800746c:	08007a5b 	.word	0x08007a5b
 8007470:	08007a93 	.word	0x08007a93
 8007474:	08007ab7 	.word	0x08007ab7

08007478 <_cleanup_r>:
 8007478:	4901      	ldr	r1, [pc, #4]	; (8007480 <_cleanup_r+0x8>)
 800747a:	f000 b8af 	b.w	80075dc <_fwalk_reent>
 800747e:	bf00      	nop
 8007480:	08007ea9 	.word	0x08007ea9

08007484 <__sfmoreglue>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	2268      	movs	r2, #104	; 0x68
 8007488:	1e4d      	subs	r5, r1, #1
 800748a:	4355      	muls	r5, r2
 800748c:	460e      	mov	r6, r1
 800748e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007492:	f000 f921 	bl	80076d8 <_malloc_r>
 8007496:	4604      	mov	r4, r0
 8007498:	b140      	cbz	r0, 80074ac <__sfmoreglue+0x28>
 800749a:	2100      	movs	r1, #0
 800749c:	e9c0 1600 	strd	r1, r6, [r0]
 80074a0:	300c      	adds	r0, #12
 80074a2:	60a0      	str	r0, [r4, #8]
 80074a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074a8:	f000 f8ed 	bl	8007686 <memset>
 80074ac:	4620      	mov	r0, r4
 80074ae:	bd70      	pop	{r4, r5, r6, pc}

080074b0 <__sfp_lock_acquire>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__sfp_lock_acquire+0x8>)
 80074b2:	f000 b8d8 	b.w	8007666 <__retarget_lock_acquire_recursive>
 80074b6:	bf00      	nop
 80074b8:	20010ba9 	.word	0x20010ba9

080074bc <__sfp_lock_release>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__sfp_lock_release+0x8>)
 80074be:	f000 b8d3 	b.w	8007668 <__retarget_lock_release_recursive>
 80074c2:	bf00      	nop
 80074c4:	20010ba9 	.word	0x20010ba9

080074c8 <__sinit_lock_acquire>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__sinit_lock_acquire+0x8>)
 80074ca:	f000 b8cc 	b.w	8007666 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	20010baa 	.word	0x20010baa

080074d4 <__sinit_lock_release>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__sinit_lock_release+0x8>)
 80074d6:	f000 b8c7 	b.w	8007668 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	20010baa 	.word	0x20010baa

080074e0 <__sinit>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	4604      	mov	r4, r0
 80074e4:	f7ff fff0 	bl	80074c8 <__sinit_lock_acquire>
 80074e8:	69a3      	ldr	r3, [r4, #24]
 80074ea:	b11b      	cbz	r3, 80074f4 <__sinit+0x14>
 80074ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f0:	f7ff bff0 	b.w	80074d4 <__sinit_lock_release>
 80074f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074f8:	6523      	str	r3, [r4, #80]	; 0x50
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <__sinit+0x68>)
 80074fc:	4a13      	ldr	r2, [pc, #76]	; (800754c <__sinit+0x6c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	62a2      	str	r2, [r4, #40]	; 0x28
 8007502:	42a3      	cmp	r3, r4
 8007504:	bf04      	itt	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	61a3      	streq	r3, [r4, #24]
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f820 	bl	8007550 <__sfp>
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	4620      	mov	r0, r4
 8007514:	f000 f81c 	bl	8007550 <__sfp>
 8007518:	60a0      	str	r0, [r4, #8]
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f818 	bl	8007550 <__sfp>
 8007520:	2200      	movs	r2, #0
 8007522:	60e0      	str	r0, [r4, #12]
 8007524:	2104      	movs	r1, #4
 8007526:	6860      	ldr	r0, [r4, #4]
 8007528:	f7ff ff82 	bl	8007430 <std>
 800752c:	68a0      	ldr	r0, [r4, #8]
 800752e:	2201      	movs	r2, #1
 8007530:	2109      	movs	r1, #9
 8007532:	f7ff ff7d 	bl	8007430 <std>
 8007536:	68e0      	ldr	r0, [r4, #12]
 8007538:	2202      	movs	r2, #2
 800753a:	2112      	movs	r1, #18
 800753c:	f7ff ff78 	bl	8007430 <std>
 8007540:	2301      	movs	r3, #1
 8007542:	61a3      	str	r3, [r4, #24]
 8007544:	e7d2      	b.n	80074ec <__sinit+0xc>
 8007546:	bf00      	nop
 8007548:	08008ed0 	.word	0x08008ed0
 800754c:	08007479 	.word	0x08007479

08007550 <__sfp>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	4607      	mov	r7, r0
 8007554:	f7ff ffac 	bl	80074b0 <__sfp_lock_acquire>
 8007558:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <__sfp+0x84>)
 800755a:	681e      	ldr	r6, [r3, #0]
 800755c:	69b3      	ldr	r3, [r6, #24]
 800755e:	b913      	cbnz	r3, 8007566 <__sfp+0x16>
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff ffbd 	bl	80074e0 <__sinit>
 8007566:	3648      	adds	r6, #72	; 0x48
 8007568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	d503      	bpl.n	8007578 <__sfp+0x28>
 8007570:	6833      	ldr	r3, [r6, #0]
 8007572:	b30b      	cbz	r3, 80075b8 <__sfp+0x68>
 8007574:	6836      	ldr	r6, [r6, #0]
 8007576:	e7f7      	b.n	8007568 <__sfp+0x18>
 8007578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800757c:	b9d5      	cbnz	r5, 80075b4 <__sfp+0x64>
 800757e:	4b16      	ldr	r3, [pc, #88]	; (80075d8 <__sfp+0x88>)
 8007580:	60e3      	str	r3, [r4, #12]
 8007582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007586:	6665      	str	r5, [r4, #100]	; 0x64
 8007588:	f000 f86c 	bl	8007664 <__retarget_lock_init_recursive>
 800758c:	f7ff ff96 	bl	80074bc <__sfp_lock_release>
 8007590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007598:	6025      	str	r5, [r4, #0]
 800759a:	61a5      	str	r5, [r4, #24]
 800759c:	2208      	movs	r2, #8
 800759e:	4629      	mov	r1, r5
 80075a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075a4:	f000 f86f 	bl	8007686 <memset>
 80075a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075b0:	4620      	mov	r0, r4
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	3468      	adds	r4, #104	; 0x68
 80075b6:	e7d9      	b.n	800756c <__sfp+0x1c>
 80075b8:	2104      	movs	r1, #4
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7ff ff62 	bl	8007484 <__sfmoreglue>
 80075c0:	4604      	mov	r4, r0
 80075c2:	6030      	str	r0, [r6, #0]
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1d5      	bne.n	8007574 <__sfp+0x24>
 80075c8:	f7ff ff78 	bl	80074bc <__sfp_lock_release>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	e7ee      	b.n	80075b0 <__sfp+0x60>
 80075d2:	bf00      	nop
 80075d4:	08008ed0 	.word	0x08008ed0
 80075d8:	ffff0001 	.word	0xffff0001

080075dc <_fwalk_reent>:
 80075dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e0:	4606      	mov	r6, r0
 80075e2:	4688      	mov	r8, r1
 80075e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075e8:	2700      	movs	r7, #0
 80075ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075ee:	f1b9 0901 	subs.w	r9, r9, #1
 80075f2:	d505      	bpl.n	8007600 <_fwalk_reent+0x24>
 80075f4:	6824      	ldr	r4, [r4, #0]
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	d1f7      	bne.n	80075ea <_fwalk_reent+0xe>
 80075fa:	4638      	mov	r0, r7
 80075fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007600:	89ab      	ldrh	r3, [r5, #12]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d907      	bls.n	8007616 <_fwalk_reent+0x3a>
 8007606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800760a:	3301      	adds	r3, #1
 800760c:	d003      	beq.n	8007616 <_fwalk_reent+0x3a>
 800760e:	4629      	mov	r1, r5
 8007610:	4630      	mov	r0, r6
 8007612:	47c0      	blx	r8
 8007614:	4307      	orrs	r7, r0
 8007616:	3568      	adds	r5, #104	; 0x68
 8007618:	e7e9      	b.n	80075ee <_fwalk_reent+0x12>
	...

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f001 fa16 	bl	8008a60 <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	08009010 	.word	0x08009010
 8007658:	08009010 	.word	0x08009010
 800765c:	08009010 	.word	0x08009010
 8007660:	08009014 	.word	0x08009014

08007664 <__retarget_lock_init_recursive>:
 8007664:	4770      	bx	lr

08007666 <__retarget_lock_acquire_recursive>:
 8007666:	4770      	bx	lr

08007668 <__retarget_lock_release_recursive>:
 8007668:	4770      	bx	lr

0800766a <memcpy>:
 800766a:	440a      	add	r2, r1
 800766c:	4291      	cmp	r1, r2
 800766e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007672:	d100      	bne.n	8007676 <memcpy+0xc>
 8007674:	4770      	bx	lr
 8007676:	b510      	push	{r4, lr}
 8007678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800767c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007680:	4291      	cmp	r1, r2
 8007682:	d1f9      	bne.n	8007678 <memcpy+0xe>
 8007684:	bd10      	pop	{r4, pc}

08007686 <memset>:
 8007686:	4402      	add	r2, r0
 8007688:	4603      	mov	r3, r0
 800768a:	4293      	cmp	r3, r2
 800768c:	d100      	bne.n	8007690 <memset+0xa>
 800768e:	4770      	bx	lr
 8007690:	f803 1b01 	strb.w	r1, [r3], #1
 8007694:	e7f9      	b.n	800768a <memset+0x4>
	...

08007698 <sbrk_aligned>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4e0e      	ldr	r6, [pc, #56]	; (80076d4 <sbrk_aligned+0x3c>)
 800769c:	460c      	mov	r4, r1
 800769e:	6831      	ldr	r1, [r6, #0]
 80076a0:	4605      	mov	r5, r0
 80076a2:	b911      	cbnz	r1, 80076aa <sbrk_aligned+0x12>
 80076a4:	f000 f984 	bl	80079b0 <_sbrk_r>
 80076a8:	6030      	str	r0, [r6, #0]
 80076aa:	4621      	mov	r1, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f000 f97f 	bl	80079b0 <_sbrk_r>
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	d00a      	beq.n	80076cc <sbrk_aligned+0x34>
 80076b6:	1cc4      	adds	r4, r0, #3
 80076b8:	f024 0403 	bic.w	r4, r4, #3
 80076bc:	42a0      	cmp	r0, r4
 80076be:	d007      	beq.n	80076d0 <sbrk_aligned+0x38>
 80076c0:	1a21      	subs	r1, r4, r0
 80076c2:	4628      	mov	r0, r5
 80076c4:	f000 f974 	bl	80079b0 <_sbrk_r>
 80076c8:	3001      	adds	r0, #1
 80076ca:	d101      	bne.n	80076d0 <sbrk_aligned+0x38>
 80076cc:	f04f 34ff 	mov.w	r4, #4294967295
 80076d0:	4620      	mov	r0, r4
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	20010bb0 	.word	0x20010bb0

080076d8 <_malloc_r>:
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	1ccd      	adds	r5, r1, #3
 80076de:	f025 0503 	bic.w	r5, r5, #3
 80076e2:	3508      	adds	r5, #8
 80076e4:	2d0c      	cmp	r5, #12
 80076e6:	bf38      	it	cc
 80076e8:	250c      	movcc	r5, #12
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	4607      	mov	r7, r0
 80076ee:	db01      	blt.n	80076f4 <_malloc_r+0x1c>
 80076f0:	42a9      	cmp	r1, r5
 80076f2:	d905      	bls.n	8007700 <_malloc_r+0x28>
 80076f4:	230c      	movs	r3, #12
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	2600      	movs	r6, #0
 80076fa:	4630      	mov	r0, r6
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	4e2e      	ldr	r6, [pc, #184]	; (80077bc <_malloc_r+0xe4>)
 8007702:	f000 fc85 	bl	8008010 <__malloc_lock>
 8007706:	6833      	ldr	r3, [r6, #0]
 8007708:	461c      	mov	r4, r3
 800770a:	bb34      	cbnz	r4, 800775a <_malloc_r+0x82>
 800770c:	4629      	mov	r1, r5
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff ffc2 	bl	8007698 <sbrk_aligned>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	4604      	mov	r4, r0
 8007718:	d14d      	bne.n	80077b6 <_malloc_r+0xde>
 800771a:	6834      	ldr	r4, [r6, #0]
 800771c:	4626      	mov	r6, r4
 800771e:	2e00      	cmp	r6, #0
 8007720:	d140      	bne.n	80077a4 <_malloc_r+0xcc>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	4631      	mov	r1, r6
 8007726:	4638      	mov	r0, r7
 8007728:	eb04 0803 	add.w	r8, r4, r3
 800772c:	f000 f940 	bl	80079b0 <_sbrk_r>
 8007730:	4580      	cmp	r8, r0
 8007732:	d13a      	bne.n	80077aa <_malloc_r+0xd2>
 8007734:	6821      	ldr	r1, [r4, #0]
 8007736:	3503      	adds	r5, #3
 8007738:	1a6d      	subs	r5, r5, r1
 800773a:	f025 0503 	bic.w	r5, r5, #3
 800773e:	3508      	adds	r5, #8
 8007740:	2d0c      	cmp	r5, #12
 8007742:	bf38      	it	cc
 8007744:	250c      	movcc	r5, #12
 8007746:	4629      	mov	r1, r5
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ffa5 	bl	8007698 <sbrk_aligned>
 800774e:	3001      	adds	r0, #1
 8007750:	d02b      	beq.n	80077aa <_malloc_r+0xd2>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	442b      	add	r3, r5
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	e00e      	b.n	8007778 <_malloc_r+0xa0>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	1b52      	subs	r2, r2, r5
 800775e:	d41e      	bmi.n	800779e <_malloc_r+0xc6>
 8007760:	2a0b      	cmp	r2, #11
 8007762:	d916      	bls.n	8007792 <_malloc_r+0xba>
 8007764:	1961      	adds	r1, r4, r5
 8007766:	42a3      	cmp	r3, r4
 8007768:	6025      	str	r5, [r4, #0]
 800776a:	bf18      	it	ne
 800776c:	6059      	strne	r1, [r3, #4]
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	bf08      	it	eq
 8007772:	6031      	streq	r1, [r6, #0]
 8007774:	5162      	str	r2, [r4, r5]
 8007776:	604b      	str	r3, [r1, #4]
 8007778:	4638      	mov	r0, r7
 800777a:	f104 060b 	add.w	r6, r4, #11
 800777e:	f000 fc4d 	bl	800801c <__malloc_unlock>
 8007782:	f026 0607 	bic.w	r6, r6, #7
 8007786:	1d23      	adds	r3, r4, #4
 8007788:	1af2      	subs	r2, r6, r3
 800778a:	d0b6      	beq.n	80076fa <_malloc_r+0x22>
 800778c:	1b9b      	subs	r3, r3, r6
 800778e:	50a3      	str	r3, [r4, r2]
 8007790:	e7b3      	b.n	80076fa <_malloc_r+0x22>
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	42a3      	cmp	r3, r4
 8007796:	bf0c      	ite	eq
 8007798:	6032      	streq	r2, [r6, #0]
 800779a:	605a      	strne	r2, [r3, #4]
 800779c:	e7ec      	b.n	8007778 <_malloc_r+0xa0>
 800779e:	4623      	mov	r3, r4
 80077a0:	6864      	ldr	r4, [r4, #4]
 80077a2:	e7b2      	b.n	800770a <_malloc_r+0x32>
 80077a4:	4634      	mov	r4, r6
 80077a6:	6876      	ldr	r6, [r6, #4]
 80077a8:	e7b9      	b.n	800771e <_malloc_r+0x46>
 80077aa:	230c      	movs	r3, #12
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 fc34 	bl	800801c <__malloc_unlock>
 80077b4:	e7a1      	b.n	80076fa <_malloc_r+0x22>
 80077b6:	6025      	str	r5, [r4, #0]
 80077b8:	e7de      	b.n	8007778 <_malloc_r+0xa0>
 80077ba:	bf00      	nop
 80077bc:	20010bac 	.word	0x20010bac

080077c0 <iprintf>:
 80077c0:	b40f      	push	{r0, r1, r2, r3}
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <iprintf+0x2c>)
 80077c4:	b513      	push	{r0, r1, r4, lr}
 80077c6:	681c      	ldr	r4, [r3, #0]
 80077c8:	b124      	cbz	r4, 80077d4 <iprintf+0x14>
 80077ca:	69a3      	ldr	r3, [r4, #24]
 80077cc:	b913      	cbnz	r3, 80077d4 <iprintf+0x14>
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7ff fe86 	bl	80074e0 <__sinit>
 80077d4:	ab05      	add	r3, sp, #20
 80077d6:	9a04      	ldr	r2, [sp, #16]
 80077d8:	68a1      	ldr	r1, [r4, #8]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fdf5 	bl	80083cc <_vfiprintf_r>
 80077e2:	b002      	add	sp, #8
 80077e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e8:	b004      	add	sp, #16
 80077ea:	4770      	bx	lr
 80077ec:	2000001c 	.word	0x2000001c

080077f0 <_puts_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	460e      	mov	r6, r1
 80077f4:	4605      	mov	r5, r0
 80077f6:	b118      	cbz	r0, 8007800 <_puts_r+0x10>
 80077f8:	6983      	ldr	r3, [r0, #24]
 80077fa:	b90b      	cbnz	r3, 8007800 <_puts_r+0x10>
 80077fc:	f7ff fe70 	bl	80074e0 <__sinit>
 8007800:	69ab      	ldr	r3, [r5, #24]
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	b913      	cbnz	r3, 800780c <_puts_r+0x1c>
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff fe6a 	bl	80074e0 <__sinit>
 800780c:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <_puts_r+0xd0>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d120      	bne.n	8007854 <_puts_r+0x64>
 8007812:	686c      	ldr	r4, [r5, #4]
 8007814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d405      	bmi.n	8007826 <_puts_r+0x36>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	0598      	lsls	r0, r3, #22
 800781e:	d402      	bmi.n	8007826 <_puts_r+0x36>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f7ff ff20 	bl	8007666 <__retarget_lock_acquire_recursive>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	0719      	lsls	r1, r3, #28
 800782a:	d51d      	bpl.n	8007868 <_puts_r+0x78>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	b1db      	cbz	r3, 8007868 <_puts_r+0x78>
 8007830:	3e01      	subs	r6, #1
 8007832:	68a3      	ldr	r3, [r4, #8]
 8007834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007838:	3b01      	subs	r3, #1
 800783a:	60a3      	str	r3, [r4, #8]
 800783c:	bb39      	cbnz	r1, 800788e <_puts_r+0x9e>
 800783e:	2b00      	cmp	r3, #0
 8007840:	da38      	bge.n	80078b4 <_puts_r+0xc4>
 8007842:	4622      	mov	r2, r4
 8007844:	210a      	movs	r1, #10
 8007846:	4628      	mov	r0, r5
 8007848:	f000 f9c6 	bl	8007bd8 <__swbuf_r>
 800784c:	3001      	adds	r0, #1
 800784e:	d011      	beq.n	8007874 <_puts_r+0x84>
 8007850:	250a      	movs	r5, #10
 8007852:	e011      	b.n	8007878 <_puts_r+0x88>
 8007854:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <_puts_r+0xd4>)
 8007856:	429c      	cmp	r4, r3
 8007858:	d101      	bne.n	800785e <_puts_r+0x6e>
 800785a:	68ac      	ldr	r4, [r5, #8]
 800785c:	e7da      	b.n	8007814 <_puts_r+0x24>
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <_puts_r+0xd8>)
 8007860:	429c      	cmp	r4, r3
 8007862:	bf08      	it	eq
 8007864:	68ec      	ldreq	r4, [r5, #12]
 8007866:	e7d5      	b.n	8007814 <_puts_r+0x24>
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 fa18 	bl	8007ca0 <__swsetup_r>
 8007870:	2800      	cmp	r0, #0
 8007872:	d0dd      	beq.n	8007830 <_puts_r+0x40>
 8007874:	f04f 35ff 	mov.w	r5, #4294967295
 8007878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d405      	bmi.n	800788a <_puts_r+0x9a>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d402      	bmi.n	800788a <_puts_r+0x9a>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f7ff feef 	bl	8007668 <__retarget_lock_release_recursive>
 800788a:	4628      	mov	r0, r5
 800788c:	bd70      	pop	{r4, r5, r6, pc}
 800788e:	2b00      	cmp	r3, #0
 8007890:	da04      	bge.n	800789c <_puts_r+0xac>
 8007892:	69a2      	ldr	r2, [r4, #24]
 8007894:	429a      	cmp	r2, r3
 8007896:	dc06      	bgt.n	80078a6 <_puts_r+0xb6>
 8007898:	290a      	cmp	r1, #10
 800789a:	d004      	beq.n	80078a6 <_puts_r+0xb6>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	e7c5      	b.n	8007832 <_puts_r+0x42>
 80078a6:	4622      	mov	r2, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 f995 	bl	8007bd8 <__swbuf_r>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d1bf      	bne.n	8007832 <_puts_r+0x42>
 80078b2:	e7df      	b.n	8007874 <_puts_r+0x84>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	250a      	movs	r5, #10
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	701d      	strb	r5, [r3, #0]
 80078be:	e7db      	b.n	8007878 <_puts_r+0x88>
 80078c0:	08008e90 	.word	0x08008e90
 80078c4:	08008eb0 	.word	0x08008eb0
 80078c8:	08008e70 	.word	0x08008e70

080078cc <puts>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <puts+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7ff bf8d 	b.w	80077f0 <_puts_r>
 80078d6:	bf00      	nop
 80078d8:	2000001c 	.word	0x2000001c

080078dc <cleanup_glue>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	460c      	mov	r4, r1
 80078e0:	6809      	ldr	r1, [r1, #0]
 80078e2:	4605      	mov	r5, r0
 80078e4:	b109      	cbz	r1, 80078ea <cleanup_glue+0xe>
 80078e6:	f7ff fff9 	bl	80078dc <cleanup_glue>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f2:	f000 bb99 	b.w	8008028 <_free_r>
	...

080078f8 <_reclaim_reent>:
 80078f8:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <_reclaim_reent+0xb4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4283      	cmp	r3, r0
 80078fe:	b570      	push	{r4, r5, r6, lr}
 8007900:	4604      	mov	r4, r0
 8007902:	d051      	beq.n	80079a8 <_reclaim_reent+0xb0>
 8007904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007906:	b143      	cbz	r3, 800791a <_reclaim_reent+0x22>
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d14a      	bne.n	80079a4 <_reclaim_reent+0xac>
 800790e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	b111      	cbz	r1, 800791a <_reclaim_reent+0x22>
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fb87 	bl	8008028 <_free_r>
 800791a:	6961      	ldr	r1, [r4, #20]
 800791c:	b111      	cbz	r1, 8007924 <_reclaim_reent+0x2c>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb82 	bl	8008028 <_free_r>
 8007924:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007926:	b111      	cbz	r1, 800792e <_reclaim_reent+0x36>
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fb7d 	bl	8008028 <_free_r>
 800792e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007930:	b111      	cbz	r1, 8007938 <_reclaim_reent+0x40>
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fb78 	bl	8008028 <_free_r>
 8007938:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800793a:	b111      	cbz	r1, 8007942 <_reclaim_reent+0x4a>
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fb73 	bl	8008028 <_free_r>
 8007942:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007944:	b111      	cbz	r1, 800794c <_reclaim_reent+0x54>
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fb6e 	bl	8008028 <_free_r>
 800794c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800794e:	b111      	cbz	r1, 8007956 <_reclaim_reent+0x5e>
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fb69 	bl	8008028 <_free_r>
 8007956:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007958:	b111      	cbz	r1, 8007960 <_reclaim_reent+0x68>
 800795a:	4620      	mov	r0, r4
 800795c:	f000 fb64 	bl	8008028 <_free_r>
 8007960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007962:	b111      	cbz	r1, 800796a <_reclaim_reent+0x72>
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fb5f 	bl	8008028 <_free_r>
 800796a:	69a3      	ldr	r3, [r4, #24]
 800796c:	b1e3      	cbz	r3, 80079a8 <_reclaim_reent+0xb0>
 800796e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007970:	4620      	mov	r0, r4
 8007972:	4798      	blx	r3
 8007974:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007976:	b1b9      	cbz	r1, 80079a8 <_reclaim_reent+0xb0>
 8007978:	4620      	mov	r0, r4
 800797a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800797e:	f7ff bfad 	b.w	80078dc <cleanup_glue>
 8007982:	5949      	ldr	r1, [r1, r5]
 8007984:	b941      	cbnz	r1, 8007998 <_reclaim_reent+0xa0>
 8007986:	3504      	adds	r5, #4
 8007988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798a:	2d80      	cmp	r5, #128	; 0x80
 800798c:	68d9      	ldr	r1, [r3, #12]
 800798e:	d1f8      	bne.n	8007982 <_reclaim_reent+0x8a>
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fb49 	bl	8008028 <_free_r>
 8007996:	e7ba      	b.n	800790e <_reclaim_reent+0x16>
 8007998:	680e      	ldr	r6, [r1, #0]
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fb44 	bl	8008028 <_free_r>
 80079a0:	4631      	mov	r1, r6
 80079a2:	e7ef      	b.n	8007984 <_reclaim_reent+0x8c>
 80079a4:	2500      	movs	r5, #0
 80079a6:	e7ef      	b.n	8007988 <_reclaim_reent+0x90>
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
 80079aa:	bf00      	nop
 80079ac:	2000001c 	.word	0x2000001c

080079b0 <_sbrk_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d06      	ldr	r5, [pc, #24]	; (80079cc <_sbrk_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7fa f8a2 	bl	8001b04 <_sbrk>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_sbrk_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_sbrk_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	20010bb4 	.word	0x20010bb4

080079d0 <sniprintf>:
 80079d0:	b40c      	push	{r2, r3}
 80079d2:	b530      	push	{r4, r5, lr}
 80079d4:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <sniprintf+0x64>)
 80079d6:	1e0c      	subs	r4, r1, #0
 80079d8:	681d      	ldr	r5, [r3, #0]
 80079da:	b09d      	sub	sp, #116	; 0x74
 80079dc:	da08      	bge.n	80079f0 <sniprintf+0x20>
 80079de:	238b      	movs	r3, #139	; 0x8b
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	b01d      	add	sp, #116	; 0x74
 80079e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ec:	b002      	add	sp, #8
 80079ee:	4770      	bx	lr
 80079f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079f8:	bf14      	ite	ne
 80079fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079fe:	4623      	moveq	r3, r4
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	9307      	str	r3, [sp, #28]
 8007a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a08:	9002      	str	r0, [sp, #8]
 8007a0a:	9006      	str	r0, [sp, #24]
 8007a0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a12:	ab21      	add	r3, sp, #132	; 0x84
 8007a14:	a902      	add	r1, sp, #8
 8007a16:	4628      	mov	r0, r5
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f000 fbad 	bl	8008178 <_svfiprintf_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	bfbc      	itt	lt
 8007a22:	238b      	movlt	r3, #139	; 0x8b
 8007a24:	602b      	strlt	r3, [r5, #0]
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	d0dd      	beq.n	80079e6 <sniprintf+0x16>
 8007a2a:	9b02      	ldr	r3, [sp, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e7d9      	b.n	80079e6 <sniprintf+0x16>
 8007a32:	bf00      	nop
 8007a34:	2000001c 	.word	0x2000001c

08007a38 <__sread>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	f000 ff88 	bl	8008954 <_read_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	bfab      	itete	ge
 8007a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a4c:	181b      	addge	r3, r3, r0
 8007a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a52:	bfac      	ite	ge
 8007a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a56:	81a3      	strhlt	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__swrite>:
 8007a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	461f      	mov	r7, r3
 8007a60:	898b      	ldrh	r3, [r1, #12]
 8007a62:	05db      	lsls	r3, r3, #23
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4616      	mov	r6, r2
 8007a6a:	d505      	bpl.n	8007a78 <__swrite+0x1e>
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	2302      	movs	r3, #2
 8007a72:	2200      	movs	r2, #0
 8007a74:	f000 fa54 	bl	8007f20 <_lseek_r>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	4628      	mov	r0, r5
 8007a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	f000 b8f5 	b.w	8007c7c <_write_r>

08007a92 <__sseek>:
 8007a92:	b510      	push	{r4, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9a:	f000 fa41 	bl	8007f20 <_lseek_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	bf15      	itete	ne
 8007aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aae:	81a3      	strheq	r3, [r4, #12]
 8007ab0:	bf18      	it	ne
 8007ab2:	81a3      	strhne	r3, [r4, #12]
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <__sclose>:
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 b95f 	b.w	8007d7c <_close_r>
	...

08007ac0 <_strtol_l.constprop.0>:
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac6:	d001      	beq.n	8007acc <_strtol_l.constprop.0+0xc>
 8007ac8:	2b24      	cmp	r3, #36	; 0x24
 8007aca:	d906      	bls.n	8007ada <_strtol_l.constprop.0+0x1a>
 8007acc:	f7ff fcaa 	bl	8007424 <__errno>
 8007ad0:	2316      	movs	r3, #22
 8007ad2:	6003      	str	r3, [r0, #0]
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007bc0 <_strtol_l.constprop.0+0x100>
 8007ade:	460d      	mov	r5, r1
 8007ae0:	462e      	mov	r6, r5
 8007ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aea:	f017 0708 	ands.w	r7, r7, #8
 8007aee:	d1f7      	bne.n	8007ae0 <_strtol_l.constprop.0+0x20>
 8007af0:	2c2d      	cmp	r4, #45	; 0x2d
 8007af2:	d132      	bne.n	8007b5a <_strtol_l.constprop.0+0x9a>
 8007af4:	782c      	ldrb	r4, [r5, #0]
 8007af6:	2701      	movs	r7, #1
 8007af8:	1cb5      	adds	r5, r6, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d05b      	beq.n	8007bb6 <_strtol_l.constprop.0+0xf6>
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d109      	bne.n	8007b16 <_strtol_l.constprop.0+0x56>
 8007b02:	2c30      	cmp	r4, #48	; 0x30
 8007b04:	d107      	bne.n	8007b16 <_strtol_l.constprop.0+0x56>
 8007b06:	782c      	ldrb	r4, [r5, #0]
 8007b08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b0c:	2c58      	cmp	r4, #88	; 0x58
 8007b0e:	d14d      	bne.n	8007bac <_strtol_l.constprop.0+0xec>
 8007b10:	786c      	ldrb	r4, [r5, #1]
 8007b12:	2310      	movs	r3, #16
 8007b14:	3502      	adds	r5, #2
 8007b16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b1e:	f04f 0c00 	mov.w	ip, #0
 8007b22:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b26:	4666      	mov	r6, ip
 8007b28:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b30:	f1be 0f09 	cmp.w	lr, #9
 8007b34:	d816      	bhi.n	8007b64 <_strtol_l.constprop.0+0xa4>
 8007b36:	4674      	mov	r4, lr
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	dd24      	ble.n	8007b86 <_strtol_l.constprop.0+0xc6>
 8007b3c:	f1bc 0f00 	cmp.w	ip, #0
 8007b40:	db1e      	blt.n	8007b80 <_strtol_l.constprop.0+0xc0>
 8007b42:	45b1      	cmp	r9, r6
 8007b44:	d31c      	bcc.n	8007b80 <_strtol_l.constprop.0+0xc0>
 8007b46:	d101      	bne.n	8007b4c <_strtol_l.constprop.0+0x8c>
 8007b48:	45a2      	cmp	sl, r4
 8007b4a:	db19      	blt.n	8007b80 <_strtol_l.constprop.0+0xc0>
 8007b4c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b50:	f04f 0c01 	mov.w	ip, #1
 8007b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b58:	e7e8      	b.n	8007b2c <_strtol_l.constprop.0+0x6c>
 8007b5a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b5c:	bf04      	itt	eq
 8007b5e:	782c      	ldrbeq	r4, [r5, #0]
 8007b60:	1cb5      	addeq	r5, r6, #2
 8007b62:	e7ca      	b.n	8007afa <_strtol_l.constprop.0+0x3a>
 8007b64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b68:	f1be 0f19 	cmp.w	lr, #25
 8007b6c:	d801      	bhi.n	8007b72 <_strtol_l.constprop.0+0xb2>
 8007b6e:	3c37      	subs	r4, #55	; 0x37
 8007b70:	e7e2      	b.n	8007b38 <_strtol_l.constprop.0+0x78>
 8007b72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b76:	f1be 0f19 	cmp.w	lr, #25
 8007b7a:	d804      	bhi.n	8007b86 <_strtol_l.constprop.0+0xc6>
 8007b7c:	3c57      	subs	r4, #87	; 0x57
 8007b7e:	e7db      	b.n	8007b38 <_strtol_l.constprop.0+0x78>
 8007b80:	f04f 3cff 	mov.w	ip, #4294967295
 8007b84:	e7e6      	b.n	8007b54 <_strtol_l.constprop.0+0x94>
 8007b86:	f1bc 0f00 	cmp.w	ip, #0
 8007b8a:	da05      	bge.n	8007b98 <_strtol_l.constprop.0+0xd8>
 8007b8c:	2322      	movs	r3, #34	; 0x22
 8007b8e:	6003      	str	r3, [r0, #0]
 8007b90:	4646      	mov	r6, r8
 8007b92:	b942      	cbnz	r2, 8007ba6 <_strtol_l.constprop.0+0xe6>
 8007b94:	4630      	mov	r0, r6
 8007b96:	e79e      	b.n	8007ad6 <_strtol_l.constprop.0+0x16>
 8007b98:	b107      	cbz	r7, 8007b9c <_strtol_l.constprop.0+0xdc>
 8007b9a:	4276      	negs	r6, r6
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d0f9      	beq.n	8007b94 <_strtol_l.constprop.0+0xd4>
 8007ba0:	f1bc 0f00 	cmp.w	ip, #0
 8007ba4:	d000      	beq.n	8007ba8 <_strtol_l.constprop.0+0xe8>
 8007ba6:	1e69      	subs	r1, r5, #1
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	e7f3      	b.n	8007b94 <_strtol_l.constprop.0+0xd4>
 8007bac:	2430      	movs	r4, #48	; 0x30
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1b1      	bne.n	8007b16 <_strtol_l.constprop.0+0x56>
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	e7af      	b.n	8007b16 <_strtol_l.constprop.0+0x56>
 8007bb6:	2c30      	cmp	r4, #48	; 0x30
 8007bb8:	d0a5      	beq.n	8007b06 <_strtol_l.constprop.0+0x46>
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e7ab      	b.n	8007b16 <_strtol_l.constprop.0+0x56>
 8007bbe:	bf00      	nop
 8007bc0:	08008ed5 	.word	0x08008ed5

08007bc4 <strtol>:
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	4601      	mov	r1, r0
 8007bca:	4802      	ldr	r0, [pc, #8]	; (8007bd4 <strtol+0x10>)
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f7ff bf77 	b.w	8007ac0 <_strtol_l.constprop.0>
 8007bd2:	bf00      	nop
 8007bd4:	2000001c 	.word	0x2000001c

08007bd8 <__swbuf_r>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	460e      	mov	r6, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	4605      	mov	r5, r0
 8007be0:	b118      	cbz	r0, 8007bea <__swbuf_r+0x12>
 8007be2:	6983      	ldr	r3, [r0, #24]
 8007be4:	b90b      	cbnz	r3, 8007bea <__swbuf_r+0x12>
 8007be6:	f7ff fc7b 	bl	80074e0 <__sinit>
 8007bea:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <__swbuf_r+0x98>)
 8007bec:	429c      	cmp	r4, r3
 8007bee:	d12b      	bne.n	8007c48 <__swbuf_r+0x70>
 8007bf0:	686c      	ldr	r4, [r5, #4]
 8007bf2:	69a3      	ldr	r3, [r4, #24]
 8007bf4:	60a3      	str	r3, [r4, #8]
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	071a      	lsls	r2, r3, #28
 8007bfa:	d52f      	bpl.n	8007c5c <__swbuf_r+0x84>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	b36b      	cbz	r3, 8007c5c <__swbuf_r+0x84>
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	1ac0      	subs	r0, r0, r3
 8007c06:	6963      	ldr	r3, [r4, #20]
 8007c08:	b2f6      	uxtb	r6, r6
 8007c0a:	4283      	cmp	r3, r0
 8007c0c:	4637      	mov	r7, r6
 8007c0e:	dc04      	bgt.n	8007c1a <__swbuf_r+0x42>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f948 	bl	8007ea8 <_fflush_r>
 8007c18:	bb30      	cbnz	r0, 8007c68 <__swbuf_r+0x90>
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	60a3      	str	r3, [r4, #8]
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	6022      	str	r2, [r4, #0]
 8007c26:	701e      	strb	r6, [r3, #0]
 8007c28:	6963      	ldr	r3, [r4, #20]
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	4283      	cmp	r3, r0
 8007c2e:	d004      	beq.n	8007c3a <__swbuf_r+0x62>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	07db      	lsls	r3, r3, #31
 8007c34:	d506      	bpl.n	8007c44 <__swbuf_r+0x6c>
 8007c36:	2e0a      	cmp	r6, #10
 8007c38:	d104      	bne.n	8007c44 <__swbuf_r+0x6c>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f933 	bl	8007ea8 <_fflush_r>
 8007c42:	b988      	cbnz	r0, 8007c68 <__swbuf_r+0x90>
 8007c44:	4638      	mov	r0, r7
 8007c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <__swbuf_r+0x9c>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	d101      	bne.n	8007c52 <__swbuf_r+0x7a>
 8007c4e:	68ac      	ldr	r4, [r5, #8]
 8007c50:	e7cf      	b.n	8007bf2 <__swbuf_r+0x1a>
 8007c52:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <__swbuf_r+0xa0>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	bf08      	it	eq
 8007c58:	68ec      	ldreq	r4, [r5, #12]
 8007c5a:	e7ca      	b.n	8007bf2 <__swbuf_r+0x1a>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 f81e 	bl	8007ca0 <__swsetup_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0cb      	beq.n	8007c00 <__swbuf_r+0x28>
 8007c68:	f04f 37ff 	mov.w	r7, #4294967295
 8007c6c:	e7ea      	b.n	8007c44 <__swbuf_r+0x6c>
 8007c6e:	bf00      	nop
 8007c70:	08008e90 	.word	0x08008e90
 8007c74:	08008eb0 	.word	0x08008eb0
 8007c78:	08008e70 	.word	0x08008e70

08007c7c <_write_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_write_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7f9 fee9 	bl	8001a62 <_write>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_write_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_write_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20010bb4 	.word	0x20010bb4

08007ca0 <__swsetup_r>:
 8007ca0:	4b32      	ldr	r3, [pc, #200]	; (8007d6c <__swsetup_r+0xcc>)
 8007ca2:	b570      	push	{r4, r5, r6, lr}
 8007ca4:	681d      	ldr	r5, [r3, #0]
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	b125      	cbz	r5, 8007cb6 <__swsetup_r+0x16>
 8007cac:	69ab      	ldr	r3, [r5, #24]
 8007cae:	b913      	cbnz	r3, 8007cb6 <__swsetup_r+0x16>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f7ff fc15 	bl	80074e0 <__sinit>
 8007cb6:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <__swsetup_r+0xd0>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d10f      	bne.n	8007cdc <__swsetup_r+0x3c>
 8007cbc:	686c      	ldr	r4, [r5, #4]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc4:	0719      	lsls	r1, r3, #28
 8007cc6:	d42c      	bmi.n	8007d22 <__swsetup_r+0x82>
 8007cc8:	06dd      	lsls	r5, r3, #27
 8007cca:	d411      	bmi.n	8007cf0 <__swsetup_r+0x50>
 8007ccc:	2309      	movs	r3, #9
 8007cce:	6033      	str	r3, [r6, #0]
 8007cd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cda:	e03e      	b.n	8007d5a <__swsetup_r+0xba>
 8007cdc:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <__swsetup_r+0xd4>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d101      	bne.n	8007ce6 <__swsetup_r+0x46>
 8007ce2:	68ac      	ldr	r4, [r5, #8]
 8007ce4:	e7eb      	b.n	8007cbe <__swsetup_r+0x1e>
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <__swsetup_r+0xd8>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	bf08      	it	eq
 8007cec:	68ec      	ldreq	r4, [r5, #12]
 8007cee:	e7e6      	b.n	8007cbe <__swsetup_r+0x1e>
 8007cf0:	0758      	lsls	r0, r3, #29
 8007cf2:	d512      	bpl.n	8007d1a <__swsetup_r+0x7a>
 8007cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cf6:	b141      	cbz	r1, 8007d0a <__swsetup_r+0x6a>
 8007cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	d002      	beq.n	8007d06 <__swsetup_r+0x66>
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f991 	bl	8008028 <_free_r>
 8007d06:	2300      	movs	r3, #0
 8007d08:	6363      	str	r3, [r4, #52]	; 0x34
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	2300      	movs	r3, #0
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f043 0308 	orr.w	r3, r3, #8
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	b94b      	cbnz	r3, 8007d3a <__swsetup_r+0x9a>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d30:	d003      	beq.n	8007d3a <__swsetup_r+0x9a>
 8007d32:	4621      	mov	r1, r4
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 f92b 	bl	8007f90 <__smakebuf_r>
 8007d3a:	89a0      	ldrh	r0, [r4, #12]
 8007d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d40:	f010 0301 	ands.w	r3, r0, #1
 8007d44:	d00a      	beq.n	8007d5c <__swsetup_r+0xbc>
 8007d46:	2300      	movs	r3, #0
 8007d48:	60a3      	str	r3, [r4, #8]
 8007d4a:	6963      	ldr	r3, [r4, #20]
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	61a3      	str	r3, [r4, #24]
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	b943      	cbnz	r3, 8007d66 <__swsetup_r+0xc6>
 8007d54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d58:	d1ba      	bne.n	8007cd0 <__swsetup_r+0x30>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	0781      	lsls	r1, r0, #30
 8007d5e:	bf58      	it	pl
 8007d60:	6963      	ldrpl	r3, [r4, #20]
 8007d62:	60a3      	str	r3, [r4, #8]
 8007d64:	e7f4      	b.n	8007d50 <__swsetup_r+0xb0>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e7f7      	b.n	8007d5a <__swsetup_r+0xba>
 8007d6a:	bf00      	nop
 8007d6c:	2000001c 	.word	0x2000001c
 8007d70:	08008e90 	.word	0x08008e90
 8007d74:	08008eb0 	.word	0x08008eb0
 8007d78:	08008e70 	.word	0x08008e70

08007d7c <_close_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d06      	ldr	r5, [pc, #24]	; (8007d98 <_close_r+0x1c>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7f9 fe87 	bl	8001a9a <_close>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_close_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_close_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20010bb4 	.word	0x20010bb4

08007d9c <__sflush_r>:
 8007d9c:	898a      	ldrh	r2, [r1, #12]
 8007d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	0710      	lsls	r0, r2, #28
 8007da6:	460c      	mov	r4, r1
 8007da8:	d458      	bmi.n	8007e5c <__sflush_r+0xc0>
 8007daa:	684b      	ldr	r3, [r1, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dc05      	bgt.n	8007dbc <__sflush_r+0x20>
 8007db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dc02      	bgt.n	8007dbc <__sflush_r+0x20>
 8007db6:	2000      	movs	r0, #0
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	d0f9      	beq.n	8007db6 <__sflush_r+0x1a>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc8:	682f      	ldr	r7, [r5, #0]
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	d032      	beq.n	8007e34 <__sflush_r+0x98>
 8007dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	075a      	lsls	r2, r3, #29
 8007dd4:	d505      	bpl.n	8007de2 <__sflush_r+0x46>
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	1ac0      	subs	r0, r0, r3
 8007dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ddc:	b10b      	cbz	r3, 8007de2 <__sflush_r+0x46>
 8007dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de0:	1ac0      	subs	r0, r0, r3
 8007de2:	2300      	movs	r3, #0
 8007de4:	4602      	mov	r2, r0
 8007de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	4628      	mov	r0, r5
 8007dec:	47b0      	blx	r6
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	d106      	bne.n	8007e02 <__sflush_r+0x66>
 8007df4:	6829      	ldr	r1, [r5, #0]
 8007df6:	291d      	cmp	r1, #29
 8007df8:	d82c      	bhi.n	8007e54 <__sflush_r+0xb8>
 8007dfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ea4 <__sflush_r+0x108>)
 8007dfc:	40ca      	lsrs	r2, r1
 8007dfe:	07d6      	lsls	r6, r2, #31
 8007e00:	d528      	bpl.n	8007e54 <__sflush_r+0xb8>
 8007e02:	2200      	movs	r2, #0
 8007e04:	6062      	str	r2, [r4, #4]
 8007e06:	04d9      	lsls	r1, r3, #19
 8007e08:	6922      	ldr	r2, [r4, #16]
 8007e0a:	6022      	str	r2, [r4, #0]
 8007e0c:	d504      	bpl.n	8007e18 <__sflush_r+0x7c>
 8007e0e:	1c42      	adds	r2, r0, #1
 8007e10:	d101      	bne.n	8007e16 <__sflush_r+0x7a>
 8007e12:	682b      	ldr	r3, [r5, #0]
 8007e14:	b903      	cbnz	r3, 8007e18 <__sflush_r+0x7c>
 8007e16:	6560      	str	r0, [r4, #84]	; 0x54
 8007e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1a:	602f      	str	r7, [r5, #0]
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d0ca      	beq.n	8007db6 <__sflush_r+0x1a>
 8007e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e24:	4299      	cmp	r1, r3
 8007e26:	d002      	beq.n	8007e2e <__sflush_r+0x92>
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f8fd 	bl	8008028 <_free_r>
 8007e2e:	2000      	movs	r0, #0
 8007e30:	6360      	str	r0, [r4, #52]	; 0x34
 8007e32:	e7c1      	b.n	8007db8 <__sflush_r+0x1c>
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	2301      	movs	r3, #1
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b0      	blx	r6
 8007e3c:	1c41      	adds	r1, r0, #1
 8007e3e:	d1c7      	bne.n	8007dd0 <__sflush_r+0x34>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0c4      	beq.n	8007dd0 <__sflush_r+0x34>
 8007e46:	2b1d      	cmp	r3, #29
 8007e48:	d001      	beq.n	8007e4e <__sflush_r+0xb2>
 8007e4a:	2b16      	cmp	r3, #22
 8007e4c:	d101      	bne.n	8007e52 <__sflush_r+0xb6>
 8007e4e:	602f      	str	r7, [r5, #0]
 8007e50:	e7b1      	b.n	8007db6 <__sflush_r+0x1a>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	e7ad      	b.n	8007db8 <__sflush_r+0x1c>
 8007e5c:	690f      	ldr	r7, [r1, #16]
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	d0a9      	beq.n	8007db6 <__sflush_r+0x1a>
 8007e62:	0793      	lsls	r3, r2, #30
 8007e64:	680e      	ldr	r6, [r1, #0]
 8007e66:	bf08      	it	eq
 8007e68:	694b      	ldreq	r3, [r1, #20]
 8007e6a:	600f      	str	r7, [r1, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2300      	movne	r3, #0
 8007e70:	eba6 0807 	sub.w	r8, r6, r7
 8007e74:	608b      	str	r3, [r1, #8]
 8007e76:	f1b8 0f00 	cmp.w	r8, #0
 8007e7a:	dd9c      	ble.n	8007db6 <__sflush_r+0x1a>
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e80:	4643      	mov	r3, r8
 8007e82:	463a      	mov	r2, r7
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b0      	blx	r6
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dc06      	bgt.n	8007e9a <__sflush_r+0xfe>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	e78e      	b.n	8007db8 <__sflush_r+0x1c>
 8007e9a:	4407      	add	r7, r0
 8007e9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ea0:	e7e9      	b.n	8007e76 <__sflush_r+0xda>
 8007ea2:	bf00      	nop
 8007ea4:	20400001 	.word	0x20400001

08007ea8 <_fflush_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	4605      	mov	r5, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	b913      	cbnz	r3, 8007eb8 <_fflush_r+0x10>
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	b118      	cbz	r0, 8007ec2 <_fflush_r+0x1a>
 8007eba:	6983      	ldr	r3, [r0, #24]
 8007ebc:	b90b      	cbnz	r3, 8007ec2 <_fflush_r+0x1a>
 8007ebe:	f7ff fb0f 	bl	80074e0 <__sinit>
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <_fflush_r+0x6c>)
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d11b      	bne.n	8007f00 <_fflush_r+0x58>
 8007ec8:	686c      	ldr	r4, [r5, #4]
 8007eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0ef      	beq.n	8007eb2 <_fflush_r+0xa>
 8007ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ed4:	07d0      	lsls	r0, r2, #31
 8007ed6:	d404      	bmi.n	8007ee2 <_fflush_r+0x3a>
 8007ed8:	0599      	lsls	r1, r3, #22
 8007eda:	d402      	bmi.n	8007ee2 <_fflush_r+0x3a>
 8007edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ede:	f7ff fbc2 	bl	8007666 <__retarget_lock_acquire_recursive>
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	f7ff ff59 	bl	8007d9c <__sflush_r>
 8007eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eec:	07da      	lsls	r2, r3, #31
 8007eee:	4605      	mov	r5, r0
 8007ef0:	d4e0      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	059b      	lsls	r3, r3, #22
 8007ef6:	d4dd      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007efa:	f7ff fbb5 	bl	8007668 <__retarget_lock_release_recursive>
 8007efe:	e7d9      	b.n	8007eb4 <_fflush_r+0xc>
 8007f00:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <_fflush_r+0x70>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d101      	bne.n	8007f0a <_fflush_r+0x62>
 8007f06:	68ac      	ldr	r4, [r5, #8]
 8007f08:	e7df      	b.n	8007eca <_fflush_r+0x22>
 8007f0a:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <_fflush_r+0x74>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	bf08      	it	eq
 8007f10:	68ec      	ldreq	r4, [r5, #12]
 8007f12:	e7da      	b.n	8007eca <_fflush_r+0x22>
 8007f14:	08008e90 	.word	0x08008e90
 8007f18:	08008eb0 	.word	0x08008eb0
 8007f1c:	08008e70 	.word	0x08008e70

08007f20 <_lseek_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_lseek_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f9 fdda 	bl	8001ae8 <_lseek>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_lseek_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_lseek_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20010bb4 	.word	0x20010bb4

08007f44 <__swhatbuf_r>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	460e      	mov	r6, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	b096      	sub	sp, #88	; 0x58
 8007f50:	4614      	mov	r4, r2
 8007f52:	461d      	mov	r5, r3
 8007f54:	da08      	bge.n	8007f68 <__swhatbuf_r+0x24>
 8007f56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	602a      	str	r2, [r5, #0]
 8007f5e:	061a      	lsls	r2, r3, #24
 8007f60:	d410      	bmi.n	8007f84 <__swhatbuf_r+0x40>
 8007f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f66:	e00e      	b.n	8007f86 <__swhatbuf_r+0x42>
 8007f68:	466a      	mov	r2, sp
 8007f6a:	f000 fd05 	bl	8008978 <_fstat_r>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	dbf1      	blt.n	8007f56 <__swhatbuf_r+0x12>
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f7c:	425a      	negs	r2, r3
 8007f7e:	415a      	adcs	r2, r3
 8007f80:	602a      	str	r2, [r5, #0]
 8007f82:	e7ee      	b.n	8007f62 <__swhatbuf_r+0x1e>
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	2000      	movs	r0, #0
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	b016      	add	sp, #88	; 0x58
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f90 <__smakebuf_r>:
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f94:	079d      	lsls	r5, r3, #30
 8007f96:	4606      	mov	r6, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	d507      	bpl.n	8007fac <__smakebuf_r+0x1c>
 8007f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	6163      	str	r3, [r4, #20]
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	ab01      	add	r3, sp, #4
 8007fae:	466a      	mov	r2, sp
 8007fb0:	f7ff ffc8 	bl	8007f44 <__swhatbuf_r>
 8007fb4:	9900      	ldr	r1, [sp, #0]
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fb8d 	bl	80076d8 <_malloc_r>
 8007fbe:	b948      	cbnz	r0, 8007fd4 <__smakebuf_r+0x44>
 8007fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d4ef      	bmi.n	8007fa8 <__smakebuf_r+0x18>
 8007fc8:	f023 0303 	bic.w	r3, r3, #3
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e7e3      	b.n	8007f9c <__smakebuf_r+0xc>
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <__smakebuf_r+0x7c>)
 8007fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	6020      	str	r0, [r4, #0]
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	9b00      	ldr	r3, [sp, #0]
 8007fe4:	6163      	str	r3, [r4, #20]
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	6120      	str	r0, [r4, #16]
 8007fea:	b15b      	cbz	r3, 8008004 <__smakebuf_r+0x74>
 8007fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 fcd3 	bl	800899c <_isatty_r>
 8007ff6:	b128      	cbz	r0, 8008004 <__smakebuf_r+0x74>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	89a0      	ldrh	r0, [r4, #12]
 8008006:	4305      	orrs	r5, r0
 8008008:	81a5      	strh	r5, [r4, #12]
 800800a:	e7cd      	b.n	8007fa8 <__smakebuf_r+0x18>
 800800c:	08007479 	.word	0x08007479

08008010 <__malloc_lock>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__malloc_lock+0x8>)
 8008012:	f7ff bb28 	b.w	8007666 <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	20010ba8 	.word	0x20010ba8

0800801c <__malloc_unlock>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__malloc_unlock+0x8>)
 800801e:	f7ff bb23 	b.w	8007668 <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	20010ba8 	.word	0x20010ba8

08008028 <_free_r>:
 8008028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800802a:	2900      	cmp	r1, #0
 800802c:	d044      	beq.n	80080b8 <_free_r+0x90>
 800802e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008032:	9001      	str	r0, [sp, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f1a1 0404 	sub.w	r4, r1, #4
 800803a:	bfb8      	it	lt
 800803c:	18e4      	addlt	r4, r4, r3
 800803e:	f7ff ffe7 	bl	8008010 <__malloc_lock>
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <_free_r+0x94>)
 8008044:	9801      	ldr	r0, [sp, #4]
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	b933      	cbnz	r3, 8008058 <_free_r+0x30>
 800804a:	6063      	str	r3, [r4, #4]
 800804c:	6014      	str	r4, [r2, #0]
 800804e:	b003      	add	sp, #12
 8008050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008054:	f7ff bfe2 	b.w	800801c <__malloc_unlock>
 8008058:	42a3      	cmp	r3, r4
 800805a:	d908      	bls.n	800806e <_free_r+0x46>
 800805c:	6825      	ldr	r5, [r4, #0]
 800805e:	1961      	adds	r1, r4, r5
 8008060:	428b      	cmp	r3, r1
 8008062:	bf01      	itttt	eq
 8008064:	6819      	ldreq	r1, [r3, #0]
 8008066:	685b      	ldreq	r3, [r3, #4]
 8008068:	1949      	addeq	r1, r1, r5
 800806a:	6021      	streq	r1, [r4, #0]
 800806c:	e7ed      	b.n	800804a <_free_r+0x22>
 800806e:	461a      	mov	r2, r3
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b10b      	cbz	r3, 8008078 <_free_r+0x50>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d9fa      	bls.n	800806e <_free_r+0x46>
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	1855      	adds	r5, r2, r1
 800807c:	42a5      	cmp	r5, r4
 800807e:	d10b      	bne.n	8008098 <_free_r+0x70>
 8008080:	6824      	ldr	r4, [r4, #0]
 8008082:	4421      	add	r1, r4
 8008084:	1854      	adds	r4, r2, r1
 8008086:	42a3      	cmp	r3, r4
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	d1e0      	bne.n	800804e <_free_r+0x26>
 800808c:	681c      	ldr	r4, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	4421      	add	r1, r4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	e7da      	b.n	800804e <_free_r+0x26>
 8008098:	d902      	bls.n	80080a0 <_free_r+0x78>
 800809a:	230c      	movs	r3, #12
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	e7d6      	b.n	800804e <_free_r+0x26>
 80080a0:	6825      	ldr	r5, [r4, #0]
 80080a2:	1961      	adds	r1, r4, r5
 80080a4:	428b      	cmp	r3, r1
 80080a6:	bf04      	itt	eq
 80080a8:	6819      	ldreq	r1, [r3, #0]
 80080aa:	685b      	ldreq	r3, [r3, #4]
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	bf04      	itt	eq
 80080b0:	1949      	addeq	r1, r1, r5
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	6054      	str	r4, [r2, #4]
 80080b6:	e7ca      	b.n	800804e <_free_r+0x26>
 80080b8:	b003      	add	sp, #12
 80080ba:	bd30      	pop	{r4, r5, pc}
 80080bc:	20010bac 	.word	0x20010bac

080080c0 <__ssputs_r>:
 80080c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	688e      	ldr	r6, [r1, #8]
 80080c6:	429e      	cmp	r6, r3
 80080c8:	4682      	mov	sl, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	4690      	mov	r8, r2
 80080ce:	461f      	mov	r7, r3
 80080d0:	d838      	bhi.n	8008144 <__ssputs_r+0x84>
 80080d2:	898a      	ldrh	r2, [r1, #12]
 80080d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080d8:	d032      	beq.n	8008140 <__ssputs_r+0x80>
 80080da:	6825      	ldr	r5, [r4, #0]
 80080dc:	6909      	ldr	r1, [r1, #16]
 80080de:	eba5 0901 	sub.w	r9, r5, r1
 80080e2:	6965      	ldr	r5, [r4, #20]
 80080e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080ec:	3301      	adds	r3, #1
 80080ee:	444b      	add	r3, r9
 80080f0:	106d      	asrs	r5, r5, #1
 80080f2:	429d      	cmp	r5, r3
 80080f4:	bf38      	it	cc
 80080f6:	461d      	movcc	r5, r3
 80080f8:	0553      	lsls	r3, r2, #21
 80080fa:	d531      	bpl.n	8008160 <__ssputs_r+0xa0>
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7ff faeb 	bl	80076d8 <_malloc_r>
 8008102:	4606      	mov	r6, r0
 8008104:	b950      	cbnz	r0, 800811c <__ssputs_r+0x5c>
 8008106:	230c      	movs	r3, #12
 8008108:	f8ca 3000 	str.w	r3, [sl]
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811c:	6921      	ldr	r1, [r4, #16]
 800811e:	464a      	mov	r2, r9
 8008120:	f7ff faa3 	bl	800766a <memcpy>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800812a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	6126      	str	r6, [r4, #16]
 8008132:	6165      	str	r5, [r4, #20]
 8008134:	444e      	add	r6, r9
 8008136:	eba5 0509 	sub.w	r5, r5, r9
 800813a:	6026      	str	r6, [r4, #0]
 800813c:	60a5      	str	r5, [r4, #8]
 800813e:	463e      	mov	r6, r7
 8008140:	42be      	cmp	r6, r7
 8008142:	d900      	bls.n	8008146 <__ssputs_r+0x86>
 8008144:	463e      	mov	r6, r7
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	4632      	mov	r2, r6
 800814a:	4641      	mov	r1, r8
 800814c:	f000 fc36 	bl	80089bc <memmove>
 8008150:	68a3      	ldr	r3, [r4, #8]
 8008152:	1b9b      	subs	r3, r3, r6
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	4433      	add	r3, r6
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	2000      	movs	r0, #0
 800815e:	e7db      	b.n	8008118 <__ssputs_r+0x58>
 8008160:	462a      	mov	r2, r5
 8008162:	f000 fc45 	bl	80089f0 <_realloc_r>
 8008166:	4606      	mov	r6, r0
 8008168:	2800      	cmp	r0, #0
 800816a:	d1e1      	bne.n	8008130 <__ssputs_r+0x70>
 800816c:	6921      	ldr	r1, [r4, #16]
 800816e:	4650      	mov	r0, sl
 8008170:	f7ff ff5a 	bl	8008028 <_free_r>
 8008174:	e7c7      	b.n	8008106 <__ssputs_r+0x46>
	...

08008178 <_svfiprintf_r>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	4698      	mov	r8, r3
 800817e:	898b      	ldrh	r3, [r1, #12]
 8008180:	061b      	lsls	r3, r3, #24
 8008182:	b09d      	sub	sp, #116	; 0x74
 8008184:	4607      	mov	r7, r0
 8008186:	460d      	mov	r5, r1
 8008188:	4614      	mov	r4, r2
 800818a:	d50e      	bpl.n	80081aa <_svfiprintf_r+0x32>
 800818c:	690b      	ldr	r3, [r1, #16]
 800818e:	b963      	cbnz	r3, 80081aa <_svfiprintf_r+0x32>
 8008190:	2140      	movs	r1, #64	; 0x40
 8008192:	f7ff faa1 	bl	80076d8 <_malloc_r>
 8008196:	6028      	str	r0, [r5, #0]
 8008198:	6128      	str	r0, [r5, #16]
 800819a:	b920      	cbnz	r0, 80081a6 <_svfiprintf_r+0x2e>
 800819c:	230c      	movs	r3, #12
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e0d1      	b.n	800834a <_svfiprintf_r+0x1d2>
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	616b      	str	r3, [r5, #20]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9309      	str	r3, [sp, #36]	; 0x24
 80081ae:	2320      	movs	r3, #32
 80081b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081b8:	2330      	movs	r3, #48	; 0x30
 80081ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008364 <_svfiprintf_r+0x1ec>
 80081be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081c2:	f04f 0901 	mov.w	r9, #1
 80081c6:	4623      	mov	r3, r4
 80081c8:	469a      	mov	sl, r3
 80081ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ce:	b10a      	cbz	r2, 80081d4 <_svfiprintf_r+0x5c>
 80081d0:	2a25      	cmp	r2, #37	; 0x25
 80081d2:	d1f9      	bne.n	80081c8 <_svfiprintf_r+0x50>
 80081d4:	ebba 0b04 	subs.w	fp, sl, r4
 80081d8:	d00b      	beq.n	80081f2 <_svfiprintf_r+0x7a>
 80081da:	465b      	mov	r3, fp
 80081dc:	4622      	mov	r2, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ff6d 	bl	80080c0 <__ssputs_r>
 80081e6:	3001      	adds	r0, #1
 80081e8:	f000 80aa 	beq.w	8008340 <_svfiprintf_r+0x1c8>
 80081ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ee:	445a      	add	r2, fp
 80081f0:	9209      	str	r2, [sp, #36]	; 0x24
 80081f2:	f89a 3000 	ldrb.w	r3, [sl]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80a2 	beq.w	8008340 <_svfiprintf_r+0x1c8>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008206:	f10a 0a01 	add.w	sl, sl, #1
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	9307      	str	r3, [sp, #28]
 800820e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008212:	931a      	str	r3, [sp, #104]	; 0x68
 8008214:	4654      	mov	r4, sl
 8008216:	2205      	movs	r2, #5
 8008218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821c:	4851      	ldr	r0, [pc, #324]	; (8008364 <_svfiprintf_r+0x1ec>)
 800821e:	f7f7 fff7 	bl	8000210 <memchr>
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	b9d8      	cbnz	r0, 800825e <_svfiprintf_r+0xe6>
 8008226:	06d0      	lsls	r0, r2, #27
 8008228:	bf44      	itt	mi
 800822a:	2320      	movmi	r3, #32
 800822c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008230:	0711      	lsls	r1, r2, #28
 8008232:	bf44      	itt	mi
 8008234:	232b      	movmi	r3, #43	; 0x2b
 8008236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b2a      	cmp	r3, #42	; 0x2a
 8008240:	d015      	beq.n	800826e <_svfiprintf_r+0xf6>
 8008242:	9a07      	ldr	r2, [sp, #28]
 8008244:	4654      	mov	r4, sl
 8008246:	2000      	movs	r0, #0
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4621      	mov	r1, r4
 800824e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008252:	3b30      	subs	r3, #48	; 0x30
 8008254:	2b09      	cmp	r3, #9
 8008256:	d94e      	bls.n	80082f6 <_svfiprintf_r+0x17e>
 8008258:	b1b0      	cbz	r0, 8008288 <_svfiprintf_r+0x110>
 800825a:	9207      	str	r2, [sp, #28]
 800825c:	e014      	b.n	8008288 <_svfiprintf_r+0x110>
 800825e:	eba0 0308 	sub.w	r3, r0, r8
 8008262:	fa09 f303 	lsl.w	r3, r9, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	46a2      	mov	sl, r4
 800826c:	e7d2      	b.n	8008214 <_svfiprintf_r+0x9c>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	1d19      	adds	r1, r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	9103      	str	r1, [sp, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbb      	ittet	lt
 800827a:	425b      	neglt	r3, r3
 800827c:	f042 0202 	orrlt.w	r2, r2, #2
 8008280:	9307      	strge	r3, [sp, #28]
 8008282:	9307      	strlt	r3, [sp, #28]
 8008284:	bfb8      	it	lt
 8008286:	9204      	strlt	r2, [sp, #16]
 8008288:	7823      	ldrb	r3, [r4, #0]
 800828a:	2b2e      	cmp	r3, #46	; 0x2e
 800828c:	d10c      	bne.n	80082a8 <_svfiprintf_r+0x130>
 800828e:	7863      	ldrb	r3, [r4, #1]
 8008290:	2b2a      	cmp	r3, #42	; 0x2a
 8008292:	d135      	bne.n	8008300 <_svfiprintf_r+0x188>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	9203      	str	r2, [sp, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	bfb8      	it	lt
 80082a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80082a4:	3402      	adds	r4, #2
 80082a6:	9305      	str	r3, [sp, #20]
 80082a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008374 <_svfiprintf_r+0x1fc>
 80082ac:	7821      	ldrb	r1, [r4, #0]
 80082ae:	2203      	movs	r2, #3
 80082b0:	4650      	mov	r0, sl
 80082b2:	f7f7 ffad 	bl	8000210 <memchr>
 80082b6:	b140      	cbz	r0, 80082ca <_svfiprintf_r+0x152>
 80082b8:	2340      	movs	r3, #64	; 0x40
 80082ba:	eba0 000a 	sub.w	r0, r0, sl
 80082be:	fa03 f000 	lsl.w	r0, r3, r0
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	4303      	orrs	r3, r0
 80082c6:	3401      	adds	r4, #1
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	4826      	ldr	r0, [pc, #152]	; (8008368 <_svfiprintf_r+0x1f0>)
 80082d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d4:	2206      	movs	r2, #6
 80082d6:	f7f7 ff9b 	bl	8000210 <memchr>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d038      	beq.n	8008350 <_svfiprintf_r+0x1d8>
 80082de:	4b23      	ldr	r3, [pc, #140]	; (800836c <_svfiprintf_r+0x1f4>)
 80082e0:	bb1b      	cbnz	r3, 800832a <_svfiprintf_r+0x1b2>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3307      	adds	r3, #7
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	3308      	adds	r3, #8
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	4433      	add	r3, r6
 80082f2:	9309      	str	r3, [sp, #36]	; 0x24
 80082f4:	e767      	b.n	80081c6 <_svfiprintf_r+0x4e>
 80082f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fa:	460c      	mov	r4, r1
 80082fc:	2001      	movs	r0, #1
 80082fe:	e7a5      	b.n	800824c <_svfiprintf_r+0xd4>
 8008300:	2300      	movs	r3, #0
 8008302:	3401      	adds	r4, #1
 8008304:	9305      	str	r3, [sp, #20]
 8008306:	4619      	mov	r1, r3
 8008308:	f04f 0c0a 	mov.w	ip, #10
 800830c:	4620      	mov	r0, r4
 800830e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008312:	3a30      	subs	r2, #48	; 0x30
 8008314:	2a09      	cmp	r2, #9
 8008316:	d903      	bls.n	8008320 <_svfiprintf_r+0x1a8>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0c5      	beq.n	80082a8 <_svfiprintf_r+0x130>
 800831c:	9105      	str	r1, [sp, #20]
 800831e:	e7c3      	b.n	80082a8 <_svfiprintf_r+0x130>
 8008320:	fb0c 2101 	mla	r1, ip, r1, r2
 8008324:	4604      	mov	r4, r0
 8008326:	2301      	movs	r3, #1
 8008328:	e7f0      	b.n	800830c <_svfiprintf_r+0x194>
 800832a:	ab03      	add	r3, sp, #12
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	462a      	mov	r2, r5
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <_svfiprintf_r+0x1f8>)
 8008332:	a904      	add	r1, sp, #16
 8008334:	4638      	mov	r0, r7
 8008336:	f3af 8000 	nop.w
 800833a:	1c42      	adds	r2, r0, #1
 800833c:	4606      	mov	r6, r0
 800833e:	d1d6      	bne.n	80082ee <_svfiprintf_r+0x176>
 8008340:	89ab      	ldrh	r3, [r5, #12]
 8008342:	065b      	lsls	r3, r3, #25
 8008344:	f53f af2c 	bmi.w	80081a0 <_svfiprintf_r+0x28>
 8008348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834a:	b01d      	add	sp, #116	; 0x74
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	ab03      	add	r3, sp, #12
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	462a      	mov	r2, r5
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <_svfiprintf_r+0x1f8>)
 8008358:	a904      	add	r1, sp, #16
 800835a:	4638      	mov	r0, r7
 800835c:	f000 f9d4 	bl	8008708 <_printf_i>
 8008360:	e7eb      	b.n	800833a <_svfiprintf_r+0x1c2>
 8008362:	bf00      	nop
 8008364:	08008fd5 	.word	0x08008fd5
 8008368:	08008fdf 	.word	0x08008fdf
 800836c:	00000000 	.word	0x00000000
 8008370:	080080c1 	.word	0x080080c1
 8008374:	08008fdb 	.word	0x08008fdb

08008378 <__sfputc_r>:
 8008378:	6893      	ldr	r3, [r2, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	b410      	push	{r4}
 8008380:	6093      	str	r3, [r2, #8]
 8008382:	da08      	bge.n	8008396 <__sfputc_r+0x1e>
 8008384:	6994      	ldr	r4, [r2, #24]
 8008386:	42a3      	cmp	r3, r4
 8008388:	db01      	blt.n	800838e <__sfputc_r+0x16>
 800838a:	290a      	cmp	r1, #10
 800838c:	d103      	bne.n	8008396 <__sfputc_r+0x1e>
 800838e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008392:	f7ff bc21 	b.w	8007bd8 <__swbuf_r>
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	1c58      	adds	r0, r3, #1
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	7019      	strb	r1, [r3, #0]
 800839e:	4608      	mov	r0, r1
 80083a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <__sfputs_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	18d5      	adds	r5, r2, r3
 80083b0:	42ac      	cmp	r4, r5
 80083b2:	d101      	bne.n	80083b8 <__sfputs_r+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e007      	b.n	80083c8 <__sfputs_r+0x22>
 80083b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083bc:	463a      	mov	r2, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffda 	bl	8008378 <__sfputc_r>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f3      	bne.n	80083b0 <__sfputs_r+0xa>
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460d      	mov	r5, r1
 80083d2:	b09d      	sub	sp, #116	; 0x74
 80083d4:	4614      	mov	r4, r2
 80083d6:	4698      	mov	r8, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f7ff f87e 	bl	80074e0 <__sinit>
 80083e4:	4b89      	ldr	r3, [pc, #548]	; (800860c <_vfiprintf_r+0x240>)
 80083e6:	429d      	cmp	r5, r3
 80083e8:	d11b      	bne.n	8008422 <_vfiprintf_r+0x56>
 80083ea:	6875      	ldr	r5, [r6, #4]
 80083ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ee:	07d9      	lsls	r1, r3, #31
 80083f0:	d405      	bmi.n	80083fe <_vfiprintf_r+0x32>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	059a      	lsls	r2, r3, #22
 80083f6:	d402      	bmi.n	80083fe <_vfiprintf_r+0x32>
 80083f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fa:	f7ff f934 	bl	8007666 <__retarget_lock_acquire_recursive>
 80083fe:	89ab      	ldrh	r3, [r5, #12]
 8008400:	071b      	lsls	r3, r3, #28
 8008402:	d501      	bpl.n	8008408 <_vfiprintf_r+0x3c>
 8008404:	692b      	ldr	r3, [r5, #16]
 8008406:	b9eb      	cbnz	r3, 8008444 <_vfiprintf_r+0x78>
 8008408:	4629      	mov	r1, r5
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff fc48 	bl	8007ca0 <__swsetup_r>
 8008410:	b1c0      	cbz	r0, 8008444 <_vfiprintf_r+0x78>
 8008412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008414:	07dc      	lsls	r4, r3, #31
 8008416:	d50e      	bpl.n	8008436 <_vfiprintf_r+0x6a>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	b01d      	add	sp, #116	; 0x74
 800841e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008422:	4b7b      	ldr	r3, [pc, #492]	; (8008610 <_vfiprintf_r+0x244>)
 8008424:	429d      	cmp	r5, r3
 8008426:	d101      	bne.n	800842c <_vfiprintf_r+0x60>
 8008428:	68b5      	ldr	r5, [r6, #8]
 800842a:	e7df      	b.n	80083ec <_vfiprintf_r+0x20>
 800842c:	4b79      	ldr	r3, [pc, #484]	; (8008614 <_vfiprintf_r+0x248>)
 800842e:	429d      	cmp	r5, r3
 8008430:	bf08      	it	eq
 8008432:	68f5      	ldreq	r5, [r6, #12]
 8008434:	e7da      	b.n	80083ec <_vfiprintf_r+0x20>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	0598      	lsls	r0, r3, #22
 800843a:	d4ed      	bmi.n	8008418 <_vfiprintf_r+0x4c>
 800843c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843e:	f7ff f913 	bl	8007668 <__retarget_lock_release_recursive>
 8008442:	e7e9      	b.n	8008418 <_vfiprintf_r+0x4c>
 8008444:	2300      	movs	r3, #0
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	2320      	movs	r3, #32
 800844a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008452:	2330      	movs	r3, #48	; 0x30
 8008454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008618 <_vfiprintf_r+0x24c>
 8008458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800845c:	f04f 0901 	mov.w	r9, #1
 8008460:	4623      	mov	r3, r4
 8008462:	469a      	mov	sl, r3
 8008464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008468:	b10a      	cbz	r2, 800846e <_vfiprintf_r+0xa2>
 800846a:	2a25      	cmp	r2, #37	; 0x25
 800846c:	d1f9      	bne.n	8008462 <_vfiprintf_r+0x96>
 800846e:	ebba 0b04 	subs.w	fp, sl, r4
 8008472:	d00b      	beq.n	800848c <_vfiprintf_r+0xc0>
 8008474:	465b      	mov	r3, fp
 8008476:	4622      	mov	r2, r4
 8008478:	4629      	mov	r1, r5
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ff93 	bl	80083a6 <__sfputs_r>
 8008480:	3001      	adds	r0, #1
 8008482:	f000 80aa 	beq.w	80085da <_vfiprintf_r+0x20e>
 8008486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008488:	445a      	add	r2, fp
 800848a:	9209      	str	r2, [sp, #36]	; 0x24
 800848c:	f89a 3000 	ldrb.w	r3, [sl]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80a2 	beq.w	80085da <_vfiprintf_r+0x20e>
 8008496:	2300      	movs	r3, #0
 8008498:	f04f 32ff 	mov.w	r2, #4294967295
 800849c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a0:	f10a 0a01 	add.w	sl, sl, #1
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	9307      	str	r3, [sp, #28]
 80084a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ac:	931a      	str	r3, [sp, #104]	; 0x68
 80084ae:	4654      	mov	r4, sl
 80084b0:	2205      	movs	r2, #5
 80084b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b6:	4858      	ldr	r0, [pc, #352]	; (8008618 <_vfiprintf_r+0x24c>)
 80084b8:	f7f7 feaa 	bl	8000210 <memchr>
 80084bc:	9a04      	ldr	r2, [sp, #16]
 80084be:	b9d8      	cbnz	r0, 80084f8 <_vfiprintf_r+0x12c>
 80084c0:	06d1      	lsls	r1, r2, #27
 80084c2:	bf44      	itt	mi
 80084c4:	2320      	movmi	r3, #32
 80084c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ca:	0713      	lsls	r3, r2, #28
 80084cc:	bf44      	itt	mi
 80084ce:	232b      	movmi	r3, #43	; 0x2b
 80084d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d4:	f89a 3000 	ldrb.w	r3, [sl]
 80084d8:	2b2a      	cmp	r3, #42	; 0x2a
 80084da:	d015      	beq.n	8008508 <_vfiprintf_r+0x13c>
 80084dc:	9a07      	ldr	r2, [sp, #28]
 80084de:	4654      	mov	r4, sl
 80084e0:	2000      	movs	r0, #0
 80084e2:	f04f 0c0a 	mov.w	ip, #10
 80084e6:	4621      	mov	r1, r4
 80084e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ec:	3b30      	subs	r3, #48	; 0x30
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d94e      	bls.n	8008590 <_vfiprintf_r+0x1c4>
 80084f2:	b1b0      	cbz	r0, 8008522 <_vfiprintf_r+0x156>
 80084f4:	9207      	str	r2, [sp, #28]
 80084f6:	e014      	b.n	8008522 <_vfiprintf_r+0x156>
 80084f8:	eba0 0308 	sub.w	r3, r0, r8
 80084fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008500:	4313      	orrs	r3, r2
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	46a2      	mov	sl, r4
 8008506:	e7d2      	b.n	80084ae <_vfiprintf_r+0xe2>
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	1d19      	adds	r1, r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	9103      	str	r1, [sp, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	bfbb      	ittet	lt
 8008514:	425b      	neglt	r3, r3
 8008516:	f042 0202 	orrlt.w	r2, r2, #2
 800851a:	9307      	strge	r3, [sp, #28]
 800851c:	9307      	strlt	r3, [sp, #28]
 800851e:	bfb8      	it	lt
 8008520:	9204      	strlt	r2, [sp, #16]
 8008522:	7823      	ldrb	r3, [r4, #0]
 8008524:	2b2e      	cmp	r3, #46	; 0x2e
 8008526:	d10c      	bne.n	8008542 <_vfiprintf_r+0x176>
 8008528:	7863      	ldrb	r3, [r4, #1]
 800852a:	2b2a      	cmp	r3, #42	; 0x2a
 800852c:	d135      	bne.n	800859a <_vfiprintf_r+0x1ce>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	9203      	str	r2, [sp, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfb8      	it	lt
 800853a:	f04f 33ff 	movlt.w	r3, #4294967295
 800853e:	3402      	adds	r4, #2
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008628 <_vfiprintf_r+0x25c>
 8008546:	7821      	ldrb	r1, [r4, #0]
 8008548:	2203      	movs	r2, #3
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe60 	bl	8000210 <memchr>
 8008550:	b140      	cbz	r0, 8008564 <_vfiprintf_r+0x198>
 8008552:	2340      	movs	r3, #64	; 0x40
 8008554:	eba0 000a 	sub.w	r0, r0, sl
 8008558:	fa03 f000 	lsl.w	r0, r3, r0
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	4303      	orrs	r3, r0
 8008560:	3401      	adds	r4, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	482c      	ldr	r0, [pc, #176]	; (800861c <_vfiprintf_r+0x250>)
 800856a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800856e:	2206      	movs	r2, #6
 8008570:	f7f7 fe4e 	bl	8000210 <memchr>
 8008574:	2800      	cmp	r0, #0
 8008576:	d03f      	beq.n	80085f8 <_vfiprintf_r+0x22c>
 8008578:	4b29      	ldr	r3, [pc, #164]	; (8008620 <_vfiprintf_r+0x254>)
 800857a:	bb1b      	cbnz	r3, 80085c4 <_vfiprintf_r+0x1f8>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	3307      	adds	r3, #7
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	3308      	adds	r3, #8
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	443b      	add	r3, r7
 800858c:	9309      	str	r3, [sp, #36]	; 0x24
 800858e:	e767      	b.n	8008460 <_vfiprintf_r+0x94>
 8008590:	fb0c 3202 	mla	r2, ip, r2, r3
 8008594:	460c      	mov	r4, r1
 8008596:	2001      	movs	r0, #1
 8008598:	e7a5      	b.n	80084e6 <_vfiprintf_r+0x11a>
 800859a:	2300      	movs	r3, #0
 800859c:	3401      	adds	r4, #1
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	4619      	mov	r1, r3
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4620      	mov	r0, r4
 80085a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ac:	3a30      	subs	r2, #48	; 0x30
 80085ae:	2a09      	cmp	r2, #9
 80085b0:	d903      	bls.n	80085ba <_vfiprintf_r+0x1ee>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0c5      	beq.n	8008542 <_vfiprintf_r+0x176>
 80085b6:	9105      	str	r1, [sp, #20]
 80085b8:	e7c3      	b.n	8008542 <_vfiprintf_r+0x176>
 80085ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80085be:	4604      	mov	r4, r0
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f0      	b.n	80085a6 <_vfiprintf_r+0x1da>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <_vfiprintf_r+0x258>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	4630      	mov	r0, r6
 80085d0:	f3af 8000 	nop.w
 80085d4:	4607      	mov	r7, r0
 80085d6:	1c78      	adds	r0, r7, #1
 80085d8:	d1d6      	bne.n	8008588 <_vfiprintf_r+0x1bc>
 80085da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085dc:	07d9      	lsls	r1, r3, #31
 80085de:	d405      	bmi.n	80085ec <_vfiprintf_r+0x220>
 80085e0:	89ab      	ldrh	r3, [r5, #12]
 80085e2:	059a      	lsls	r2, r3, #22
 80085e4:	d402      	bmi.n	80085ec <_vfiprintf_r+0x220>
 80085e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e8:	f7ff f83e 	bl	8007668 <__retarget_lock_release_recursive>
 80085ec:	89ab      	ldrh	r3, [r5, #12]
 80085ee:	065b      	lsls	r3, r3, #25
 80085f0:	f53f af12 	bmi.w	8008418 <_vfiprintf_r+0x4c>
 80085f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f6:	e711      	b.n	800841c <_vfiprintf_r+0x50>
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	462a      	mov	r2, r5
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <_vfiprintf_r+0x258>)
 8008600:	a904      	add	r1, sp, #16
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f880 	bl	8008708 <_printf_i>
 8008608:	e7e4      	b.n	80085d4 <_vfiprintf_r+0x208>
 800860a:	bf00      	nop
 800860c:	08008e90 	.word	0x08008e90
 8008610:	08008eb0 	.word	0x08008eb0
 8008614:	08008e70 	.word	0x08008e70
 8008618:	08008fd5 	.word	0x08008fd5
 800861c:	08008fdf 	.word	0x08008fdf
 8008620:	00000000 	.word	0x00000000
 8008624:	080083a7 	.word	0x080083a7
 8008628:	08008fdb 	.word	0x08008fdb

0800862c <_printf_common>:
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	4616      	mov	r6, r2
 8008632:	4699      	mov	r9, r3
 8008634:	688a      	ldr	r2, [r1, #8]
 8008636:	690b      	ldr	r3, [r1, #16]
 8008638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800863c:	4293      	cmp	r3, r2
 800863e:	bfb8      	it	lt
 8008640:	4613      	movlt	r3, r2
 8008642:	6033      	str	r3, [r6, #0]
 8008644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008648:	4607      	mov	r7, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b10a      	cbz	r2, 8008652 <_printf_common+0x26>
 800864e:	3301      	adds	r3, #1
 8008650:	6033      	str	r3, [r6, #0]
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	0699      	lsls	r1, r3, #26
 8008656:	bf42      	ittt	mi
 8008658:	6833      	ldrmi	r3, [r6, #0]
 800865a:	3302      	addmi	r3, #2
 800865c:	6033      	strmi	r3, [r6, #0]
 800865e:	6825      	ldr	r5, [r4, #0]
 8008660:	f015 0506 	ands.w	r5, r5, #6
 8008664:	d106      	bne.n	8008674 <_printf_common+0x48>
 8008666:	f104 0a19 	add.w	sl, r4, #25
 800866a:	68e3      	ldr	r3, [r4, #12]
 800866c:	6832      	ldr	r2, [r6, #0]
 800866e:	1a9b      	subs	r3, r3, r2
 8008670:	42ab      	cmp	r3, r5
 8008672:	dc26      	bgt.n	80086c2 <_printf_common+0x96>
 8008674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008678:	1e13      	subs	r3, r2, #0
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	bf18      	it	ne
 800867e:	2301      	movne	r3, #1
 8008680:	0692      	lsls	r2, r2, #26
 8008682:	d42b      	bmi.n	80086dc <_printf_common+0xb0>
 8008684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008688:	4649      	mov	r1, r9
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	3001      	adds	r0, #1
 8008690:	d01e      	beq.n	80086d0 <_printf_common+0xa4>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	68e5      	ldr	r5, [r4, #12]
 8008696:	6832      	ldr	r2, [r6, #0]
 8008698:	f003 0306 	and.w	r3, r3, #6
 800869c:	2b04      	cmp	r3, #4
 800869e:	bf08      	it	eq
 80086a0:	1aad      	subeq	r5, r5, r2
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	bf0c      	ite	eq
 80086a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ac:	2500      	movne	r5, #0
 80086ae:	4293      	cmp	r3, r2
 80086b0:	bfc4      	itt	gt
 80086b2:	1a9b      	subgt	r3, r3, r2
 80086b4:	18ed      	addgt	r5, r5, r3
 80086b6:	2600      	movs	r6, #0
 80086b8:	341a      	adds	r4, #26
 80086ba:	42b5      	cmp	r5, r6
 80086bc:	d11a      	bne.n	80086f4 <_printf_common+0xc8>
 80086be:	2000      	movs	r0, #0
 80086c0:	e008      	b.n	80086d4 <_printf_common+0xa8>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4652      	mov	r2, sl
 80086c6:	4649      	mov	r1, r9
 80086c8:	4638      	mov	r0, r7
 80086ca:	47c0      	blx	r8
 80086cc:	3001      	adds	r0, #1
 80086ce:	d103      	bne.n	80086d8 <_printf_common+0xac>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d8:	3501      	adds	r5, #1
 80086da:	e7c6      	b.n	800866a <_printf_common+0x3e>
 80086dc:	18e1      	adds	r1, r4, r3
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	2030      	movs	r0, #48	; 0x30
 80086e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086e6:	4422      	add	r2, r4
 80086e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086f0:	3302      	adds	r3, #2
 80086f2:	e7c7      	b.n	8008684 <_printf_common+0x58>
 80086f4:	2301      	movs	r3, #1
 80086f6:	4622      	mov	r2, r4
 80086f8:	4649      	mov	r1, r9
 80086fa:	4638      	mov	r0, r7
 80086fc:	47c0      	blx	r8
 80086fe:	3001      	adds	r0, #1
 8008700:	d0e6      	beq.n	80086d0 <_printf_common+0xa4>
 8008702:	3601      	adds	r6, #1
 8008704:	e7d9      	b.n	80086ba <_printf_common+0x8e>
	...

08008708 <_printf_i>:
 8008708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	7e0f      	ldrb	r7, [r1, #24]
 800870e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008710:	2f78      	cmp	r7, #120	; 0x78
 8008712:	4691      	mov	r9, r2
 8008714:	4680      	mov	r8, r0
 8008716:	460c      	mov	r4, r1
 8008718:	469a      	mov	sl, r3
 800871a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800871e:	d807      	bhi.n	8008730 <_printf_i+0x28>
 8008720:	2f62      	cmp	r7, #98	; 0x62
 8008722:	d80a      	bhi.n	800873a <_printf_i+0x32>
 8008724:	2f00      	cmp	r7, #0
 8008726:	f000 80d8 	beq.w	80088da <_printf_i+0x1d2>
 800872a:	2f58      	cmp	r7, #88	; 0x58
 800872c:	f000 80a3 	beq.w	8008876 <_printf_i+0x16e>
 8008730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008738:	e03a      	b.n	80087b0 <_printf_i+0xa8>
 800873a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800873e:	2b15      	cmp	r3, #21
 8008740:	d8f6      	bhi.n	8008730 <_printf_i+0x28>
 8008742:	a101      	add	r1, pc, #4	; (adr r1, 8008748 <_printf_i+0x40>)
 8008744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008748:	080087a1 	.word	0x080087a1
 800874c:	080087b5 	.word	0x080087b5
 8008750:	08008731 	.word	0x08008731
 8008754:	08008731 	.word	0x08008731
 8008758:	08008731 	.word	0x08008731
 800875c:	08008731 	.word	0x08008731
 8008760:	080087b5 	.word	0x080087b5
 8008764:	08008731 	.word	0x08008731
 8008768:	08008731 	.word	0x08008731
 800876c:	08008731 	.word	0x08008731
 8008770:	08008731 	.word	0x08008731
 8008774:	080088c1 	.word	0x080088c1
 8008778:	080087e5 	.word	0x080087e5
 800877c:	080088a3 	.word	0x080088a3
 8008780:	08008731 	.word	0x08008731
 8008784:	08008731 	.word	0x08008731
 8008788:	080088e3 	.word	0x080088e3
 800878c:	08008731 	.word	0x08008731
 8008790:	080087e5 	.word	0x080087e5
 8008794:	08008731 	.word	0x08008731
 8008798:	08008731 	.word	0x08008731
 800879c:	080088ab 	.word	0x080088ab
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	602a      	str	r2, [r5, #0]
 80087a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087b0:	2301      	movs	r3, #1
 80087b2:	e0a3      	b.n	80088fc <_printf_i+0x1f4>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	6829      	ldr	r1, [r5, #0]
 80087b8:	0606      	lsls	r6, r0, #24
 80087ba:	f101 0304 	add.w	r3, r1, #4
 80087be:	d50a      	bpl.n	80087d6 <_printf_i+0xce>
 80087c0:	680e      	ldr	r6, [r1, #0]
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	da03      	bge.n	80087d0 <_printf_i+0xc8>
 80087c8:	232d      	movs	r3, #45	; 0x2d
 80087ca:	4276      	negs	r6, r6
 80087cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d0:	485e      	ldr	r0, [pc, #376]	; (800894c <_printf_i+0x244>)
 80087d2:	230a      	movs	r3, #10
 80087d4:	e019      	b.n	800880a <_printf_i+0x102>
 80087d6:	680e      	ldr	r6, [r1, #0]
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087de:	bf18      	it	ne
 80087e0:	b236      	sxthne	r6, r6
 80087e2:	e7ef      	b.n	80087c4 <_printf_i+0xbc>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	1d19      	adds	r1, r3, #4
 80087ea:	6029      	str	r1, [r5, #0]
 80087ec:	0601      	lsls	r1, r0, #24
 80087ee:	d501      	bpl.n	80087f4 <_printf_i+0xec>
 80087f0:	681e      	ldr	r6, [r3, #0]
 80087f2:	e002      	b.n	80087fa <_printf_i+0xf2>
 80087f4:	0646      	lsls	r6, r0, #25
 80087f6:	d5fb      	bpl.n	80087f0 <_printf_i+0xe8>
 80087f8:	881e      	ldrh	r6, [r3, #0]
 80087fa:	4854      	ldr	r0, [pc, #336]	; (800894c <_printf_i+0x244>)
 80087fc:	2f6f      	cmp	r7, #111	; 0x6f
 80087fe:	bf0c      	ite	eq
 8008800:	2308      	moveq	r3, #8
 8008802:	230a      	movne	r3, #10
 8008804:	2100      	movs	r1, #0
 8008806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800880a:	6865      	ldr	r5, [r4, #4]
 800880c:	60a5      	str	r5, [r4, #8]
 800880e:	2d00      	cmp	r5, #0
 8008810:	bfa2      	ittt	ge
 8008812:	6821      	ldrge	r1, [r4, #0]
 8008814:	f021 0104 	bicge.w	r1, r1, #4
 8008818:	6021      	strge	r1, [r4, #0]
 800881a:	b90e      	cbnz	r6, 8008820 <_printf_i+0x118>
 800881c:	2d00      	cmp	r5, #0
 800881e:	d04d      	beq.n	80088bc <_printf_i+0x1b4>
 8008820:	4615      	mov	r5, r2
 8008822:	fbb6 f1f3 	udiv	r1, r6, r3
 8008826:	fb03 6711 	mls	r7, r3, r1, r6
 800882a:	5dc7      	ldrb	r7, [r0, r7]
 800882c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008830:	4637      	mov	r7, r6
 8008832:	42bb      	cmp	r3, r7
 8008834:	460e      	mov	r6, r1
 8008836:	d9f4      	bls.n	8008822 <_printf_i+0x11a>
 8008838:	2b08      	cmp	r3, #8
 800883a:	d10b      	bne.n	8008854 <_printf_i+0x14c>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07de      	lsls	r6, r3, #31
 8008840:	d508      	bpl.n	8008854 <_printf_i+0x14c>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4299      	cmp	r1, r3
 8008848:	bfde      	ittt	le
 800884a:	2330      	movle	r3, #48	; 0x30
 800884c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008854:	1b52      	subs	r2, r2, r5
 8008856:	6122      	str	r2, [r4, #16]
 8008858:	f8cd a000 	str.w	sl, [sp]
 800885c:	464b      	mov	r3, r9
 800885e:	aa03      	add	r2, sp, #12
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff fee2 	bl	800862c <_printf_common>
 8008868:	3001      	adds	r0, #1
 800886a:	d14c      	bne.n	8008906 <_printf_i+0x1fe>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	b004      	add	sp, #16
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	4835      	ldr	r0, [pc, #212]	; (800894c <_printf_i+0x244>)
 8008878:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800887c:	6829      	ldr	r1, [r5, #0]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f851 6b04 	ldr.w	r6, [r1], #4
 8008884:	6029      	str	r1, [r5, #0]
 8008886:	061d      	lsls	r5, r3, #24
 8008888:	d514      	bpl.n	80088b4 <_printf_i+0x1ac>
 800888a:	07df      	lsls	r7, r3, #31
 800888c:	bf44      	itt	mi
 800888e:	f043 0320 	orrmi.w	r3, r3, #32
 8008892:	6023      	strmi	r3, [r4, #0]
 8008894:	b91e      	cbnz	r6, 800889e <_printf_i+0x196>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	f023 0320 	bic.w	r3, r3, #32
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	2310      	movs	r3, #16
 80088a0:	e7b0      	b.n	8008804 <_printf_i+0xfc>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	f043 0320 	orr.w	r3, r3, #32
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	2378      	movs	r3, #120	; 0x78
 80088ac:	4828      	ldr	r0, [pc, #160]	; (8008950 <_printf_i+0x248>)
 80088ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088b2:	e7e3      	b.n	800887c <_printf_i+0x174>
 80088b4:	0659      	lsls	r1, r3, #25
 80088b6:	bf48      	it	mi
 80088b8:	b2b6      	uxthmi	r6, r6
 80088ba:	e7e6      	b.n	800888a <_printf_i+0x182>
 80088bc:	4615      	mov	r5, r2
 80088be:	e7bb      	b.n	8008838 <_printf_i+0x130>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	6826      	ldr	r6, [r4, #0]
 80088c4:	6961      	ldr	r1, [r4, #20]
 80088c6:	1d18      	adds	r0, r3, #4
 80088c8:	6028      	str	r0, [r5, #0]
 80088ca:	0635      	lsls	r5, r6, #24
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	d501      	bpl.n	80088d4 <_printf_i+0x1cc>
 80088d0:	6019      	str	r1, [r3, #0]
 80088d2:	e002      	b.n	80088da <_printf_i+0x1d2>
 80088d4:	0670      	lsls	r0, r6, #25
 80088d6:	d5fb      	bpl.n	80088d0 <_printf_i+0x1c8>
 80088d8:	8019      	strh	r1, [r3, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	4615      	mov	r5, r2
 80088e0:	e7ba      	b.n	8008858 <_printf_i+0x150>
 80088e2:	682b      	ldr	r3, [r5, #0]
 80088e4:	1d1a      	adds	r2, r3, #4
 80088e6:	602a      	str	r2, [r5, #0]
 80088e8:	681d      	ldr	r5, [r3, #0]
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	2100      	movs	r1, #0
 80088ee:	4628      	mov	r0, r5
 80088f0:	f7f7 fc8e 	bl	8000210 <memchr>
 80088f4:	b108      	cbz	r0, 80088fa <_printf_i+0x1f2>
 80088f6:	1b40      	subs	r0, r0, r5
 80088f8:	6060      	str	r0, [r4, #4]
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	2300      	movs	r3, #0
 8008900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008904:	e7a8      	b.n	8008858 <_printf_i+0x150>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	462a      	mov	r2, r5
 800890a:	4649      	mov	r1, r9
 800890c:	4640      	mov	r0, r8
 800890e:	47d0      	blx	sl
 8008910:	3001      	adds	r0, #1
 8008912:	d0ab      	beq.n	800886c <_printf_i+0x164>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	079b      	lsls	r3, r3, #30
 8008918:	d413      	bmi.n	8008942 <_printf_i+0x23a>
 800891a:	68e0      	ldr	r0, [r4, #12]
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	4298      	cmp	r0, r3
 8008920:	bfb8      	it	lt
 8008922:	4618      	movlt	r0, r3
 8008924:	e7a4      	b.n	8008870 <_printf_i+0x168>
 8008926:	2301      	movs	r3, #1
 8008928:	4632      	mov	r2, r6
 800892a:	4649      	mov	r1, r9
 800892c:	4640      	mov	r0, r8
 800892e:	47d0      	blx	sl
 8008930:	3001      	adds	r0, #1
 8008932:	d09b      	beq.n	800886c <_printf_i+0x164>
 8008934:	3501      	adds	r5, #1
 8008936:	68e3      	ldr	r3, [r4, #12]
 8008938:	9903      	ldr	r1, [sp, #12]
 800893a:	1a5b      	subs	r3, r3, r1
 800893c:	42ab      	cmp	r3, r5
 800893e:	dcf2      	bgt.n	8008926 <_printf_i+0x21e>
 8008940:	e7eb      	b.n	800891a <_printf_i+0x212>
 8008942:	2500      	movs	r5, #0
 8008944:	f104 0619 	add.w	r6, r4, #25
 8008948:	e7f5      	b.n	8008936 <_printf_i+0x22e>
 800894a:	bf00      	nop
 800894c:	08008fe6 	.word	0x08008fe6
 8008950:	08008ff7 	.word	0x08008ff7

08008954 <_read_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_read_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f9 f860 	bl	8001a28 <_read>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_read_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_read_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20010bb4 	.word	0x20010bb4

08008978 <_fstat_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_fstat_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f7f9 f894 	bl	8001ab2 <_fstat>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_fstat_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_fstat_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	20010bb4 	.word	0x20010bb4

0800899c <_isatty_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	; (80089b8 <_isatty_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f9 f893 	bl	8001ad2 <_isatty>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_isatty_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_isatty_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20010bb4 	.word	0x20010bb4

080089bc <memmove>:
 80089bc:	4288      	cmp	r0, r1
 80089be:	b510      	push	{r4, lr}
 80089c0:	eb01 0402 	add.w	r4, r1, r2
 80089c4:	d902      	bls.n	80089cc <memmove+0x10>
 80089c6:	4284      	cmp	r4, r0
 80089c8:	4623      	mov	r3, r4
 80089ca:	d807      	bhi.n	80089dc <memmove+0x20>
 80089cc:	1e43      	subs	r3, r0, #1
 80089ce:	42a1      	cmp	r1, r4
 80089d0:	d008      	beq.n	80089e4 <memmove+0x28>
 80089d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089da:	e7f8      	b.n	80089ce <memmove+0x12>
 80089dc:	4402      	add	r2, r0
 80089de:	4601      	mov	r1, r0
 80089e0:	428a      	cmp	r2, r1
 80089e2:	d100      	bne.n	80089e6 <memmove+0x2a>
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ee:	e7f7      	b.n	80089e0 <memmove+0x24>

080089f0 <_realloc_r>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4680      	mov	r8, r0
 80089f6:	4614      	mov	r4, r2
 80089f8:	460e      	mov	r6, r1
 80089fa:	b921      	cbnz	r1, 8008a06 <_realloc_r+0x16>
 80089fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	4611      	mov	r1, r2
 8008a02:	f7fe be69 	b.w	80076d8 <_malloc_r>
 8008a06:	b92a      	cbnz	r2, 8008a14 <_realloc_r+0x24>
 8008a08:	f7ff fb0e 	bl	8008028 <_free_r>
 8008a0c:	4625      	mov	r5, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	f000 f81b 	bl	8008a4e <_malloc_usable_size_r>
 8008a18:	4284      	cmp	r4, r0
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	d802      	bhi.n	8008a24 <_realloc_r+0x34>
 8008a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a22:	d812      	bhi.n	8008a4a <_realloc_r+0x5a>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7fe fe56 	bl	80076d8 <_malloc_r>
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0ed      	beq.n	8008a0e <_realloc_r+0x1e>
 8008a32:	42bc      	cmp	r4, r7
 8008a34:	4622      	mov	r2, r4
 8008a36:	4631      	mov	r1, r6
 8008a38:	bf28      	it	cs
 8008a3a:	463a      	movcs	r2, r7
 8008a3c:	f7fe fe15 	bl	800766a <memcpy>
 8008a40:	4631      	mov	r1, r6
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff faf0 	bl	8008028 <_free_r>
 8008a48:	e7e1      	b.n	8008a0e <_realloc_r+0x1e>
 8008a4a:	4635      	mov	r5, r6
 8008a4c:	e7df      	b.n	8008a0e <_realloc_r+0x1e>

08008a4e <_malloc_usable_size_r>:
 8008a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a52:	1f18      	subs	r0, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	bfbc      	itt	lt
 8008a58:	580b      	ldrlt	r3, [r1, r0]
 8008a5a:	18c0      	addlt	r0, r0, r3
 8008a5c:	4770      	bx	lr
	...

08008a60 <_init>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	bf00      	nop
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr

08008a6c <_fini>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr
