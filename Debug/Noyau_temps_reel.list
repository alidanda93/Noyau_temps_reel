
Noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ccc  08008ccc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd4  08008cd4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004724  20000080  08008d5c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047a4  08008d5c  000247a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b91  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab5  00000000  00000000  00039c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003eb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0ac  00000000  00000000  0003fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001971a  00000000  00000000  00069e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc67b  00000000  00000000  00083546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fbc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c58  00000000  00000000  0017fc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008850 	.word	0x08008850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008850 	.word	0x08008850

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

char uart_read() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	char c;
	HAL_UART_Receive_IT(&huart1, (uint8_t*)(&c), sizeof(char));
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <uart_read+0x2c>)
 80005c2:	f003 fae6 	bl	8003b92 <HAL_UART_Receive_IT>
	xSemaphoreTake(semaphori,HAL_MAX_DELAY);
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <uart_read+0x30>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 31ff 	mov.w	r1, #4294967295
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 ff7e 	bl	80054d0 <xQueueSemaphoreTake>
	return c;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200009bc 	.word	0x200009bc
 80005e4:	2000095c 	.word	0x2000095c

080005e8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken;

	if (huart==&huart1){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_UART_RxCpltCallback+0x44>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d109      	bne.n	800060c <HAL_UART_RxCpltCallback+0x24>
		higher_priority_task_woken = pdFALSE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(semaphori,&higher_priority_task_woken);
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_UART_RxCpltCallback+0x48>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f107 020c 	add.w	r2, r7, #12
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fecd 	bl	80053a6 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR(higher_priority_task_woken);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d007      	beq.n	8000622 <HAL_UART_RxCpltCallback+0x3a>
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_UART_RxCpltCallback+0x4c>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy

}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200009bc 	.word	0x200009bc
 8000630:	2000095c 	.word	0x2000095c
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <uart_write>:


int uart_write(char * s, uint16_t size) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <uart_write+0x24>)
 800064e:	f003 fa1d 	bl	8003a8c <HAL_UART_Transmit>
	return size;
 8000652:	887b      	ldrh	r3, [r7, #2]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200009bc 	.word	0x200009bc

08000660 <sh_help>:




static int sh_help(int argc, char ** argv) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e023      	b.n	80006b8 <sh_help+0x58>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000670:	4916      	ldr	r1, [pc, #88]	; (80006cc <sh_help+0x6c>)
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <sh_help+0x6c>)
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3308      	adds	r3, #8
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4603      	mov	r3, r0
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <sh_help+0x70>)
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <sh_help+0x74>)
 80006a0:	f007 f88e 	bl	80077c0 <sniprintf>
 80006a4:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <sh_help+0x74>)
 80006ae:	f7ff ffc3 	bl	8000638 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <sh_help+0x78>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbd6      	blt.n	8000670 <sh_help+0x10>
	}

	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001a0 	.word	0x200001a0
 80006d0:	08008868 	.word	0x08008868
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	2000019c 	.word	0x2000019c

080006dc <shell_init>:

void shell_init() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	int size = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <shell_init+0x38>)
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <shell_init+0x3c>)
 80006ee:	f007 f867 	bl	80077c0 <sniprintf>
 80006f2:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <shell_init+0x3c>)
 80006fc:	f7ff ff9c 	bl	8000638 <uart_write>

	shell_add('h', sh_help, "Help");
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <shell_init+0x40>)
 8000702:	4907      	ldr	r1, [pc, #28]	; (8000720 <shell_init+0x44>)
 8000704:	2068      	movs	r0, #104	; 0x68
 8000706:	f000 f80d 	bl	8000724 <shell_add>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08008874 	.word	0x08008874
 8000718:	2000009c 	.word	0x2000009c
 800071c:	0800889c 	.word	0x0800889c
 8000720:	08000661 	.word	0x08000661

08000724 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <shell_add+0x74>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	dc26      	bgt.n	8000788 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <shell_add+0x74>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4917      	ldr	r1, [pc, #92]	; (800079c <shell_add+0x78>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	7bfa      	ldrb	r2, [r7, #15]
 800074c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <shell_add+0x74>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4912      	ldr	r1, [pc, #72]	; (800079c <shell_add+0x78>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	3304      	adds	r3, #4
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <shell_add+0x74>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <shell_add+0x78>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <shell_add+0x74>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <shell_add+0x74>)
 8000782:	6013      	str	r3, [r2, #0]
		return 0;
 8000784:	2300      	movs	r3, #0
 8000786:	e001      	b.n	800078c <shell_add+0x68>
	}

	return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078c:	4618      	mov	r0, r3
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	2000019c 	.word	0x2000019c
 800079c:	200001a0 	.word	0x200001a0

080007a0 <shell_exec>:

static int shell_exec(char * buf) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007b4:	e040      	b.n	8000838 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80007b6:	492d      	ldr	r1, [pc, #180]	; (800086c <shell_exec+0xcc>)
 80007b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d131      	bne.n	8000832 <shell_exec+0x92>
			argc = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
 80007da:	e013      	b.n	8000804 <shell_exec+0x64>
				if(*p == ' ') {
 80007dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b20      	cmp	r3, #32
 80007e2:	d10c      	bne.n	80007fe <shell_exec+0x5e>
					*p = '\0';
 80007e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80007ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80007f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f2:	3201      	adds	r2, #1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3340      	adds	r3, #64	; 0x40
 80007f8:	443b      	add	r3, r7
 80007fa:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80007fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000800:	3301      	adds	r3, #1
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
 8000804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <shell_exec+0x72>
 800080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800080e:	2b07      	cmp	r3, #7
 8000810:	dde4      	ble.n	80007dc <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <shell_exec+0xcc>)
 8000814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f107 020c 	add.w	r2, r7, #12
 8000828:	4611      	mov	r1, r2
 800082a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	e018      	b.n	8000864 <shell_exec+0xc4>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000834:	3301      	adds	r3, #1
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <shell_exec+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800083e:	429a      	cmp	r2, r3
 8000840:	dbb9      	blt.n	80007b6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <shell_exec+0xd4>)
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <shell_exec+0xd8>)
 800084e:	f006 ffb7 	bl	80077c0 <sniprintf>
 8000852:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <shell_exec+0xd8>)
 800085c:	f7ff feec 	bl	8000638 <uart_write>
	return -1;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000864:	4618      	mov	r0, r3
 8000866:	3740      	adds	r7, #64	; 0x40
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001a0 	.word	0x200001a0
 8000870:	2000019c 	.word	0x2000019c
 8000874:	080088a4 	.word	0x080088a4
 8000878:	2000009c 	.word	0x2000009c

0800087c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
	int reading = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800088a:	2102      	movs	r1, #2
 800088c:	482b      	ldr	r0, [pc, #172]	; (800093c <shell_run+0xc0>)
 800088e:	f7ff fed3 	bl	8000638 <uart_write>
		reading = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8000896:	e049      	b.n	800092c <shell_run+0xb0>
			char c = uart_read();
 8000898:	f7ff fe8c 	bl	80005b4 <uart_read>
 800089c:	4603      	mov	r3, r0
 800089e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b08      	cmp	r3, #8
 80008a4:	d027      	beq.n	80008f6 <shell_run+0x7a>
 80008a6:	2b0d      	cmp	r3, #13
 80008a8:	d130      	bne.n	800090c <shell_run+0x90>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <shell_run+0xc4>)
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4824      	ldr	r0, [pc, #144]	; (8000944 <shell_run+0xc8>)
 80008b2:	f006 ff85 	bl	80077c0 <sniprintf>
 80008b6:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <shell_run+0xc8>)
 80008c0:	f7ff feba 	bl	8000638 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <shell_run+0xcc>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <shell_run+0xcc>)
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <shell_run+0xd0>)
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <shell_run+0xc8>)
 80008da:	f006 ff71 	bl	80077c0 <sniprintf>
 80008de:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <shell_run+0xc8>)
 80008e8:	f7ff fea6 	bl	8000638 <uart_write>
				reading = 0;        //exit read loop
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
				break;
 80008f4:	e01a      	b.n	800092c <shell_run+0xb0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dd16      	ble.n	800092a <shell_run+0xae>
					pos--;          //remove it in buffer
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3b01      	subs	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8000902:	2103      	movs	r1, #3
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <shell_run+0xd4>)
 8000906:	f7ff fe97 	bl	8000638 <uart_write>
				}
				break;
 800090a:	e00e      	b.n	800092a <shell_run+0xae>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2bff      	cmp	r3, #255	; 0xff
 8000910:	dc0c      	bgt.n	800092c <shell_run+0xb0>
					uart_write(&c, 1);
 8000912:	1cfb      	adds	r3, r7, #3
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe8e 	bl	8000638 <uart_write>
					cmd_buffer[pos++] = c; //store
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	78f9      	ldrb	r1, [r7, #3]
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <shell_run+0xcc>)
 8000926:	54d1      	strb	r1, [r2, r3]
 8000928:	e000      	b.n	800092c <shell_run+0xb0>
				break;
 800092a:	bf00      	nop
		while(reading) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1b2      	bne.n	8000898 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <shell_run+0xcc>)
 8000934:	f7ff ff34 	bl	80007a0 <shell_exec>
		uart_write(prompt, 2);
 8000938:	e7a7      	b.n	800088a <shell_run+0xe>
 800093a:	bf00      	nop
 800093c:	20000004 	.word	0x20000004
 8000940:	080088bc 	.word	0x080088bc
 8000944:	2000009c 	.word	0x2000009c
 8000948:	200004a0 	.word	0x200004a0
 800094c:	080088c0 	.word	0x080088c0
 8000950:	20000000 	.word	0x20000000

08000954 <fonction>:
extern char print_buffer[BUFFER_SIZE];
extern int LED_DELAY;


int fonction(int argc, char ** argv)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	int size = snprintf (print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <fonction+0x30>)
 8000960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <fonction+0x34>)
 8000966:	f006 ff2b 	bl	80077c0 <sniprintf>
 800096a:	60f8      	str	r0, [r7, #12]
	uart_write(print_buffer, size);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	b29b      	uxth	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <fonction+0x34>)
 8000974:	f7ff fe60 	bl	8000638 <uart_write>

	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	080088c8 	.word	0x080088c8
 8000988:	200005a0 	.word	0x200005a0

0800098c <addition>:


int addition( int argc, char ** argv)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	if(argc !=3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d00f      	beq.n	80009bc <addition+0x30>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument pour une somme de deux\r\n");
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <addition+0x80>)
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <addition+0x84>)
 80009a4:	f006 ff0c 	bl	80077c0 <sniprintf>
 80009a8:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	4817      	ldr	r0, [pc, #92]	; (8000a10 <addition+0x84>)
 80009b2:	f7ff fe41 	bl	8000638 <uart_write>
		return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e022      	b.n	8000a02 <addition+0x76>
	}
	else
	{
		int a = atoi(argv[1]);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fc22 	bl	800720c <atoi>
 80009c8:	6178      	str	r0, [r7, #20]
		int b = atoi(argv[2]);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	3308      	adds	r3, #8
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fc1b 	bl	800720c <atoi>
 80009d6:	6138      	str	r0, [r7, #16]
		int size = snprintf (print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n\r\n", a, b, a+b);
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4413      	add	r3, r2
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <addition+0x88>)
 80009e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <addition+0x84>)
 80009ee:	f006 fee7 	bl	80077c0 <sniprintf>
 80009f2:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <addition+0x84>)
 80009fc:	f7ff fe1c 	bl	8000638 <uart_write>

	}
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	080088e8 	.word	0x080088e8
 8000a10:	200005a0 	.word	0x200005a0
 8000a14:	08008928 	.word	0x08008928

08000a18 <setLedRate>:
	return 0;
}
*/

int setLedRate( int argc, char ** argv)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	if(argc!=2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d00d      	beq.n	8000a44 <setLedRate+0x2c>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'arguments pour la fonction setLedRate\r\n");
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <setLedRate+0x60>)
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <setLedRate+0x64>)
 8000a30:	f006 fec6 	bl	80077c0 <sniprintf>
 8000a34:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <setLedRate+0x64>)
 8000a3e:	f7ff fdfb 	bl	8000638 <uart_write>
 8000a42:	e00d      	b.n	8000a60 <setLedRate+0x48>
	}
	else
	{
		LED_DELAY = atoi(argv[1]);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	3304      	adds	r3, #4
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 fbde 	bl	800720c <atoi>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <setLedRate+0x68>)
 8000a54:	6013      	str	r3, [r2, #0]
		vTaskResume(xHandleLED); //reveille la tache si elle est suspended else pass
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <setLedRate+0x6c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 f97c 	bl	8005d58 <vTaskResume>
	}
	printf("%d\n\r", LED_DELAY);
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <setLedRate+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4808      	ldr	r0, [pc, #32]	; (8000a88 <setLedRate+0x70>)
 8000a68:	f006 fda2 	bl	80075b0 <iprintf>
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	0800893c 	.word	0x0800893c
 8000a7c:	200005a0 	.word	0x200005a0
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000964 	.word	0x20000964
 8000a88:	08008984 	.word	0x08008984

08000a8c <led>:




int led()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	int LED_Delay_local_var;
	while(1)
	{
		LED_Delay_local_var = LED_DELAY;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <led+0x44>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	607b      	str	r3, [r7, #4]
		switch(LED_Delay_local_var)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <led+0x28>
				{
					case 0 :
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <led+0x48>)
 8000aa4:	f001 fbe4 	bl	8002270 <HAL_GPIO_WritePin>
						vTaskSuspend(xHandleLED); // communiquer PROPREMENT cad suspendre si l 0 == led off
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <led+0x4c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 f88b 	bl	8005bc8 <vTaskSuspend>
						break;
 8000ab2:	e008      	b.n	8000ac6 <led+0x3a>


					default :
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <led+0x48>)
 8000ab8:	f001 fbf3 	bl	80022a2 <HAL_GPIO_TogglePin>
						vTaskDelay(LED_Delay_local_var);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 f84c 	bl	8005b5c <vTaskDelay>
						break;
 8000ac4:	bf00      	nop

				}
		vTaskDelay(LED_Delay_local_var);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 f847 	bl	8005b5c <vTaskDelay>
		LED_Delay_local_var = LED_DELAY;
 8000ace:	e7e0      	b.n	8000a92 <led+0x6>
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	20000964 	.word	0x20000964

08000adc <spammer>:
	return 0;
}


int spammer( int argc, char ** argv)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	if(argc!=3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d00f      	beq.n	8000b0c <spammer+0x30>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'arguments pour la fonction Spam \r\n");
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <spammer+0x7c>)
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	481a      	ldr	r0, [pc, #104]	; (8000b5c <spammer+0x80>)
 8000af4:	f006 fe64 	bl	80077c0 <sniprintf>
 8000af8:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	4816      	ldr	r0, [pc, #88]	; (8000b5c <spammer+0x80>)
 8000b02:	f7ff fd99 	bl	8000638 <uart_write>
		return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e020      	b.n	8000b4e <spammer+0x72>
	}
	else
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "%s\r\n", argv[1]);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <spammer+0x84>)
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <spammer+0x80>)
 8000b1a:	f006 fe51 	bl	80077c0 <sniprintf>
 8000b1e:	6138      	str	r0, [r7, #16]
		for (int i=0; i<atoi(argv[2]);i++) uart_write(print_buffer, size);
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e008      	b.n	8000b38 <spammer+0x5c>
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <spammer+0x80>)
 8000b2e:	f7ff fd83 	bl	8000638 <uart_write>
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 fb64 	bl	800720c <atoi>
 8000b44:	4602      	mov	r2, r0
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dbec      	blt.n	8000b26 <spammer+0x4a>
	}

	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	0800898c 	.word	0x0800898c
 8000b5c:	200005a0 	.word	0x200005a0
 8000b60:	080089d0 	.word	0x080089d0

08000b64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <vApplicationGetIdleTaskMemory+0x30>)
 8000b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200006a4 	.word	0x200006a4
 8000b94:	20000758 	.word	0x20000758

08000b98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_FREERTOS_Init+0x30>)
 8000ba0:	1d3c      	adds	r4, r7, #4
 8000ba2:	461d      	mov	r5, r3
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fa16 	bl	8004fe6 <osThreadCreate>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <MX_FREERTOS_Init+0x34>)
 8000bbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc8:	080089e4 	.word	0x080089e4
 8000bcc:	200006a0 	.word	0x200006a0

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f004 fa50 	bl	800507e <osDelay>
 8000bde:	e7fb      	b.n	8000bd8 <StartDefaultTask+0x8>

08000be0 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4bad      	ldr	r3, [pc, #692]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4aac      	ldr	r2, [pc, #688]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4baa      	ldr	r3, [pc, #680]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4ba7      	ldr	r3, [pc, #668]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4aa6      	ldr	r2, [pc, #664]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4ba4      	ldr	r3, [pc, #656]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4ba1      	ldr	r3, [pc, #644]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4aa0      	ldr	r2, [pc, #640]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b9e      	ldr	r3, [pc, #632]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a9a      	ldr	r2, [pc, #616]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b98      	ldr	r3, [pc, #608]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b95      	ldr	r3, [pc, #596]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a94      	ldr	r2, [pc, #592]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b92      	ldr	r3, [pc, #584]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b8f      	ldr	r3, [pc, #572]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a8e      	ldr	r2, [pc, #568]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b8c      	ldr	r3, [pc, #560]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c86:	4b89      	ldr	r3, [pc, #548]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a88      	ldr	r2, [pc, #544]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b86      	ldr	r3, [pc, #536]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9e:	4b83      	ldr	r3, [pc, #524]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a82      	ldr	r2, [pc, #520]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b80      	ldr	r3, [pc, #512]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb6:	4b7d      	ldr	r3, [pc, #500]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a7c      	ldr	r2, [pc, #496]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b7a      	ldr	r3, [pc, #488]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cce:	4b77      	ldr	r3, [pc, #476]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a76      	ldr	r2, [pc, #472]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	4b71      	ldr	r3, [pc, #452]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a70      	ldr	r2, [pc, #448]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <MX_GPIO_Init+0x2cc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2120      	movs	r1, #32
 8000d02:	486b      	ldr	r0, [pc, #428]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000d04:	f001 fab4 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f241 010e 	movw	r1, #4110	; 0x100e
 8000d0e:	4869      	ldr	r0, [pc, #420]	; (8000eb4 <MX_GPIO_Init+0x2d4>)
 8000d10:	f001 faae 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2108      	movs	r1, #8
 8000d18:	4867      	ldr	r0, [pc, #412]	; (8000eb8 <MX_GPIO_Init+0x2d8>)
 8000d1a:	f001 faa9 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d24:	4865      	ldr	r0, [pc, #404]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000d26:	f001 faa3 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	21c8      	movs	r1, #200	; 0xc8
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000d30:	f001 fa9e 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d44:	230e      	movs	r3, #14
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485d      	ldr	r0, [pc, #372]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d50:	f001 f8e2 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d54:	2308      	movs	r3, #8
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d68:	f001 f8d6 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d7c:	2309      	movs	r3, #9
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	484f      	ldr	r0, [pc, #316]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d88:	f001 f8c6 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d8c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	4845      	ldr	r0, [pc, #276]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000daa:	f001 f8b5 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000dae:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000dcc:	f001 f8a4 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de2:	2304      	movs	r3, #4
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000dee:	f001 f893 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000df2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	482e      	ldr	r0, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000e10:	f001 f882 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e14:	2310      	movs	r3, #16
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000e30:	f001 f872 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e44:	2308      	movs	r3, #8
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000e50:	f001 f862 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000e54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e66:	230c      	movs	r3, #12
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000e72:	f001 f851 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <MX_GPIO_Init+0x2f0>)
 8000e94:	f001 f840 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	e013      	b.n	8000ed4 <MX_GPIO_Init+0x2f4>
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	40022800 	.word	0x40022800
 8000ebc:	40021c00 	.word	0x40021c00
 8000ec0:	40021800 	.word	0x40021800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	48bc      	ldr	r0, [pc, #752]	; (80011d0 <MX_GPIO_Init+0x5f0>)
 8000ede:	f001 f81b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	48b5      	ldr	r0, [pc, #724]	; (80011d4 <MX_GPIO_Init+0x5f4>)
 8000efe:	f001 f80b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000f02:	f248 1333 	movw	r3, #33075	; 0x8133
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f14:	230c      	movs	r3, #12
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	48ae      	ldr	r0, [pc, #696]	; (80011d8 <MX_GPIO_Init+0x5f8>)
 8000f20:	f000 fffa 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000f24:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f36:	230e      	movs	r3, #14
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	48a6      	ldr	r0, [pc, #664]	; (80011dc <MX_GPIO_Init+0x5fc>)
 8000f42:	f000 ffe9 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	48a0      	ldr	r0, [pc, #640]	; (80011dc <MX_GPIO_Init+0x5fc>)
 8000f5c:	f000 ffdc 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f60:	2340      	movs	r3, #64	; 0x40
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	489a      	ldr	r0, [pc, #616]	; (80011e0 <MX_GPIO_Init+0x600>)
 8000f76:	f000 ffcf 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4892      	ldr	r0, [pc, #584]	; (80011e0 <MX_GPIO_Init+0x600>)
 8000f98:	f000 ffbe 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fae:	230a      	movs	r3, #10
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	488a      	ldr	r0, [pc, #552]	; (80011e4 <MX_GPIO_Init+0x604>)
 8000fba:	f000 ffad 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin;
 8000fbe:	23b0      	movs	r3, #176	; 0xb0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4883      	ldr	r0, [pc, #524]	; (80011e8 <MX_GPIO_Init+0x608>)
 8000fda:	f000 ff9d 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000fde:	23f7      	movs	r3, #247	; 0xf7
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fee:	230e      	movs	r3, #14
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	487c      	ldr	r0, [pc, #496]	; (80011ec <MX_GPIO_Init+0x60c>)
 8000ffa:	f000 ff8d 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001010:	2309      	movs	r3, #9
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001018:	4619      	mov	r1, r3
 800101a:	486f      	ldr	r0, [pc, #444]	; (80011d8 <MX_GPIO_Init+0x5f8>)
 800101c:	f000 ff7c 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001032:	230a      	movs	r3, #10
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	4866      	ldr	r0, [pc, #408]	; (80011d8 <MX_GPIO_Init+0x5f8>)
 800103e:	f000 ff6b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001042:	2320      	movs	r3, #32
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	4861      	ldr	r0, [pc, #388]	; (80011e0 <MX_GPIO_Init+0x600>)
 800105a:	f000 ff5d 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800105e:	2308      	movs	r3, #8
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800106e:	230d      	movs	r3, #13
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	4859      	ldr	r0, [pc, #356]	; (80011e0 <MX_GPIO_Init+0x600>)
 800107a:	f000 ff4d 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 800107e:	f241 030e 	movw	r3, #4110	; 0x100e
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	4854      	ldr	r0, [pc, #336]	; (80011e8 <MX_GPIO_Init+0x608>)
 8001098:	f000 ff3e 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	484f      	ldr	r0, [pc, #316]	; (80011f0 <MX_GPIO_Init+0x610>)
 80010b2:	f000 ff31 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80010b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c8:	230c      	movs	r3, #12
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4848      	ldr	r0, [pc, #288]	; (80011f4 <MX_GPIO_Init+0x614>)
 80010d4:	f000 ff20 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80010d8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ea:	230e      	movs	r3, #14
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	483c      	ldr	r0, [pc, #240]	; (80011e8 <MX_GPIO_Init+0x608>)
 80010f6:	f000 ff0f 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010fa:	2308      	movs	r3, #8
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4836      	ldr	r0, [pc, #216]	; (80011ec <MX_GPIO_Init+0x60c>)
 8001112:	f000 ff01 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001128:	230d      	movs	r3, #13
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	4829      	ldr	r0, [pc, #164]	; (80011d8 <MX_GPIO_Init+0x5f8>)
 8001134:	f000 fef0 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001138:	2310      	movs	r3, #16
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	4825      	ldr	r0, [pc, #148]	; (80011e0 <MX_GPIO_Init+0x600>)
 800114c:	f000 fee4 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001150:	2304      	movs	r3, #4
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001160:	230c      	movs	r3, #12
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	481d      	ldr	r0, [pc, #116]	; (80011e0 <MX_GPIO_Init+0x600>)
 800116c:	f000 fed4 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001170:	f248 0304 	movw	r3, #32772	; 0x8004
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800117e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001182:	4619      	mov	r1, r3
 8001184:	481c      	ldr	r0, [pc, #112]	; (80011f8 <MX_GPIO_Init+0x618>)
 8001186:	f000 fec7 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_GPIO_Init+0x618>)
 80011a4:	f000 feb8 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80011a8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ba:	230d      	movs	r3, #13
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_GPIO_Init+0x618>)
 80011c6:	f000 fea7 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e016      	b.n	80011fc <MX_GPIO_Init+0x61c>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40022400 	.word	0x40022400
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40022800 	.word	0x40022800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800120a:	2302      	movs	r3, #2
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	489d      	ldr	r0, [pc, #628]	; (800148c <MX_GPIO_Init+0x8ac>)
 8001216:	f000 fe7f 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800121a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800122c:	2301      	movs	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	4896      	ldr	r0, [pc, #600]	; (8001490 <MX_GPIO_Init+0x8b0>)
 8001238:	f000 fe6e 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001242:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001250:	4619      	mov	r1, r3
 8001252:	488e      	ldr	r0, [pc, #568]	; (800148c <MX_GPIO_Init+0x8ac>)
 8001254:	f000 fe60 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001268:	2308      	movs	r3, #8
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4888      	ldr	r0, [pc, #544]	; (8001494 <MX_GPIO_Init+0x8b4>)
 8001274:	f000 fe50 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001278:	2310      	movs	r3, #16
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001288:	230a      	movs	r3, #10
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	4881      	ldr	r0, [pc, #516]	; (8001498 <MX_GPIO_Init+0x8b8>)
 8001294:	f000 fe40 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001298:	2328      	movs	r3, #40	; 0x28
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a8:	230c      	movs	r3, #12
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4879      	ldr	r0, [pc, #484]	; (8001498 <MX_GPIO_Init+0x8b8>)
 80012b4:	f000 fe30 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80012b8:	23c8      	movs	r3, #200	; 0xc8
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4873      	ldr	r0, [pc, #460]	; (800149c <MX_GPIO_Init+0x8bc>)
 80012d0:	f000 fe22 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80012d4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	486d      	ldr	r0, [pc, #436]	; (80014a0 <MX_GPIO_Init+0x8c0>)
 80012ea:	f000 fe15 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012ee:	2308      	movs	r3, #8
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fe:	230c      	movs	r3, #12
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	4619      	mov	r1, r3
 8001308:	4862      	ldr	r0, [pc, #392]	; (8001494 <MX_GPIO_Init+0x8b4>)
 800130a:	f000 fe05 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800130e:	2305      	movs	r3, #5
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800131e:	230a      	movs	r3, #10
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001326:	4619      	mov	r1, r3
 8001328:	485a      	ldr	r0, [pc, #360]	; (8001494 <MX_GPIO_Init+0x8b4>)
 800132a:	f000 fdf5 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800132e:	2332      	movs	r3, #50	; 0x32
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133e:	230b      	movs	r3, #11
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001346:	4619      	mov	r1, r3
 8001348:	4852      	ldr	r0, [pc, #328]	; (8001494 <MX_GPIO_Init+0x8b4>)
 800134a:	f000 fde5 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134e:	2304      	movs	r3, #4
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135e:	2309      	movs	r3, #9
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	484e      	ldr	r0, [pc, #312]	; (80014a4 <MX_GPIO_Init+0x8c4>)
 800136a:	f000 fdd5 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800136e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001380:	2309      	movs	r3, #9
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	4847      	ldr	r0, [pc, #284]	; (80014a8 <MX_GPIO_Init+0x8c8>)
 800138c:	f000 fdc4 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001390:	2304      	movs	r3, #4
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	483e      	ldr	r0, [pc, #248]	; (800149c <MX_GPIO_Init+0x8bc>)
 80013a4:	f000 fdb8 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013a8:	2386      	movs	r3, #134	; 0x86
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b8:	230b      	movs	r3, #11
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c0:	4619      	mov	r1, r3
 80013c2:	4833      	ldr	r0, [pc, #204]	; (8001490 <MX_GPIO_Init+0x8b0>)
 80013c4:	f000 fda8 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2303      	movs	r3, #3
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	4619      	mov	r1, r3
 80013da:	482d      	ldr	r0, [pc, #180]	; (8001490 <MX_GPIO_Init+0x8b0>)
 80013dc:	f000 fd9c 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013e0:	2350      	movs	r3, #80	; 0x50
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013f0:	230d      	movs	r3, #13
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	4619      	mov	r1, r3
 80013fa:	4825      	ldr	r0, [pc, #148]	; (8001490 <MX_GPIO_Init+0x8b0>)
 80013fc:	f000 fd8c 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001400:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001412:	2304      	movs	r3, #4
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <MX_GPIO_Init+0x8b8>)
 800141e:	f000 fd7b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001422:	2328      	movs	r3, #40	; 0x28
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001432:	230a      	movs	r3, #10
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143a:	4619      	mov	r1, r3
 800143c:	4814      	ldr	r0, [pc, #80]	; (8001490 <MX_GPIO_Init+0x8b0>)
 800143e:	f000 fd6b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001452:	2309      	movs	r3, #9
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145a:	4619      	mov	r1, r3
 800145c:	480e      	ldr	r0, [pc, #56]	; (8001498 <MX_GPIO_Init+0x8b8>)
 800145e:	f000 fd5b 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001462:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001474:	2305      	movs	r3, #5
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147c:	4619      	mov	r1, r3
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <MX_GPIO_Init+0x8c4>)
 8001480:	f000 fd4a 	bl	8001f18 <HAL_GPIO_Init>

}
 8001484:	bf00      	nop
 8001486:	3740      	adds	r7, #64	; 0x40
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40022000 	.word	0x40022000
 8001490:	40020000 	.word	0x40020000
 8001494:	40020800 	.word	0x40020800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021400 	.word	0x40021400
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020c00 	.word	0x40020c00

080014ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014b4:	1d39      	adds	r1, r7, #4
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2201      	movs	r2, #1
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <__io_putchar+0x20>)
 80014be:	f002 fae5 	bl	8003a8c <HAL_UART_Transmit>

	return ch;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200009bc 	.word	0x200009bc

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f000 fb7e 	bl	8001bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f897 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f7ff fb7f 	bl	8000be0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014e2:	f000 fa95 	bl	8001a10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Init\r\n");
 80014e6:	4832      	ldr	r0, [pc, #200]	; (80015b0 <main+0xe0>)
 80014e8:	f006 f8e8 	bl	80076bc <puts>
  semaphori = xSemaphoreCreateBinary();
 80014ec:	2203      	movs	r2, #3
 80014ee:	2100      	movs	r1, #0
 80014f0:	2001      	movs	r0, #1
 80014f2:	f003 fef7 	bl	80052e4 <xQueueGenericCreate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <main+0xe4>)
 80014fa:	6013      	str	r3, [r2, #0]
  semaphore_led = xSemaphoreCreateBinary();
 80014fc:	2203      	movs	r2, #3
 80014fe:	2100      	movs	r1, #0
 8001500:	2001      	movs	r0, #1
 8001502:	f003 feef 	bl	80052e4 <xQueueGenericCreate>
 8001506:	4603      	mov	r3, r0
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <main+0xe8>)
 800150a:	6013      	str	r3, [r2, #0]


  xReturned = xTaskCreate(
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <main+0xec>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <main+0xf0>)
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2304      	movs	r3, #4
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	4928      	ldr	r1, [pc, #160]	; (80015c4 <main+0xf4>)
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <main+0xf8>)
 8001524:	f004 f9cb 	bl	80058be <xTaskCreate>
 8001528:	4603      	mov	r3, r0
 800152a:	4a28      	ldr	r2, [pc, #160]	; (80015cc <main+0xfc>)
 800152c:	6013      	str	r3, [r2, #0]
    		STACK_SIZE, 	// Stack size in words, not bytes.
    		(void *)LED_DELAY, // Parameter passed into the task.
    		LED_PRIORITY,	// Priority at which the task is created.
    		&xHandleLED ); // Used to pass out the created task's handle.

  if(xReturned == pdTRUE)
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0xfc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d103      	bne.n	800153e <main+0x6e>
  {
	  printf("LED task created \r\n");
 8001536:	4826      	ldr	r0, [pc, #152]	; (80015d0 <main+0x100>)
 8001538:	f006 f8c0 	bl	80076bc <puts>
 800153c:	e002      	b.n	8001544 <main+0x74>
  }
  else
  {
	  printf("Error LED task not created \r\n");
 800153e:	4825      	ldr	r0, [pc, #148]	; (80015d4 <main+0x104>)
 8001540:	f006 f8bc 	bl	80076bc <puts>
  }




  xReturned = xTaskCreate(
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <main+0x108>)
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2305      	movs	r3, #5
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <main+0x10c>)
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <main+0x110>)
 8001556:	f004 f9b2 	bl	80058be <xTaskCreate>
 800155a:	4603      	mov	r3, r0
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <main+0xfc>)
 800155e:	6013      	str	r3, [r2, #0]
      		(void *) pdTRUE, /* Parameter passed into the task. */
      		SHELL_PRIORITY,/* Priority at which the task is created. */
      		&xHandleSHELL ); /* Used to pass out the created task's handle. */


  if(xReturned == pdTRUE)
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <main+0xfc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d103      	bne.n	8001570 <main+0xa0>
  {
	  printf("Shell task created \r\n");
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <main+0x114>)
 800156a:	f006 f8a7 	bl	80076bc <puts>
 800156e:	e002      	b.n	8001576 <main+0xa6>
  }
  else
  {
	  printf("Error Shell task not created \r\n");
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <main+0x118>)
 8001572:	f006 f8a3 	bl	80076bc <puts>
  }


	shell_init();
 8001576:	f7ff f8b1 	bl	80006dc <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <main+0x11c>)
 800157c:	491c      	ldr	r1, [pc, #112]	; (80015f0 <main+0x120>)
 800157e:	2066      	movs	r0, #102	; 0x66
 8001580:	f7ff f8d0 	bl	8000724 <shell_add>
	shell_add('a', addition, "addition de deux entiers");
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <main+0x124>)
 8001586:	491c      	ldr	r1, [pc, #112]	; (80015f8 <main+0x128>)
 8001588:	2061      	movs	r0, #97	; 0x61
 800158a:	f7ff f8cb 	bl	8000724 <shell_add>
	shell_add('l', setLedRate, "faire clignoter la led a la frequence 1/p");
 800158e:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <main+0x12c>)
 8001590:	491b      	ldr	r1, [pc, #108]	; (8001600 <main+0x130>)
 8001592:	206c      	movs	r0, #108	; 0x6c
 8001594:	f7ff f8c6 	bl	8000724 <shell_add>
	shell_add('s', spammer, "spam un mot le nombre que vous donnez en argument");
 8001598:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <main+0x134>)
 800159a:	491b      	ldr	r1, [pc, #108]	; (8001608 <main+0x138>)
 800159c:	2073      	movs	r0, #115	; 0x73
 800159e:	f7ff f8c1 	bl	8000724 <shell_add>

	vTaskStartScheduler();
 80015a2:	f004 fc39 	bl	8005e18 <vTaskStartScheduler>

	//shell_run(&h_shell); <-- plus besoin car appelée a la creation de la task
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015a6:	f7ff faf7 	bl	8000b98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015aa:	f003 fd15 	bl	8004fd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80015ae:	e7fe      	b.n	80015ae <main+0xde>
 80015b0:	08008a00 	.word	0x08008a00
 80015b4:	2000095c 	.word	0x2000095c
 80015b8:	20000960 	.word	0x20000960
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000964 	.word	0x20000964
 80015c4:	08008a08 	.word	0x08008a08
 80015c8:	08000a8d 	.word	0x08000a8d
 80015cc:	20000958 	.word	0x20000958
 80015d0:	08008a0c 	.word	0x08008a0c
 80015d4:	08008a20 	.word	0x08008a20
 80015d8:	20000968 	.word	0x20000968
 80015dc:	08008a40 	.word	0x08008a40
 80015e0:	0800087d 	.word	0x0800087d
 80015e4:	08008a48 	.word	0x08008a48
 80015e8:	08008a60 	.word	0x08008a60
 80015ec:	08008a80 	.word	0x08008a80
 80015f0:	08000955 	.word	0x08000955
 80015f4:	08008a98 	.word	0x08008a98
 80015f8:	0800098d 	.word	0x0800098d
 80015fc:	08008ab4 	.word	0x08008ab4
 8001600:	08000a19 	.word	0x08000a19
 8001604:	08008ae0 	.word	0x08008ae0
 8001608:	08000add 	.word	0x08000add

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	; 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f005 ff2b 	bl	8007476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <SystemClock_Config+0xc8>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <SystemClock_Config+0xc8>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <SystemClock_Config+0xc8>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <SystemClock_Config+0xcc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <SystemClock_Config+0xcc>)
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <SystemClock_Config+0xcc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001668:	2301      	movs	r3, #1
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166c:	2310      	movs	r3, #16
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001670:	2302      	movs	r3, #2
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001678:	230a      	movs	r3, #10
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800167c:	23d2      	movs	r3, #210	; 0xd2
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001680:	2302      	movs	r3, #2
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fe23 	bl	80022d8 <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001698:	f000 f832 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2105      	movs	r1, #5
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f8b0 	bl	8002820 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016c6:	f000 f81b 	bl	8001700 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3750      	adds	r7, #80	; 0x50
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ee:	f000 fa7f 	bl	8001bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_MspInit+0x4c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_MspInit+0x4c>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	210f      	movs	r1, #15
 8001746:	f06f 0001 	mvn.w	r0, #1
 800174a:	f000 fb29 	bl	8001da0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_InitTick+0xe0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_InitTick+0xe0>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_InitTick+0xe0>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001784:	f107 0210 	add.w	r2, r7, #16
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f001 fa2c 	bl	8002bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179e:	f001 f9fd 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 80017a2:	6378      	str	r0, [r7, #52]	; 0x34
 80017a4:	e004      	b.n	80017b0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017a6:	f001 f9f9 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 80017aa:	4603      	mov	r3, r0
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_InitTick+0xe4>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	3b01      	subs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_InitTick+0xe8>)
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_InitTick+0xec>)
 80017c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_InitTick+0xe8>)
 80017c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_InitTick+0xe8>)
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_InitTick+0xe8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_InitTick+0xe8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_InitTick+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017e4:	4817      	ldr	r0, [pc, #92]	; (8001844 <HAL_InitTick+0xe8>)
 80017e6:	f001 fe23 	bl	8003430 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d11b      	bne.n	8001830 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <HAL_InitTick+0xe8>)
 80017fa:	f001 fe7b 	bl	80034f4 <HAL_TIM_Base_Start_IT>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001808:	2b00      	cmp	r3, #0
 800180a:	d111      	bne.n	8001830 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800180c:	2036      	movs	r0, #54	; 0x36
 800180e:	f000 fae3 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d808      	bhi.n	800182a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	2036      	movs	r0, #54	; 0x36
 800181e:	f000 fabf 	bl	8001da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_InitTick+0xf0>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e002      	b.n	8001830 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001834:	4618      	mov	r0, r3
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	431bde83 	.word	0x431bde83
 8001844:	2000096c 	.word	0x2000096c
 8001848:	40001000 	.word	0x40001000
 800184c:	20000010 	.word	0x20000010

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	f002 f9cb 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200009bc 	.word	0x200009bc

08001890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM6_DAC_IRQHandler+0x10>)
 8001896:	f001 fea5 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000096c 	.word	0x2000096c

080018a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
  }

  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fdd7 	bl	80014ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
  }
  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f005 fc30 	bl	8007214 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20050000 	.word	0x20050000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	200009b8 	.word	0x200009b8
 80019e8:	200047a8 	.word	0x200047a8

080019ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <MX_USART1_UART_Init+0x5c>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART1_UART_Init+0x58>)
 8001a54:	f001 ffcc 	bl	80039f0 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f7ff fe4f 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200009bc 	.word	0x200009bc
 8001a6c:	40011000 	.word	0x40011000

08001a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ac      	sub	sp, #176	; 0xb0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	2284      	movs	r2, #132	; 0x84
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fcf0 	bl	8007476 <memset>
  if(uartHandle->Instance==USART1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_UART_MspInit+0x104>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d164      	bne.n	8001b6a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001aa0:	2340      	movs	r3, #64	; 0x40
 8001aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 f8cf 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab8:	f7ff fe22 	bl	8001700 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_UART_MspInit+0x108>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b26:	4619      	mov	r1, r3
 8001b28:	4814      	ldr	r0, [pc, #80]	; (8001b7c <HAL_UART_MspInit+0x10c>)
 8001b2a:	f000 f9f5 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b52:	4619      	mov	r1, r3
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <HAL_UART_MspInit+0x110>)
 8001b56:	f000 f9df 	bl	8001f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	2025      	movs	r0, #37	; 0x25
 8001b60:	f000 f91e 	bl	8001da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b64:	2025      	movs	r0, #37	; 0x25
 8001b66:	f000 f937 	bl	8001dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	37b0      	adds	r7, #176	; 0xb0
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020000 	.word	0x40020000

08001b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b8a:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba0:	4c0b      	ldr	r4, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bae:	f7ff ff1d 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f005 fc2b 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7ff fc8b 	bl	80014d0 <main>
  bx  lr    
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bc8:	08008cdc 	.word	0x08008cdc
  ldr r2, =_sbss
 8001bcc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bd0:	200047a4 	.word	0x200047a4

08001bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC_IRQHandler>

08001bd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bda:	2003      	movs	r0, #3
 8001bdc:	f000 f8d5 	bl	8001d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be0:	200f      	movs	r0, #15
 8001be2:	f7ff fdbb 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be6:	f7ff fd91 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000014 	.word	0x20000014
 8001c14:	20000a44 	.word	0x20000a44

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000a44 	.word	0x20000a44

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	05fa0000 	.word	0x05fa0000

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff4c 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db2:	f7ff ff61 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f7ff ffb1 	bl	8001d24 <NVIC_EncodePriority>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff80 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff54 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff ff09 	bl	8001c18 <HAL_GetTick>
 8001e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e052      	b.n	8001ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_Abort+0x62>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e76:	e013      	b.n	8001ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e78:	f7ff fece 	bl	8001c18 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d90c      	bls.n	8001ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e015      	b.n	8001ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e4      	bne.n	8001e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	223f      	movs	r2, #63	; 0x3f
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00c      	b.n	8001f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e175      	b.n	8002224 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8164 	bne.w	800221e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x56>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80be 	beq.w	800221e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_GPIO_Init+0x324>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a65      	ldr	r2, [pc, #404]	; (800223c <HAL_GPIO_Init+0x324>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_GPIO_Init+0x324>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020ba:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_GPIO_Init+0x328>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_GPIO_Init+0x32c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d037      	beq.n	8002156 <HAL_GPIO_Init+0x23e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_GPIO_Init+0x330>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d031      	beq.n	8002152 <HAL_GPIO_Init+0x23a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a56      	ldr	r2, [pc, #344]	; (800224c <HAL_GPIO_Init+0x334>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x236>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a55      	ldr	r2, [pc, #340]	; (8002250 <HAL_GPIO_Init+0x338>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x232>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a54      	ldr	r2, [pc, #336]	; (8002254 <HAL_GPIO_Init+0x33c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x22e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a53      	ldr	r2, [pc, #332]	; (8002258 <HAL_GPIO_Init+0x340>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x22a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_GPIO_Init+0x344>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x348>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x34c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x350>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x21a>
 800212e:	2309      	movs	r3, #9
 8002130:	e012      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002132:	230a      	movs	r3, #10
 8002134:	e010      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002136:	2308      	movs	r3, #8
 8002138:	e00e      	b.n	8002158 <HAL_GPIO_Init+0x240>
 800213a:	2307      	movs	r3, #7
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x240>
 800213e:	2306      	movs	r3, #6
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x240>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x240>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x240>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	; (8002240 <HAL_GPIO_Init+0x328>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_GPIO_Init+0x354>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <HAL_GPIO_Init+0x354>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_GPIO_Init+0x354>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <HAL_GPIO_Init+0x354>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_GPIO_Init+0x354>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_GPIO_Init+0x354>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_GPIO_Init+0x354>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_GPIO_Init+0x354>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae86 	bls.w	8001f38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40021400 	.word	0x40021400
 800225c:	40021800 	.word	0x40021800
 8002260:	40021c00 	.word	0x40021c00
 8002264:	40022000 	.word	0x40022000
 8002268:	40022400 	.word	0x40022400
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43d9      	mvns	r1, r3
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e291      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022fc:	4b96      	ldr	r3, [pc, #600]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b04      	cmp	r3, #4
 8002306:	d00c      	beq.n	8002322 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002308:	4b93      	ldr	r3, [pc, #588]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d112      	bne.n	800233a <HAL_RCC_OscConfig+0x62>
 8002314:	4b90      	ldr	r3, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002320:	d10b      	bne.n	800233a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002322:	4b8d      	ldr	r3, [pc, #564]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d06c      	beq.n	8002408 <HAL_RCC_OscConfig+0x130>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d168      	bne.n	8002408 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e26b      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x7a>
 8002344:	4b84      	ldr	r3, [pc, #528]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a83      	ldr	r2, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e02e      	b.n	80023b0 <HAL_RCC_OscConfig+0xd8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x9c>
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7e      	ldr	r2, [pc, #504]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b7c      	ldr	r3, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7b      	ldr	r2, [pc, #492]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800236c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01d      	b.n	80023b0 <HAL_RCC_OscConfig+0xd8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0xc0>
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a75      	ldr	r2, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b73      	ldr	r3, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a72      	ldr	r2, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xd8>
 8002398:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6b      	ldr	r2, [pc, #428]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff fc2e 	bl	8001c18 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fc2a 	bl	8001c18 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e21f      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe8>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc1a 	bl	8001c18 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fc16 	bl	8001c18 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e20b      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x110>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d069      	beq.n	80024ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x190>
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x17a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1df      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	493d      	ldr	r1, [pc, #244]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e040      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fbcc 	bl	8001c18 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff fbc8 	bl	8001c18 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1bd      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4929      	ldr	r1, [pc, #164]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
 80024b6:	e018      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff fba8 	bl	8001c18 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff fba4 	bl	8001c18 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e199      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d038      	beq.n	8002568 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff fb85 	bl	8001c18 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7ff fb81 	bl	8001c18 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e176      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x23a>
 8002530:	e01a      	b.n	8002568 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_RCC_OscConfig+0x280>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7ff fb6b 	bl	8001c18 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7ff fb67 	bl	8001c18 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d903      	bls.n	800255c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e15c      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
 8002558:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a4 	beq.w	80026be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a87      	ldr	r2, [pc, #540]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	4b82      	ldr	r3, [pc, #520]	; (80027a8 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025aa:	4b7f      	ldr	r3, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x4d0>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7ff fb2f 	bl	8001c18 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7ff fb2b 	bl	8001c18 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b64      	cmp	r3, #100	; 0x64
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e120      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x31a>
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a6e      	ldr	r2, [pc, #440]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e02d      	b.n	800264e <HAL_RCC_OscConfig+0x376>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x33c>
 80025fa:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a66      	ldr	r2, [pc, #408]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	e01c      	b.n	800264e <HAL_RCC_OscConfig+0x376>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x35e>
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a60      	ldr	r2, [pc, #384]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b5e      	ldr	r3, [pc, #376]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a5d      	ldr	r2, [pc, #372]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0x376>
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a5a      	ldr	r2, [pc, #360]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a57      	ldr	r2, [pc, #348]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7ff fadf 	bl	8001c18 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7ff fadb 	bl	8001c18 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0ce      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ee      	beq.n	800265e <HAL_RCC_OscConfig+0x386>
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff fac9 	bl	8001c18 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7ff fac5 	bl	8001c18 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a4 	beq.w	8002810 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d06b      	beq.n	80027ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d149      	bne.n	8002770 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a30      	ldr	r2, [pc, #192]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff fa96 	bl	8001c18 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff fa92 	bl	8001c18 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e087      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	4313      	orrs	r3, r2
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800273a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff fa66 	bl	8001c18 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff fa62 	bl	8001c18 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e057      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x478>
 800276e:	e04f      	b.n	8002810 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fa4c 	bl	8001c18 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7ff fa48 	bl	8001c18 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e03d      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x4ac>
 80027a2:	e035      	b.n	8002810 <HAL_RCC_OscConfig+0x538>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x544>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d028      	beq.n	800280c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d121      	bne.n	800280c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11a      	bne.n	800280c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0d0      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 020f 	bic.w	r2, r3, #15
 800284e:	4965      	ldr	r1, [pc, #404]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0b8      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	494d      	ldr	r1, [pc, #308]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d040      	beq.n	8002944 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d115      	bne.n	8002902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07f      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e073      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06b      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4936      	ldr	r1, [pc, #216]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002914:	f7ff f980 	bl	8001c18 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7ff f97c 	bl	8001c18 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e053      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d210      	bcs.n	8002974 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 020f 	bic.w	r2, r3, #15
 800295a:	4922      	ldr	r1, [pc, #136]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e032      	b.n	80029da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4916      	ldr	r1, [pc, #88]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029b2:	f000 f821 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	490a      	ldr	r1, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x1cc>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d0>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1d4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fec2 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023c00 	.word	0x40023c00
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08008b1c 	.word	0x08008b1c
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	20000010 	.word	0x20000010

080029f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029fc:	b090      	sub	sp, #64	; 0x40
 80029fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d00d      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	f200 80a1 	bhi.w	8002b64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x34>
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a2a:	e09b      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a30:	e09b      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a36:	e098      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	2200      	movs	r2, #0
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	627a      	str	r2, [r7, #36]	; 0x24
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a60:	2100      	movs	r1, #0
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a64:	fb03 f201 	mul.w	r2, r3, r1
 8002a68:	2300      	movs	r3, #0
 8002a6a:	fb00 f303 	mul.w	r3, r0, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a72:	fba0 1202 	umull	r1, r2, r0, r2
 8002a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a78:	460a      	mov	r2, r1
 8002a7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	4413      	add	r3, r2
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	2200      	movs	r2, #0
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	61fa      	str	r2, [r7, #28]
 8002a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a92:	f7fd fc0d 	bl	80002b0 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9e:	e053      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	617a      	str	r2, [r7, #20]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ab2:	f04f 0b00 	mov.w	fp, #0
 8002ab6:	4652      	mov	r2, sl
 8002ab8:	465b      	mov	r3, fp
 8002aba:	f04f 0000 	mov.w	r0, #0
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	0159      	lsls	r1, r3, #5
 8002ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac8:	0150      	lsls	r0, r2, #5
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	ebb2 080a 	subs.w	r8, r2, sl
 8002ad2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aea:	ebb2 0408 	subs.w	r4, r2, r8
 8002aee:	eb63 0509 	sbc.w	r5, r3, r9
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	00eb      	lsls	r3, r5, #3
 8002afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b00:	00e2      	lsls	r2, r4, #3
 8002b02:	4614      	mov	r4, r2
 8002b04:	461d      	mov	r5, r3
 8002b06:	eb14 030a 	adds.w	r3, r4, sl
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	eb45 030b 	adc.w	r3, r5, fp
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	028b      	lsls	r3, r1, #10
 8002b22:	4621      	mov	r1, r4
 8002b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b28:	4621      	mov	r1, r4
 8002b2a:	028a      	lsls	r2, r1, #10
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	2200      	movs	r2, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	60fa      	str	r2, [r7, #12]
 8002b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3c:	f7fd fbb8 	bl	80002b0 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4613      	mov	r3, r2
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3740      	adds	r7, #64	; 0x40
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	017d7840 	.word	0x017d7840

08002b84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000000c 	.word	0x2000000c

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba0:	f7ff fff0 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	08008b2c 	.word	0x08008b2c

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc8:	f7ff ffdc 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0b5b      	lsrs	r3, r3, #13
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08008b2c 	.word	0x08008b2c

08002bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_RCC_GetClockConfig+0x60>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c78:	4b69      	ldr	r3, [pc, #420]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c82:	6093      	str	r3, [r2, #8]
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	4964      	ldr	r1, [pc, #400]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002caa:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	4959      	ldr	r1, [pc, #356]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d017      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ce6:	4b4e      	ldr	r3, [pc, #312]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	494a      	ldr	r1, [pc, #296]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 808b 	beq.w	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe ff5e 	bl	8001c18 <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe ff5a 	bl	8001c18 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e357      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d035      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d02e      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9c:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d114      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe ff22 	bl	8001c18 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe ff1e 	bl	8001c18 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e319      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ee      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e06:	d111      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e16:	400b      	ands	r3, r1
 8002e18:	4901      	ldr	r1, [pc, #4]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	0ffffcff 	.word	0x0ffffcff
 8002e2c:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4aa9      	ldr	r2, [pc, #676]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e36:	6093      	str	r3, [r2, #8]
 8002e38:	4ba7      	ldr	r3, [pc, #668]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	49a4      	ldr	r1, [pc, #656]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e56:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5c:	4a9e      	ldr	r2, [pc, #632]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e66:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	4999      	ldr	r1, [pc, #612]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e84:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e92:	4991      	ldr	r1, [pc, #580]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea6:	4b8c      	ldr	r3, [pc, #560]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb4:	4988      	ldr	r1, [pc, #544]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec8:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed6:	4980      	ldr	r1, [pc, #512]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eea:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4977      	ldr	r1, [pc, #476]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0c:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	496f      	ldr	r1, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2e:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f023 020c 	bic.w	r2, r3, #12
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	4966      	ldr	r1, [pc, #408]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	495e      	ldr	r1, [pc, #376]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f72:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	4955      	ldr	r1, [pc, #340]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4944      	ldr	r1, [pc, #272]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	493c      	ldr	r1, [pc, #240]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	4933      	ldr	r1, [pc, #204]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	492b      	ldr	r1, [pc, #172]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800304c:	4922      	ldr	r1, [pc, #136]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	4912      	ldr	r1, [pc, #72]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b0:	4909      	ldr	r1, [pc, #36]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d006      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80d9 	beq.w	800327e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a01      	ldr	r2, [pc, #4]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fe fd9b 	bl	8001c18 <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030e6:	f7fe fd97 	bl	8001c18 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e194      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d021      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003126:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	0e1b      	lsrs	r3, r3, #24
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	4957      	ldr	r1, [pc, #348]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02e      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317e:	d129      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003180:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	0f1b      	lsrs	r3, r3, #28
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	019a      	lsls	r2, r3, #6
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	071b      	lsls	r3, r3, #28
 80031b4:	493d      	ldr	r1, [pc, #244]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031bc:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c2:	f023 021f 	bic.w	r2, r3, #31
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	3b01      	subs	r3, #1
 80031cc:	4937      	ldr	r1, [pc, #220]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01d      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031e0:	4b32      	ldr	r3, [pc, #200]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	0f1b      	lsrs	r3, r3, #28
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	071b      	lsls	r3, r3, #28
 8003214:	4925      	ldr	r1, [pc, #148]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d011      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	019a      	lsls	r2, r3, #6
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	071b      	lsls	r3, r3, #28
 8003244:	4919      	ldr	r1, [pc, #100]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe fcde 	bl	8001c18 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003260:	f7fe fcda 	bl	8001c18 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0d7      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80cd 	bne.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003292:	f7fe fcc1 	bl	8001c18 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800329a:	f7fe fcbd 	bl	8001c18 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d903      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0ba      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032b0:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032bc:	d0ed      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d02e      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d12a      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	0f1b      	lsrs	r3, r3, #28
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	019a      	lsls	r2, r3, #6
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	061b      	lsls	r3, r3, #24
 8003314:	431a      	orrs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	4944      	ldr	r1, [pc, #272]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003322:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	493d      	ldr	r1, [pc, #244]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d022      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003350:	d11d      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003352:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	0e1b      	lsrs	r3, r3, #24
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	0f1b      	lsrs	r3, r3, #28
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	019a      	lsls	r2, r3, #6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	061b      	lsls	r3, r3, #24
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	071b      	lsls	r3, r3, #28
 8003386:	4929      	ldr	r1, [pc, #164]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d028      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	0e1b      	lsrs	r3, r3, #24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	4917      	ldr	r1, [pc, #92]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4911      	ldr	r1, [pc, #68]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe fc0e 	bl	8001c18 <HAL_GetTick>
 80033fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003400:	f7fe fc0a 	bl	8001c18 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e007      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800341e:	d1ef      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e049      	b.n	80034d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f841 	bl	80034de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fa00 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e054      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d01d      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIM_Base_Start_IT+0xe8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d115      	bne.n	80035a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_TIM_Base_Start_IT+0xec>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d015      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d011      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	e008      	b.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f905 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8f7 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f908 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8db 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8cd 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8de 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8b1 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8a3 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8b4 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f887 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f879 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f88a 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd ffba 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f91a 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f90d 	bl	80039dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f838 	bl	800385e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8cd 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a40      	ldr	r2, [pc, #256]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d00f      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3d      	ldr	r2, [pc, #244]	; (800398c <TIM_Base_SetConfig+0x118>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d108      	bne.n	80038c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <TIM_Base_SetConfig+0x114>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d027      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <TIM_Base_SetConfig+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d023      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d017      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <TIM_Base_SetConfig+0x128>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <TIM_Base_SetConfig+0x12c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <TIM_Base_SetConfig+0x130>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0x134>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <TIM_Base_SetConfig+0x138>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <TIM_Base_SetConfig+0x13c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d108      	bne.n	8003938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0xf8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <TIM_Base_SetConfig+0x124>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40010400 	.word	0x40010400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40001800 	.word	0x40001800
 80039ac:	40001c00 	.word	0x40001c00
 80039b0:	40002000 	.word	0x40002000

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e040      	b.n	8003a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe f82c 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fbe6 	bl	8004200 <UART_SetConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fe3e 	bl	80046c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fec5 	bl	800480c <UART_CheckIdleState>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d171      	bne.n	8003b88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Transmit+0x24>
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e06a      	b.n	8003b8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2221      	movs	r2, #33	; 0x21
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac2:	f7fe f8a9 	bl	8001c18 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x68>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e02c      	b.n	8003b58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 feb6 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e038      	b.n	8003b8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3302      	adds	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e007      	b.n	8003b46 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1cc      	bne.n	8003afe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fe83 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e005      	b.n	8003b8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08a      	sub	sp, #40	; 0x28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d132      	bne.n	8003c10 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_Receive_IT+0x24>
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e02b      	b.n	8003c12 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	613b      	str	r3, [r7, #16]
   return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	69f9      	ldr	r1, [r7, #28]
 8003bf2:	6a3a      	ldr	r2, [r7, #32]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e6      	bne.n	8003bce <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fefe 	bl	8004a08 <UART_Start_Receive_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	e000      	b.n	8003c12 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b0ba      	sub	sp, #232	; 0xe8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d115      	bne.n	8003c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00f      	beq.n	8003c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8297 	beq.w	80041a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
      }
      return;
 8003c82:	e291      	b.n	80041a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8117 	beq.w	8003ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c9e:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <HAL_UART_IRQHandler+0x298>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 810a 	beq.w	8003ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xbc>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <HAL_UART_IRQHandler+0xec>
 8003ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
 8003d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2204      	movs	r2, #4
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	f043 0202 	orr.w	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	f043 0208 	orr.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d012      	beq.n	8003da6 <HAL_UART_IRQHandler+0x18a>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 81fd 	beq.w	80041ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d005      	beq.n	8003dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04f      	beq.n	8003e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fec8 	bl	8004b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d141      	bne.n	8003e96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d9      	bne.n	8003e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <HAL_UART_IRQHandler+0x29c>)
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe f82e 	bl	8001ed4 <HAL_DMA_Abort_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d017      	beq.n	8003eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	e00f      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9a0 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00b      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f99c 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e007      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f998 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003eac:	e17e      	b.n	80041ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	bf00      	nop
    return;
 8003eb0:	e17c      	b.n	80041ac <HAL_UART_IRQHandler+0x590>
 8003eb2:	bf00      	nop
 8003eb4:	04000120 	.word	0x04000120
 8003eb8:	08004c5d 	.word	0x08004c5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 814c 	bne.w	800415e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8145 	beq.w	800415e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 813e 	beq.w	800415e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	f040 80b6 	bne.w	8004066 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8150 	beq.w	80041b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	f080 8148 	bcs.w	80041b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	f000 8086 	beq.w	8004044 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1da      	bne.n	8003f38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e1      	bne.n	8003f82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e3      	bne.n	8003fbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004026:	65bb      	str	r3, [r7, #88]	; 0x58
 8004028:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800402c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e4      	bne.n	8004004 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fed8 	bl	8001df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004056:	b29b      	uxth	r3, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8c2 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004064:	e0a4      	b.n	80041b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8096 	beq.w	80041b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8091 	beq.w	80041b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
 80040b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e4      	bne.n	8004092 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	623b      	str	r3, [r7, #32]
   return(result);
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040ec:	633a      	str	r2, [r7, #48]	; 0x30
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e3      	bne.n	80040c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	60fb      	str	r3, [r7, #12]
   return(result);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0310 	bic.w	r3, r3, #16
 8004128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	617b      	str	r3, [r7, #20]
   return(result);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e4      	bne.n	8004114 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f846 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800415c:	e02a      	b.n	80041b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800416a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    }
    return;
 8004186:	e017      	b.n	80041b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <HAL_UART_IRQHandler+0x59e>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00c      	beq.n	80041ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fd71 	bl	8004c88 <UART_EndTransmit_IT>
    return;
 80041a6:	e008      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041a8:	bf00      	nop
 80041aa:	e006      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
    return;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
    return;
 80041b8:	bf00      	nop
  }

}
 80041ba:	37e8      	adds	r7, #232	; 0xe8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <UART_SetConfig+0x2c4>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	430b      	orrs	r3, r1
 8004236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a94      	ldr	r2, [pc, #592]	; (80044c8 <UART_SetConfig+0x2c8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d120      	bne.n	80042be <UART_SetConfig+0xbe>
 800427c:	4b93      	ldr	r3, [pc, #588]	; (80044cc <UART_SetConfig+0x2cc>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d816      	bhi.n	80042b8 <UART_SetConfig+0xb8>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x90>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042ad 	.word	0x080042ad
 8004298:	080042a7 	.word	0x080042a7
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e150      	b.n	8004548 <UART_SetConfig+0x348>
 80042a6:	2302      	movs	r3, #2
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e14d      	b.n	8004548 <UART_SetConfig+0x348>
 80042ac:	2304      	movs	r3, #4
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e14a      	b.n	8004548 <UART_SetConfig+0x348>
 80042b2:	2308      	movs	r3, #8
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e147      	b.n	8004548 <UART_SetConfig+0x348>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e144      	b.n	8004548 <UART_SetConfig+0x348>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a83      	ldr	r2, [pc, #524]	; (80044d0 <UART_SetConfig+0x2d0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d132      	bne.n	800432e <UART_SetConfig+0x12e>
 80042c8:	4b80      	ldr	r3, [pc, #512]	; (80044cc <UART_SetConfig+0x2cc>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d828      	bhi.n	8004328 <UART_SetConfig+0x128>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0xdc>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004329 	.word	0x08004329
 80042e4:	08004329 	.word	0x08004329
 80042e8:	08004329 	.word	0x08004329
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	08004329 	.word	0x08004329
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004329 	.word	0x08004329
 80042fc:	08004317 	.word	0x08004317
 8004300:	08004329 	.word	0x08004329
 8004304:	08004329 	.word	0x08004329
 8004308:	08004329 	.word	0x08004329
 800430c:	08004323 	.word	0x08004323
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e118      	b.n	8004548 <UART_SetConfig+0x348>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e115      	b.n	8004548 <UART_SetConfig+0x348>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e112      	b.n	8004548 <UART_SetConfig+0x348>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e10f      	b.n	8004548 <UART_SetConfig+0x348>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e10c      	b.n	8004548 <UART_SetConfig+0x348>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a68      	ldr	r2, [pc, #416]	; (80044d4 <UART_SetConfig+0x2d4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d120      	bne.n	800437a <UART_SetConfig+0x17a>
 8004338:	4b64      	ldr	r3, [pc, #400]	; (80044cc <UART_SetConfig+0x2cc>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004342:	2b30      	cmp	r3, #48	; 0x30
 8004344:	d013      	beq.n	800436e <UART_SetConfig+0x16e>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d814      	bhi.n	8004374 <UART_SetConfig+0x174>
 800434a:	2b20      	cmp	r3, #32
 800434c:	d009      	beq.n	8004362 <UART_SetConfig+0x162>
 800434e:	2b20      	cmp	r3, #32
 8004350:	d810      	bhi.n	8004374 <UART_SetConfig+0x174>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <UART_SetConfig+0x15c>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d006      	beq.n	8004368 <UART_SetConfig+0x168>
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x174>
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e0f2      	b.n	8004548 <UART_SetConfig+0x348>
 8004362:	2302      	movs	r3, #2
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e0ef      	b.n	8004548 <UART_SetConfig+0x348>
 8004368:	2304      	movs	r3, #4
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e0ec      	b.n	8004548 <UART_SetConfig+0x348>
 800436e:	2308      	movs	r3, #8
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e0e9      	b.n	8004548 <UART_SetConfig+0x348>
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e0e6      	b.n	8004548 <UART_SetConfig+0x348>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a56      	ldr	r2, [pc, #344]	; (80044d8 <UART_SetConfig+0x2d8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0x1c6>
 8004384:	4b51      	ldr	r3, [pc, #324]	; (80044cc <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800438e:	2bc0      	cmp	r3, #192	; 0xc0
 8004390:	d013      	beq.n	80043ba <UART_SetConfig+0x1ba>
 8004392:	2bc0      	cmp	r3, #192	; 0xc0
 8004394:	d814      	bhi.n	80043c0 <UART_SetConfig+0x1c0>
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d009      	beq.n	80043ae <UART_SetConfig+0x1ae>
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d810      	bhi.n	80043c0 <UART_SetConfig+0x1c0>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <UART_SetConfig+0x1a8>
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d006      	beq.n	80043b4 <UART_SetConfig+0x1b4>
 80043a6:	e00b      	b.n	80043c0 <UART_SetConfig+0x1c0>
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0cc      	b.n	8004548 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e0c9      	b.n	8004548 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e0c6      	b.n	8004548 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e0c3      	b.n	8004548 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0c0      	b.n	8004548 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a44      	ldr	r2, [pc, #272]	; (80044dc <UART_SetConfig+0x2dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d125      	bne.n	800441c <UART_SetConfig+0x21c>
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043de:	d017      	beq.n	8004410 <UART_SetConfig+0x210>
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d817      	bhi.n	8004416 <UART_SetConfig+0x216>
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d00b      	beq.n	8004404 <UART_SetConfig+0x204>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d811      	bhi.n	8004416 <UART_SetConfig+0x216>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <UART_SetConfig+0x1fe>
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d006      	beq.n	800440a <UART_SetConfig+0x20a>
 80043fc:	e00b      	b.n	8004416 <UART_SetConfig+0x216>
 80043fe:	2300      	movs	r3, #0
 8004400:	77fb      	strb	r3, [r7, #31]
 8004402:	e0a1      	b.n	8004548 <UART_SetConfig+0x348>
 8004404:	2302      	movs	r3, #2
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e09e      	b.n	8004548 <UART_SetConfig+0x348>
 800440a:	2304      	movs	r3, #4
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e09b      	b.n	8004548 <UART_SetConfig+0x348>
 8004410:	2308      	movs	r3, #8
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e098      	b.n	8004548 <UART_SetConfig+0x348>
 8004416:	2310      	movs	r3, #16
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e095      	b.n	8004548 <UART_SetConfig+0x348>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <UART_SetConfig+0x2e0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d125      	bne.n	8004472 <UART_SetConfig+0x272>
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <UART_SetConfig+0x2cc>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d017      	beq.n	8004466 <UART_SetConfig+0x266>
 8004436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443a:	d817      	bhi.n	800446c <UART_SetConfig+0x26c>
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004440:	d00b      	beq.n	800445a <UART_SetConfig+0x25a>
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d811      	bhi.n	800446c <UART_SetConfig+0x26c>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <UART_SetConfig+0x254>
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d006      	beq.n	8004460 <UART_SetConfig+0x260>
 8004452:	e00b      	b.n	800446c <UART_SetConfig+0x26c>
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e076      	b.n	8004548 <UART_SetConfig+0x348>
 800445a:	2302      	movs	r3, #2
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e073      	b.n	8004548 <UART_SetConfig+0x348>
 8004460:	2304      	movs	r3, #4
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e070      	b.n	8004548 <UART_SetConfig+0x348>
 8004466:	2308      	movs	r3, #8
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e06d      	b.n	8004548 <UART_SetConfig+0x348>
 800446c:	2310      	movs	r3, #16
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e06a      	b.n	8004548 <UART_SetConfig+0x348>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <UART_SetConfig+0x2e4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d138      	bne.n	80044ee <UART_SetConfig+0x2ee>
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <UART_SetConfig+0x2cc>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800448a:	d017      	beq.n	80044bc <UART_SetConfig+0x2bc>
 800448c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004490:	d82a      	bhi.n	80044e8 <UART_SetConfig+0x2e8>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d00b      	beq.n	80044b0 <UART_SetConfig+0x2b0>
 8004498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449c:	d824      	bhi.n	80044e8 <UART_SetConfig+0x2e8>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <UART_SetConfig+0x2aa>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d006      	beq.n	80044b6 <UART_SetConfig+0x2b6>
 80044a8:	e01e      	b.n	80044e8 <UART_SetConfig+0x2e8>
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e04b      	b.n	8004548 <UART_SetConfig+0x348>
 80044b0:	2302      	movs	r3, #2
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e048      	b.n	8004548 <UART_SetConfig+0x348>
 80044b6:	2304      	movs	r3, #4
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e045      	b.n	8004548 <UART_SetConfig+0x348>
 80044bc:	2308      	movs	r3, #8
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e042      	b.n	8004548 <UART_SetConfig+0x348>
 80044c2:	bf00      	nop
 80044c4:	efff69f3 	.word	0xefff69f3
 80044c8:	40011000 	.word	0x40011000
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	40005000 	.word	0x40005000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	40007800 	.word	0x40007800
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e02c      	b.n	8004548 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a72      	ldr	r2, [pc, #456]	; (80046bc <UART_SetConfig+0x4bc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d125      	bne.n	8004544 <UART_SetConfig+0x344>
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <UART_SetConfig+0x4c0>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004506:	d017      	beq.n	8004538 <UART_SetConfig+0x338>
 8004508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450c:	d817      	bhi.n	800453e <UART_SetConfig+0x33e>
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004512:	d00b      	beq.n	800452c <UART_SetConfig+0x32c>
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004518:	d811      	bhi.n	800453e <UART_SetConfig+0x33e>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <UART_SetConfig+0x326>
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004522:	d006      	beq.n	8004532 <UART_SetConfig+0x332>
 8004524:	e00b      	b.n	800453e <UART_SetConfig+0x33e>
 8004526:	2300      	movs	r3, #0
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e00d      	b.n	8004548 <UART_SetConfig+0x348>
 800452c:	2302      	movs	r3, #2
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e00a      	b.n	8004548 <UART_SetConfig+0x348>
 8004532:	2304      	movs	r3, #4
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e007      	b.n	8004548 <UART_SetConfig+0x348>
 8004538:	2308      	movs	r3, #8
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e004      	b.n	8004548 <UART_SetConfig+0x348>
 800453e:	2310      	movs	r3, #16
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e001      	b.n	8004548 <UART_SetConfig+0x348>
 8004544:	2310      	movs	r3, #16
 8004546:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	d15b      	bne.n	800460a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004552:	7ffb      	ldrb	r3, [r7, #31]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d828      	bhi.n	80045aa <UART_SetConfig+0x3aa>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x360>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045ab 	.word	0x080045ab
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fb0a 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e013      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fb1a 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <UART_SetConfig+0x4c4>)
 8004596:	61bb      	str	r3, [r7, #24]
        break;
 8004598:	e00c      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fa2d 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 800459e:	61b8      	str	r0, [r7, #24]
        break;
 80045a0:	e008      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e004      	b.n	80045b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	77bb      	strb	r3, [r7, #30]
        break;
 80045b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d074      	beq.n	80046a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	005a      	lsls	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	441a      	add	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d916      	bls.n	8004604 <UART_SetConfig+0x404>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d212      	bcs.n	8004604 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f023 030f 	bic.w	r3, r3, #15
 80045e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	89fa      	ldrh	r2, [r7, #14]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	e04f      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77bb      	strb	r3, [r7, #30]
 8004608:	e04c      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460a:	7ffb      	ldrb	r3, [r7, #31]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d828      	bhi.n	8004662 <UART_SetConfig+0x462>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x418>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004663 	.word	0x08004663
 8004628:	08004653 	.word	0x08004653
 800462c:	08004663 	.word	0x08004663
 8004630:	08004663 	.word	0x08004663
 8004634:	08004663 	.word	0x08004663
 8004638:	0800465b 	.word	0x0800465b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe faae 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8004640:	61b8      	str	r0, [r7, #24]
        break;
 8004642:	e013      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe fabe 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8004648:	61b8      	str	r0, [r7, #24]
        break;
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <UART_SetConfig+0x4c4>)
 800464e:	61bb      	str	r3, [r7, #24]
        break;
 8004650:	e00c      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004652:	f7fe f9d1 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8004656:	61b8      	str	r0, [r7, #24]
        break;
 8004658:	e008      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465e:	61bb      	str	r3, [r7, #24]
        break;
 8004660:	e004      	b.n	800466c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	77bb      	strb	r3, [r7, #30]
        break;
 800466a:	bf00      	nop
    }

    if (pclk != 0U)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085a      	lsrs	r2, r3, #1
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d909      	bls.n	80046a0 <UART_SetConfig+0x4a0>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004692:	d205      	bcs.n	80046a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e001      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40007c00 	.word	0x40007c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400

080046c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c6:	d10a      	bne.n	80047de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800481c:	f7fd f9fc 	bl	8001c18 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10e      	bne.n	800484e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f81b 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e011      	b.n	8004872 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b09c      	sub	sp, #112	; 0x70
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e0a7      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	f000 80a3 	beq.w	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fd f9bf 	bl	8001c18 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
 80048a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13f      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c0:	667b      	str	r3, [r7, #100]	; 0x64
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e068      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d050      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004948:	d148      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004952:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
 8004974:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	66bb      	str	r3, [r7, #104]	; 0x68
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a6:	623a      	str	r2, [r7, #32]
 80049a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e010      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	f43f af48 	beq.w	800488c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3770      	adds	r7, #112	; 0x70
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b097      	sub	sp, #92	; 0x5c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d10e      	bne.n	8004a5a <UART_Start_Receive_IT+0x52>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <UART_Start_Receive_IT+0x48>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a4e:	e02d      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	22ff      	movs	r2, #255	; 0xff
 8004a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a58:	e028      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10d      	bne.n	8004a7e <UART_Start_Receive_IT+0x76>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <UART_Start_Receive_IT+0x6c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a72:	e01b      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	227f      	movs	r2, #127	; 0x7f
 8004a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a7c:	e016      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a86:	d10d      	bne.n	8004aa4 <UART_Start_Receive_IT+0x9c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <UART_Start_Receive_IT+0x92>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	227f      	movs	r2, #127	; 0x7f
 8004a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a98:	e008      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	223f      	movs	r2, #63	; 0x3f
 8004a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa2:	e003      	b.n	8004aac <UART_Start_Receive_IT+0xa4>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2222      	movs	r2, #34	; 0x22
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004adc:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	d107      	bne.n	8004b0a <UART_Start_Receive_IT+0x102>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <UART_Start_Receive_IT+0x184>)
 8004b06:	669a      	str	r2, [r3, #104]	; 0x68
 8004b08:	e002      	b.n	8004b10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <UART_Start_Receive_IT+0x188>)
 8004b0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d019      	beq.n	8004b4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
 8004b38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_Start_Receive_IT+0x110>
 8004b4a:	e018      	b.n	8004b7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	653b      	str	r3, [r7, #80]	; 0x50
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e6      	bne.n	8004b4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	375c      	adds	r7, #92	; 0x5c
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	08004e43 	.word	0x08004e43
 8004b90:	08004cdd 	.word	0x08004cdd

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b095      	sub	sp, #84	; 0x54
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
 8004bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d118      	bne.n	8004c3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	613b      	str	r3, [r7, #16]
   return(result);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c50:	bf00      	nop
 8004c52:	3754      	adds	r7, #84	; 0x54
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff faaa 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6979      	ldr	r1, [r7, #20]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fa76 	bl	80041c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd4:	bf00      	nop
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b096      	sub	sp, #88	; 0x58
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf4:	2b22      	cmp	r3, #34	; 0x22
 8004cf6:	f040 8098 	bne.w	8004e2a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d04:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d08:	b2d9      	uxtb	r1, r3
 8004d0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	400a      	ands	r2, r1
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d17b      	bne.n	8004e3a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
 8004d62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e6      	bne.n	8004d42 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	623b      	str	r3, [r7, #32]
   return(result);
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d94:	633a      	str	r2, [r7, #48]	; 0x30
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e5      	bne.n	8004d74 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d12e      	bne.n	8004e22 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	617b      	str	r3, [r7, #20]
   return(result);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d103      	bne.n	8004e12 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2210      	movs	r2, #16
 8004e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff f9e4 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e20:	e00b      	b.n	8004e3a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fb fbe0 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8004e28:	e007      	b.n	8004e3a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0208 	orr.w	r2, r2, #8
 8004e38:	619a      	str	r2, [r3, #24]
}
 8004e3a:	bf00      	nop
 8004e3c:	3758      	adds	r7, #88	; 0x58
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b096      	sub	sp, #88	; 0x58
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	2b22      	cmp	r3, #34	; 0x22
 8004e5c:	f040 8098 	bne.w	8004f90 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004e74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d17b      	bne.n	8004fa0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d12e      	bne.n	8004f88 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d103      	bne.n	8004f78 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2210      	movs	r2, #16
 8004f76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff f931 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f86:	e00b      	b.n	8004fa0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fb fb2d 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8004f8e:	e007      	b.n	8004fa0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	619a      	str	r2, [r3, #24]
}
 8004fa0:	bf00      	nop
 8004fa2:	3758      	adds	r7, #88	; 0x58
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fba:	2b84      	cmp	r3, #132	; 0x84
 8004fbc:	d005      	beq.n	8004fca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fdc:	f000 ff1c 	bl	8005e18 <vTaskStartScheduler>
  
  return osOK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe8:	b089      	sub	sp, #36	; 0x24
 8004fea:	af04      	add	r7, sp, #16
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <osThreadCreate+0x54>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01c      	beq.n	800503a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685c      	ldr	r4, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681d      	ldr	r5, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691e      	ldr	r6, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ffc8 	bl	8004fa8 <makeFreeRtosPriority>
 8005018:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005022:	9202      	str	r2, [sp, #8]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	9100      	str	r1, [sp, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4632      	mov	r2, r6
 800502c:	4629      	mov	r1, r5
 800502e:	4620      	mov	r0, r4
 8005030:	f000 fbe2 	bl	80057f8 <xTaskCreateStatic>
 8005034:	4603      	mov	r3, r0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e01c      	b.n	8005074 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685c      	ldr	r4, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005046:	b29e      	uxth	r6, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ffaa 	bl	8004fa8 <makeFreeRtosPriority>
 8005054:	4602      	mov	r2, r0
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	9200      	str	r2, [sp, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	4632      	mov	r2, r6
 8005062:	4629      	mov	r1, r5
 8005064:	4620      	mov	r0, r4
 8005066:	f000 fc2a 	bl	80058be <xTaskCreate>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800507e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <osDelay+0x16>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e000      	b.n	8005096 <osDelay+0x18>
 8005094:	2301      	movs	r3, #1
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fd60 	bl	8005b5c <vTaskDelay>
  
  return osOK;
 800509c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f103 0208 	add.w	r2, r3, #8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f103 0208 	add.w	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f103 0208 	add.w	r2, r3, #8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d103      	bne.n	8005168 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e00c      	b.n	8005182 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3308      	adds	r3, #8
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e002      	b.n	8005176 <vListInsert+0x2e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	d2f6      	bcs.n	8005170 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6892      	ldr	r2, [r2, #8]
 80051d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6852      	ldr	r2, [r2, #4]
 80051da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d103      	bne.n	80051ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005224:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005228:	b672      	cpsid	i
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	b662      	cpsie	i
 8005238:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800523e:	f001 fcd5 	bl	8006bec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	3b01      	subs	r3, #1
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005274:	fb01 f303 	mul.w	r3, r1, r3
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	22ff      	movs	r2, #255	; 0xff
 8005282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	22ff      	movs	r2, #255	; 0xff
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d114      	bne.n	80052be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3310      	adds	r3, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f817 	bl	80062d4 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <xQueueGenericReset+0xd0>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	e009      	b.n	80052d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3310      	adds	r3, #16
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff feef 	bl	80050a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3324      	adds	r3, #36	; 0x24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff feea 	bl	80050a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052d2:	f001 fcbf 	bl	8006c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052d6:	2301      	movs	r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10c      	bne.n	8005312 <xQueueGenericCreate+0x2e>
	__asm volatile
 80052f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	613b      	str	r3, [r7, #16]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e004      	b.n	8005328 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3348      	adds	r3, #72	; 0x48
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fd89 	bl	8006e44 <pvPortMalloc>
 8005332:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3348      	adds	r3, #72	; 0x48
 8005342:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f805 	bl	8005368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800535e:	69bb      	ldr	r3, [r7, #24]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e002      	b.n	800538a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005396:	2101      	movs	r1, #1
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f7ff ff39 	bl	8005210 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b08e      	sub	sp, #56	; 0x38
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80053ba:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053be:	b672      	cpsid	i
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	b662      	cpsie	i
 80053ce:	623b      	str	r3, [r7, #32]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <xQueueGiveFromISR+0x50>
	__asm volatile
 80053dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	61fb      	str	r3, [r7, #28]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueGiveFromISR+0x60>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueGiveFromISR+0x64>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueGiveFromISR+0x66>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10c      	bne.n	800542a <xQueueGiveFromISR+0x84>
	__asm volatile
 8005410:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005414:	b672      	cpsid	i
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	b662      	cpsie	i
 8005424:	61bb      	str	r3, [r7, #24]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800542a:	f001 fcc7 	bl	8006dbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800542e:	f3ef 8211 	mrs	r2, BASEPRI
 8005432:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005436:	b672      	cpsid	i
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	b662      	cpsie	i
 8005446:	617a      	str	r2, [r7, #20]
 8005448:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800544a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545a:	429a      	cmp	r2, r3
 800545c:	d22b      	bcs.n	80054b6 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d112      	bne.n	80054a0 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	3324      	adds	r3, #36	; 0x24
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff24 	bl	80062d4 <xTaskRemoveFromEventList>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e007      	b.n	80054b0 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a4:	3301      	adds	r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	b25a      	sxtb	r2, r3
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 80054b4:	e001      	b.n	80054ba <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3738      	adds	r7, #56	; 0x38
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10c      	bne.n	8005506 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80054ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054f0:	b672      	cpsid	i
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	b662      	cpsie	i
 8005500:	623b      	str	r3, [r7, #32]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800550e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005512:	b672      	cpsid	i
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	b662      	cpsie	i
 8005522:	61fb      	str	r3, [r7, #28]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005528:	f001 f89c 	bl	8006664 <xTaskGetSchedulerState>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <xQueueSemaphoreTake+0x68>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueSemaphoreTake+0x6c>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueSemaphoreTake+0x6e>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10c      	bne.n	800555c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005542:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005546:	b672      	cpsid	i
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	b662      	cpsie	i
 8005556:	61bb      	str	r3, [r7, #24]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800555c:	f001 fb46 	bl	8006bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d024      	beq.n	80055b6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800557c:	f001 f9ae 	bl	80068dc <pvTaskIncrementMutexHeldCount>
 8005580:	4602      	mov	r2, r0
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00f      	beq.n	80055ae <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	3310      	adds	r3, #16
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fe9e 	bl	80062d4 <xTaskRemoveFromEventList>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <xQueueSemaphoreTake+0x224>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ae:	f001 fb51 	bl	8006c54 <vPortExitCritical>
				return pdPASS;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e099      	b.n	80056ea <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d113      	bne.n	80055e4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80055c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055c6:	b672      	cpsid	i
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	b662      	cpsie	i
 80055d6:	617b      	str	r3, [r7, #20]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80055dc:	f001 fb3a 	bl	8006c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e082      	b.n	80056ea <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fed4 	bl	800639c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f8:	f001 fb2c 	bl	8006c54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fc:	f000 fc7a 	bl	8005ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005600:	f001 faf4 	bl	8006bec <vPortEnterCritical>
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d103      	bne.n	800561a <xQueueSemaphoreTake+0x14a>
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d103      	bne.n	8005630 <xQueueSemaphoreTake+0x160>
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005630:	f001 fb10 	bl	8006c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005634:	463a      	mov	r2, r7
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fec3 	bl	80063c8 <xTaskCheckForTimeOut>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d132      	bne.n	80056ae <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800564a:	f000 f8bf 	bl	80057cc <prvIsQueueEmpty>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d026      	beq.n	80056a2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800565c:	f001 fac6 	bl	8006bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f81b 	bl	80066a0 <xTaskPriorityInherit>
 800566a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800566c:	f001 faf2 	bl	8006c54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	3324      	adds	r3, #36	; 0x24
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fe05 	bl	8006288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800567e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005680:	f000 f852 	bl	8005728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005684:	f000 fc44 	bl	8005f10 <xTaskResumeAll>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	f47f af66 	bne.w	800555c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <xQueueSemaphoreTake+0x224>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	e75c      	b.n	800555c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056a4:	f000 f840 	bl	8005728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056a8:	f000 fc32 	bl	8005f10 <xTaskResumeAll>
 80056ac:	e756      	b.n	800555c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056b0:	f000 f83a 	bl	8005728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056b4:	f000 fc2c 	bl	8005f10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ba:	f000 f887 	bl	80057cc <prvIsQueueEmpty>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f43f af4b 	beq.w	800555c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00d      	beq.n	80056e8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80056cc:	f001 fa8e 	bl	8006bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056d2:	f000 f811 	bl	80056f8 <prvGetDisinheritPriorityAfterTimeout>
 80056d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 f85e 	bl	80067a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056e4:	f001 fab6 	bl	8006c54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3738      	adds	r7, #56	; 0x38
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d006      	beq.n	8005716 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1c3 0307 	rsb	r3, r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e001      	b.n	800571a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800571a:	68fb      	ldr	r3, [r7, #12]
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005730:	f001 fa5c 	bl	8006bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573c:	e011      	b.n	8005762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3324      	adds	r3, #36	; 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fdc2 	bl	80062d4 <xTaskRemoveFromEventList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005756:	f000 fe9d 	bl	8006494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	3b01      	subs	r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dce9      	bgt.n	800573e <prvUnlockQueue+0x16>
 800576a:	e000      	b.n	800576e <prvUnlockQueue+0x46>
					break;
 800576c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	22ff      	movs	r2, #255	; 0xff
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005776:	f001 fa6d 	bl	8006c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800577a:	f001 fa37 	bl	8006bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005786:	e011      	b.n	80057ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3310      	adds	r3, #16
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fd9d 	bl	80062d4 <xTaskRemoveFromEventList>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057a0:	f000 fe78 	bl	8006494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dce9      	bgt.n	8005788 <prvUnlockQueue+0x60>
 80057b4:	e000      	b.n	80057b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057c0:	f001 fa48 	bl	8006c54 <vPortExitCritical>
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057d4:	f001 fa0a 	bl	8006bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e001      	b.n	80057ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f001 fa33 	bl	8006c54 <vPortExitCritical>

	return xReturn;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10c      	bne.n	8005826 <xTaskCreateStatic+0x2e>
	__asm volatile
 800580c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005810:	b672      	cpsid	i
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	b662      	cpsie	i
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10c      	bne.n	8005846 <xTaskCreateStatic+0x4e>
	__asm volatile
 800582c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005830:	b672      	cpsid	i
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	b662      	cpsie	i
 8005840:	61fb      	str	r3, [r7, #28]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005846:	23b4      	movs	r3, #180	; 0xb4
 8005848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2bb4      	cmp	r3, #180	; 0xb4
 800584e:	d00c      	beq.n	800586a <xTaskCreateStatic+0x72>
	__asm volatile
 8005850:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005854:	b672      	cpsid	i
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	b662      	cpsie	i
 8005864:	61bb      	str	r3, [r7, #24]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800586a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01e      	beq.n	80058b0 <xTaskCreateStatic+0xb8>
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2202      	movs	r2, #2
 8005886:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800588a:	2300      	movs	r3, #0
 800588c:	9303      	str	r3, [sp, #12]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	9302      	str	r3, [sp, #8]
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f850 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058aa:	f000 f8ed 	bl	8005a88 <prvAddNewTaskToReadyList>
 80058ae:	e001      	b.n	80058b4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058b4:	697b      	ldr	r3, [r7, #20]
	}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08c      	sub	sp, #48	; 0x30
 80058c2:	af04      	add	r7, sp, #16
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	603b      	str	r3, [r7, #0]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fab6 	bl	8006e44 <pvPortMalloc>
 80058d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058e0:	20b4      	movs	r0, #180	; 0xb4
 80058e2:	f001 faaf 	bl	8006e44 <pvPortMalloc>
 80058e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
 80058f4:	e005      	b.n	8005902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f001 fb6e 	bl	8006fd8 <vPortFree>
 80058fc:	e001      	b.n	8005902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d017      	beq.n	8005938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	2300      	movs	r3, #0
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f80e 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800592c:	69f8      	ldr	r0, [r7, #28]
 800592e:	f000 f8ab 	bl	8005a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005932:	2301      	movs	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e002      	b.n	800593e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800593e:	69bb      	ldr	r3, [r7, #24]
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005960:	440b      	add	r3, r1
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f023 0307 	bic.w	r3, r3, #7
 800596e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800597a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800597e:	b672      	cpsid	i
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	b662      	cpsie	i
 800598e:	617b      	str	r3, [r7, #20]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01f      	beq.n	80059da <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e012      	b.n	80059c6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	7819      	ldrb	r1, [r3, #0]
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	3334      	adds	r3, #52	; 0x34
 80059b0:	460a      	mov	r2, r1
 80059b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d006      	beq.n	80059ce <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b0f      	cmp	r3, #15
 80059ca:	d9e9      	bls.n	80059a0 <prvInitialiseNewTask+0x58>
 80059cc:	e000      	b.n	80059d0 <prvInitialiseNewTask+0x88>
			{
				break;
 80059ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059d8:	e003      	b.n	80059e2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d901      	bls.n	80059ec <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059e8:	2306      	movs	r3, #6
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2200      	movs	r2, #0
 80059fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	3304      	adds	r3, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fb6f 	bl	80050e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fb6a 	bl	80050e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	f1c3 0207 	rsb	r2, r3, #7
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	334c      	adds	r3, #76	; 0x4c
 8005a3c:	2260      	movs	r2, #96	; 0x60
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fd18 	bl	8007476 <memset>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	4a0c      	ldr	r2, [pc, #48]	; (8005a7c <prvInitialiseNewTask+0x134>)
 8005a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <prvInitialiseNewTask+0x138>)
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <prvInitialiseNewTask+0x13c>)
 8005a56:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	69b8      	ldr	r0, [r7, #24]
 8005a5e:	f000 ffb7 	bl	80069d0 <pxPortInitialiseStack>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a74:	bf00      	nop
 8005a76:	3720      	adds	r7, #32
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08008b54 	.word	0x08008b54
 8005a80:	08008b74 	.word	0x08008b74
 8005a84:	08008b34 	.word	0x08008b34

08005a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a90:	f001 f8ac 	bl	8006bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <prvAddNewTaskToReadyList+0xb8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <prvAddNewTaskToReadyList+0xb8>)
 8005a9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a9e:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <prvAddNewTaskToReadyList+0xbc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <prvAddNewTaskToReadyList+0xbc>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aac:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <prvAddNewTaskToReadyList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d110      	bne.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ab4:	f000 fd12 	bl	80064dc <prvInitialiseTaskLists>
 8005ab8:	e00d      	b.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <prvAddNewTaskToReadyList+0xc0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <prvAddNewTaskToReadyList+0xbc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d802      	bhi.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <prvAddNewTaskToReadyList+0xbc>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <prvAddNewTaskToReadyList+0xc4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <prvAddNewTaskToReadyList+0xc4>)
 8005ade:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <prvAddNewTaskToReadyList+0xcc>)
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7ff faf9 	bl	8005100 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b0e:	f001 f8a1 	bl	8006c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <prvAddNewTaskToReadyList+0xc0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddNewTaskToReadyList+0xbc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d207      	bcs.n	8005b38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <prvAddNewTaskToReadyList+0xd0>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000b48 	.word	0x20000b48
 8005b44:	20000a48 	.word	0x20000a48
 8005b48:	20000b54 	.word	0x20000b54
 8005b4c:	20000b64 	.word	0x20000b64
 8005b50:	20000b50 	.word	0x20000b50
 8005b54:	20000a4c 	.word	0x20000a4c
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <vTaskDelay+0x64>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <vTaskDelay+0x34>
	__asm volatile
 8005b76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	60bb      	str	r3, [r7, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b90:	f000 f9b0 	bl	8005ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 feb4 	bl	8006904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b9c:	f000 f9b8 	bl	8005f10 <xTaskResumeAll>
 8005ba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <vTaskDelay+0x68>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000b70 	.word	0x20000b70
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005bd0:	f001 f80c 	bl	8006bec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <vTaskSuspend+0x18>
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <vTaskSuspend+0x108>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	e000      	b.n	8005be2 <vTaskSuspend+0x1a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff fae6 	bl	80051ba <uxListRemove>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4936      	ldr	r1, [pc, #216]	; (8005cd4 <vTaskSuspend+0x10c>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <vTaskSuspend+0x58>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	2201      	movs	r2, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	43da      	mvns	r2, r3
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <vTaskSuspend+0x110>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	; (8005cd8 <vTaskSuspend+0x110>)
 8005c1e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fac4 	bl	80051ba <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4828      	ldr	r0, [pc, #160]	; (8005cdc <vTaskSuspend+0x114>)
 8005c3a:	f7ff fa61 	bl	8005100 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d103      	bne.n	8005c52 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005c52:	f000 ffff 	bl	8006c54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005c56:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <vTaskSuspend+0x118>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005c5e:	f000 ffc5 	bl	8006bec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005c62:	f000 fcdf 	bl	8006624 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005c66:	f000 fff5 	bl	8006c54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <vTaskSuspend+0x108>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d129      	bne.n	8005cc8 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <vTaskSuspend+0x118>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d019      	beq.n	8005cb0 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <vTaskSuspend+0x11c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <vTaskSuspend+0xd6>
	__asm volatile
 8005c84:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c88:	b672      	cpsid	i
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	b662      	cpsie	i
 8005c98:	60bb      	str	r3, [r7, #8]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <vTaskSuspend+0x120>)
 8005ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cae:	e00b      	b.n	8005cc8 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <vTaskSuspend+0x114>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <vTaskSuspend+0x124>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d103      	bne.n	8005cc4 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <vTaskSuspend+0x108>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
	}
 8005cc2:	e001      	b.n	8005cc8 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8005cc4:	f000 fa7c 	bl	80061c0 <vTaskSwitchContext>
	}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000a48 	.word	0x20000a48
 8005cd4:	20000a4c 	.word	0x20000a4c
 8005cd8:	20000b50 	.word	0x20000b50
 8005cdc:	20000b34 	.word	0x20000b34
 8005ce0:	20000b54 	.word	0x20000b54
 8005ce4:	20000b70 	.word	0x20000b70
 8005ce8:	e000ed04 	.word	0xe000ed04
 8005cec:	20000b48 	.word	0x20000b48

08005cf0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10c      	bne.n	8005d20 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8005d06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d0a:	b672      	cpsid	i
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	b662      	cpsie	i
 8005d1a:	60fb      	str	r3, [r7, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <prvTaskIsTaskSuspended+0x60>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d10a      	bne.n	8005d40 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <prvTaskIsTaskSuspended+0x64>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d005      	beq.n	8005d40 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d40:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000b34 	.word	0x20000b34
 8005d54:	20000b08 	.word	0x20000b08

08005d58 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10c      	bne.n	8005d84 <vTaskResume+0x2c>
	__asm volatile
 8005d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d6e:	b672      	cpsid	i
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	b662      	cpsie	i
 8005d7e:	60bb      	str	r3, [r7, #8]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005d84:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <vTaskResume+0xb0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d037      	beq.n	8005dfe <vTaskResume+0xa6>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d034      	beq.n	8005dfe <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8005d94:	f000 ff2a 	bl	8006bec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ffa9 	bl	8005cf0 <prvTaskIsTaskSuspended>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02a      	beq.n	8005dfa <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fa06 	bl	80051ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	2201      	movs	r2, #1
 8005db4:	409a      	lsls	r2, r3
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <vTaskResume+0xb4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <vTaskResume+0xb4>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <vTaskResume+0xb8>)
 8005dce:	441a      	add	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7ff f992 	bl	8005100 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <vTaskResume+0xb0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d307      	bcc.n	8005dfa <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <vTaskResume+0xbc>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005dfa:	f000 ff2b 	bl	8006c54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000a48 	.word	0x20000a48
 8005e0c:	20000b50 	.word	0x20000b50
 8005e10:	20000a4c 	.word	0x20000a4c
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e26:	463a      	mov	r2, r7
 8005e28:	1d39      	adds	r1, r7, #4
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa fe98 	bl	8000b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	9202      	str	r2, [sp, #8]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	460a      	mov	r2, r1
 8005e46:	4923      	ldr	r1, [pc, #140]	; (8005ed4 <vTaskStartScheduler+0xbc>)
 8005e48:	4823      	ldr	r0, [pc, #140]	; (8005ed8 <vTaskStartScheduler+0xc0>)
 8005e4a:	f7ff fcd5 	bl	80057f8 <xTaskCreateStatic>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <vTaskStartScheduler+0xc4>)
 8005e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <vTaskStartScheduler+0xc4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e001      	b.n	8005e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11d      	bne.n	8005ea8 <vTaskStartScheduler+0x90>
	__asm volatile
 8005e6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e70:	b672      	cpsid	i
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	b662      	cpsie	i
 8005e80:	613b      	str	r3, [r7, #16]
}
 8005e82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e84:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <vTaskStartScheduler+0xc8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	334c      	adds	r3, #76	; 0x4c
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <vTaskStartScheduler+0xcc>)
 8005e8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e8e:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <vTaskStartScheduler+0xd0>)
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <vTaskStartScheduler+0xd4>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <vTaskStartScheduler+0xd8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ea2:	f000 fe25 	bl	8006af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ea6:	e010      	b.n	8005eca <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d10c      	bne.n	8005eca <vTaskStartScheduler+0xb2>
	__asm volatile
 8005eb0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <vTaskStartScheduler+0xb0>
}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08008b14 	.word	0x08008b14
 8005ed8:	080064ad 	.word	0x080064ad
 8005edc:	20000b6c 	.word	0x20000b6c
 8005ee0:	20000a48 	.word	0x20000a48
 8005ee4:	2000001c 	.word	0x2000001c
 8005ee8:	20000b68 	.word	0x20000b68
 8005eec:	20000b54 	.word	0x20000b54
 8005ef0:	20000b4c 	.word	0x20000b4c

08005ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <vTaskSuspendAll+0x18>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <vTaskSuspendAll+0x18>)
 8005f00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000b70 	.word	0x20000b70

08005f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f1e:	4b42      	ldr	r3, [pc, #264]	; (8006028 <xTaskResumeAll+0x118>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <xTaskResumeAll+0x30>
	__asm volatile
 8005f26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005f2a:	b672      	cpsid	i
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	b662      	cpsie	i
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f40:	f000 fe54 	bl	8006bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f44:	4b38      	ldr	r3, [pc, #224]	; (8006028 <xTaskResumeAll+0x118>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	4a37      	ldr	r2, [pc, #220]	; (8006028 <xTaskResumeAll+0x118>)
 8005f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <xTaskResumeAll+0x118>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d161      	bne.n	800601a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f56:	4b35      	ldr	r3, [pc, #212]	; (800602c <xTaskResumeAll+0x11c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d05d      	beq.n	800601a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f5e:	e02e      	b.n	8005fbe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f60:	4b33      	ldr	r3, [pc, #204]	; (8006030 <xTaskResumeAll+0x120>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f924 	bl	80051ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff f91f 	bl	80051ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	2201      	movs	r2, #1
 8005f82:	409a      	lsls	r2, r3
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <xTaskResumeAll+0x124>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	4a2a      	ldr	r2, [pc, #168]	; (8006034 <xTaskResumeAll+0x124>)
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4a27      	ldr	r2, [pc, #156]	; (8006038 <xTaskResumeAll+0x128>)
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7ff f8ab 	bl	8005100 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	4b23      	ldr	r3, [pc, #140]	; (800603c <xTaskResumeAll+0x12c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005fb8:	4b21      	ldr	r3, [pc, #132]	; (8006040 <xTaskResumeAll+0x130>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fbe:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <xTaskResumeAll+0x120>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1cc      	bne.n	8005f60 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fcc:	f000 fb2a 	bl	8006624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <xTaskResumeAll+0x134>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fdc:	f000 f836 	bl	800604c <xTaskIncrementTick>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005fe6:	4b16      	ldr	r3, [pc, #88]	; (8006040 <xTaskResumeAll+0x130>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f1      	bne.n	8005fdc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005ff8:	4b12      	ldr	r3, [pc, #72]	; (8006044 <xTaskResumeAll+0x134>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <xTaskResumeAll+0x130>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006006:	2301      	movs	r3, #1
 8006008:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <xTaskResumeAll+0x138>)
 800600c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800601a:	f000 fe1b 	bl	8006c54 <vPortExitCritical>

	return xAlreadyYielded;
 800601e:	68bb      	ldr	r3, [r7, #8]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000b70 	.word	0x20000b70
 800602c:	20000b48 	.word	0x20000b48
 8006030:	20000b08 	.word	0x20000b08
 8006034:	20000b50 	.word	0x20000b50
 8006038:	20000a4c 	.word	0x20000a4c
 800603c:	20000a48 	.word	0x20000a48
 8006040:	20000b5c 	.word	0x20000b5c
 8006044:	20000b58 	.word	0x20000b58
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006056:	4b4f      	ldr	r3, [pc, #316]	; (8006194 <xTaskIncrementTick+0x148>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 808a 	bne.w	8006174 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006060:	4b4d      	ldr	r3, [pc, #308]	; (8006198 <xTaskIncrementTick+0x14c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006068:	4a4b      	ldr	r2, [pc, #300]	; (8006198 <xTaskIncrementTick+0x14c>)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d122      	bne.n	80060ba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <xTaskIncrementTick+0x150>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <xTaskIncrementTick+0x4c>
	__asm volatile
 800607e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006082:	b672      	cpsid	i
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	b662      	cpsie	i
 8006092:	603b      	str	r3, [r7, #0]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xTaskIncrementTick+0x4a>
 8006098:	4b40      	ldr	r3, [pc, #256]	; (800619c <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <xTaskIncrementTick+0x154>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3e      	ldr	r2, [pc, #248]	; (800619c <xTaskIncrementTick+0x150>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <xTaskIncrementTick+0x154>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <xTaskIncrementTick+0x158>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <xTaskIncrementTick+0x158>)
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	f000 fab5 	bl	8006624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <xTaskIncrementTick+0x15c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d348      	bcc.n	8006156 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <xTaskIncrementTick+0x150>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <xTaskIncrementTick+0x15c>)
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295
 80060d4:	601a      	str	r2, [r3, #0]
					break;
 80060d6:	e03e      	b.n	8006156 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d8:	4b30      	ldr	r3, [pc, #192]	; (800619c <xTaskIncrementTick+0x150>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d203      	bcs.n	80060f8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <xTaskIncrementTick+0x15c>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060f6:	e02e      	b.n	8006156 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff f85c 	bl	80051ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3318      	adds	r3, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff f853 	bl	80051ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	4b23      	ldr	r3, [pc, #140]	; (80061ac <xTaskIncrementTick+0x160>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4313      	orrs	r3, r2
 8006122:	4a22      	ldr	r2, [pc, #136]	; (80061ac <xTaskIncrementTick+0x160>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <xTaskIncrementTick+0x164>)
 8006134:	441a      	add	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7fe ffdf 	bl	8005100 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <xTaskIncrementTick+0x168>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	429a      	cmp	r2, r3
 800614e:	d3b9      	bcc.n	80060c4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006154:	e7b6      	b.n	80060c4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006156:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <xTaskIncrementTick+0x168>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4914      	ldr	r1, [pc, #80]	; (80061b0 <xTaskIncrementTick+0x164>)
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d907      	bls.n	800617e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e004      	b.n	800617e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006174:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <xTaskIncrementTick+0x16c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <xTaskIncrementTick+0x16c>)
 800617c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <xTaskIncrementTick+0x170>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006186:	2301      	movs	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000b70 	.word	0x20000b70
 8006198:	20000b4c 	.word	0x20000b4c
 800619c:	20000b00 	.word	0x20000b00
 80061a0:	20000b04 	.word	0x20000b04
 80061a4:	20000b60 	.word	0x20000b60
 80061a8:	20000b68 	.word	0x20000b68
 80061ac:	20000b50 	.word	0x20000b50
 80061b0:	20000a4c 	.word	0x20000a4c
 80061b4:	20000a48 	.word	0x20000a48
 80061b8:	20000b58 	.word	0x20000b58
 80061bc:	20000b5c 	.word	0x20000b5c

080061c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061c6:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <vTaskSwitchContext+0xb0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <vTaskSwitchContext+0xb4>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061d4:	e046      	b.n	8006264 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <vTaskSwitchContext+0xb4>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <vTaskSwitchContext+0xb8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	fab3 f383 	clz	r3, r3
 80061e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f1c3 031f 	rsb	r3, r3, #31
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	4922      	ldr	r1, [pc, #136]	; (800627c <vTaskSwitchContext+0xbc>)
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <vTaskSwitchContext+0x60>
	__asm volatile
 8006206:	f04f 0380 	mov.w	r3, #128	; 0x80
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vTaskSwitchContext+0x5e>
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a14      	ldr	r2, [pc, #80]	; (800627c <vTaskSwitchContext+0xbc>)
 800622c:	4413      	add	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3308      	adds	r3, #8
 8006242:	429a      	cmp	r2, r3
 8006244:	d104      	bne.n	8006250 <vTaskSwitchContext+0x90>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <vTaskSwitchContext+0xc0>)
 8006258:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <vTaskSwitchContext+0xc0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	334c      	adds	r3, #76	; 0x4c
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <vTaskSwitchContext+0xc4>)
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000b70 	.word	0x20000b70
 8006274:	20000b5c 	.word	0x20000b5c
 8006278:	20000b50 	.word	0x20000b50
 800627c:	20000a4c 	.word	0x20000a4c
 8006280:	20000a48 	.word	0x20000a48
 8006284:	2000001c 	.word	0x2000001c

08006288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10c      	bne.n	80062b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006298:	f04f 0380 	mov.w	r3, #128	; 0x80
 800629c:	b672      	cpsid	i
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	b662      	cpsie	i
 80062ac:	60fb      	str	r3, [r7, #12]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <vTaskPlaceOnEventList+0x48>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3318      	adds	r3, #24
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fe ff44 	bl	8005148 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062c0:	2101      	movs	r1, #1
 80062c2:	6838      	ldr	r0, [r7, #0]
 80062c4:	f000 fb1e 	bl	8006904 <prvAddCurrentTaskToDelayedList>
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000a48 	.word	0x20000a48

080062d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80062ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062ee:	b672      	cpsid	i
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	b662      	cpsie	i
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3318      	adds	r3, #24
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe ff56 	bl	80051ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <xTaskRemoveFromEventList+0xb0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11c      	bne.n	8006350 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe ff4d 	bl	80051ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	2201      	movs	r2, #1
 8006326:	409a      	lsls	r2, r3
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <xTaskRemoveFromEventList+0xb4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	4a16      	ldr	r2, [pc, #88]	; (8006388 <xTaskRemoveFromEventList+0xb4>)
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4a13      	ldr	r2, [pc, #76]	; (800638c <xTaskRemoveFromEventList+0xb8>)
 8006340:	441a      	add	r2, r3
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7fe fed9 	bl	8005100 <vListInsertEnd>
 800634e:	e005      	b.n	800635c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	3318      	adds	r3, #24
 8006354:	4619      	mov	r1, r3
 8006356:	480e      	ldr	r0, [pc, #56]	; (8006390 <xTaskRemoveFromEventList+0xbc>)
 8006358:	f7fe fed2 	bl	8005100 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <xTaskRemoveFromEventList+0xc0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d905      	bls.n	8006376 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <xTaskRemoveFromEventList+0xc4>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	e001      	b.n	800637a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000b70 	.word	0x20000b70
 8006388:	20000b50 	.word	0x20000b50
 800638c:	20000a4c 	.word	0x20000a4c
 8006390:	20000b08 	.word	0x20000b08
 8006394:	20000a48 	.word	0x20000a48
 8006398:	20000b5c 	.word	0x20000b5c

0800639c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <vTaskInternalSetTimeOutState+0x24>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <vTaskInternalSetTimeOutState+0x28>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	605a      	str	r2, [r3, #4]
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	20000b60 	.word	0x20000b60
 80063c4:	20000b4c 	.word	0x20000b4c

080063c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10c      	bne.n	80063f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80063d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063dc:	b672      	cpsid	i
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	b662      	cpsie	i
 80063ec:	613b      	str	r3, [r7, #16]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10c      	bne.n	8006412 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80063f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80063fc:	b672      	cpsid	i
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	b662      	cpsie	i
 800640c:	60fb      	str	r3, [r7, #12]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006412:	f000 fbeb 	bl	8006bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006416:	4b1d      	ldr	r3, [pc, #116]	; (800648c <xTaskCheckForTimeOut+0xc4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642e:	d102      	bne.n	8006436 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e023      	b.n	800647e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <xTaskCheckForTimeOut+0xc8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d007      	beq.n	8006452 <xTaskCheckForTimeOut+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	e015      	b.n	800647e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	429a      	cmp	r2, r3
 800645a:	d20b      	bcs.n	8006474 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff ff97 	bl	800639c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	e004      	b.n	800647e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800647a:	2301      	movs	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800647e:	f000 fbe9 	bl	8006c54 <vPortExitCritical>

	return xReturn;
 8006482:	69fb      	ldr	r3, [r7, #28]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000b4c 	.word	0x20000b4c
 8006490:	20000b60 	.word	0x20000b60

08006494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006498:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <vTaskMissedYield+0x14>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	20000b5c 	.word	0x20000b5c

080064ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064b4:	f000 f852 	bl	800655c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <prvIdleTask+0x28>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d9f9      	bls.n	80064b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <prvIdleTask+0x2c>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064d0:	e7f0      	b.n	80064b4 <prvIdleTask+0x8>
 80064d2:	bf00      	nop
 80064d4:	20000a4c 	.word	0x20000a4c
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	e00c      	b.n	8006502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4a12      	ldr	r2, [pc, #72]	; (800653c <prvInitialiseTaskLists+0x60>)
 80064f4:	4413      	add	r3, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fdd5 	bl	80050a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3301      	adds	r3, #1
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b06      	cmp	r3, #6
 8006506:	d9ef      	bls.n	80064e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006508:	480d      	ldr	r0, [pc, #52]	; (8006540 <prvInitialiseTaskLists+0x64>)
 800650a:	f7fe fdcc 	bl	80050a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800650e:	480d      	ldr	r0, [pc, #52]	; (8006544 <prvInitialiseTaskLists+0x68>)
 8006510:	f7fe fdc9 	bl	80050a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006514:	480c      	ldr	r0, [pc, #48]	; (8006548 <prvInitialiseTaskLists+0x6c>)
 8006516:	f7fe fdc6 	bl	80050a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800651a:	480c      	ldr	r0, [pc, #48]	; (800654c <prvInitialiseTaskLists+0x70>)
 800651c:	f7fe fdc3 	bl	80050a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006520:	480b      	ldr	r0, [pc, #44]	; (8006550 <prvInitialiseTaskLists+0x74>)
 8006522:	f7fe fdc0 	bl	80050a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <prvInitialiseTaskLists+0x78>)
 8006528:	4a05      	ldr	r2, [pc, #20]	; (8006540 <prvInitialiseTaskLists+0x64>)
 800652a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <prvInitialiseTaskLists+0x7c>)
 800652e:	4a05      	ldr	r2, [pc, #20]	; (8006544 <prvInitialiseTaskLists+0x68>)
 8006530:	601a      	str	r2, [r3, #0]
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000a4c 	.word	0x20000a4c
 8006540:	20000ad8 	.word	0x20000ad8
 8006544:	20000aec 	.word	0x20000aec
 8006548:	20000b08 	.word	0x20000b08
 800654c:	20000b1c 	.word	0x20000b1c
 8006550:	20000b34 	.word	0x20000b34
 8006554:	20000b00 	.word	0x20000b00
 8006558:	20000b04 	.word	0x20000b04

0800655c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006562:	e019      	b.n	8006598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006564:	f000 fb42 	bl	8006bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006568:	4b10      	ldr	r3, [pc, #64]	; (80065ac <prvCheckTasksWaitingTermination+0x50>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe fe20 	bl	80051ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <prvCheckTasksWaitingTermination+0x54>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3b01      	subs	r3, #1
 8006580:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <prvCheckTasksWaitingTermination+0x54>)
 8006582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <prvCheckTasksWaitingTermination+0x58>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3b01      	subs	r3, #1
 800658a:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <prvCheckTasksWaitingTermination+0x58>)
 800658c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800658e:	f000 fb61 	bl	8006c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f810 	bl	80065b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <prvCheckTasksWaitingTermination+0x58>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e1      	bne.n	8006564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000b1c 	.word	0x20000b1c
 80065b0:	20000b48 	.word	0x20000b48
 80065b4:	20000b30 	.word	0x20000b30

080065b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	334c      	adds	r3, #76	; 0x4c
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f88f 	bl	80076e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fcfd 	bl	8006fd8 <vPortFree>
				vPortFree( pxTCB );
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fcfa 	bl	8006fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065e4:	e01a      	b.n	800661c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d103      	bne.n	80065f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fcf1 	bl	8006fd8 <vPortFree>
	}
 80065f6:	e011      	b.n	800661c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d00c      	beq.n	800661c <prvDeleteTCB+0x64>
	__asm volatile
 8006602:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006606:	b672      	cpsid	i
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	b662      	cpsie	i
 8006616:	60fb      	str	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvDeleteTCB+0x62>
	}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662a:	4b0c      	ldr	r3, [pc, #48]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800663c:	e008      	b.n	8006650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000b00 	.word	0x20000b00
 8006660:	20000b68 	.word	0x20000b68

08006664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <xTaskGetSchedulerState+0x34>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006672:	2301      	movs	r3, #1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	e008      	b.n	800668a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <xTaskGetSchedulerState+0x38>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006680:	2302      	movs	r3, #2
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	e001      	b.n	800668a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006686:	2300      	movs	r3, #0
 8006688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800668a:	687b      	ldr	r3, [r7, #4]
	}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000b54 	.word	0x20000b54
 800669c:	20000b70 	.word	0x20000b70

080066a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d069      	beq.n	800678a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	4b36      	ldr	r3, [pc, #216]	; (8006794 <xTaskPriorityInherit+0xf4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d259      	bcs.n	8006778 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db06      	blt.n	80066da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	4b31      	ldr	r3, [pc, #196]	; (8006794 <xTaskPriorityInherit+0xf4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f1c3 0207 	rsb	r2, r3, #7
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6959      	ldr	r1, [r3, #20]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4a2b      	ldr	r2, [pc, #172]	; (8006798 <xTaskPriorityInherit+0xf8>)
 80066ec:	4413      	add	r3, r2
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d13a      	bne.n	8006768 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fd5f 	bl	80051ba <uxListRemove>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d115      	bne.n	800672e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	4924      	ldr	r1, [pc, #144]	; (8006798 <xTaskPriorityInherit+0xf8>)
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskPriorityInherit+0x8e>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	2201      	movs	r2, #1
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43da      	mvns	r2, r3
 8006724:	4b1d      	ldr	r3, [pc, #116]	; (800679c <xTaskPriorityInherit+0xfc>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4013      	ands	r3, r2
 800672a:	4a1c      	ldr	r2, [pc, #112]	; (800679c <xTaskPriorityInherit+0xfc>)
 800672c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <xTaskPriorityInherit+0xf4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	2201      	movs	r2, #1
 800673e:	409a      	lsls	r2, r3
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <xTaskPriorityInherit+0xfc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4313      	orrs	r3, r2
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <xTaskPriorityInherit+0xfc>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <xTaskPriorityInherit+0xf8>)
 8006758:	441a      	add	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe fccd 	bl	8005100 <vListInsertEnd>
 8006766:	e004      	b.n	8006772 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <xTaskPriorityInherit+0xf4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e008      	b.n	800678a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <xTaskPriorityInherit+0xf4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	429a      	cmp	r2, r3
 8006784:	d201      	bcs.n	800678a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800678a:	68fb      	ldr	r3, [r7, #12]
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000a48 	.word	0x20000a48
 8006798:	20000a4c 	.word	0x20000a4c
 800679c:	20000b50 	.word	0x20000b50

080067a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8087 	beq.w	80068c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10c      	bne.n	80067dc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80067c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80067c6:	b672      	cpsid	i
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	b662      	cpsie	i
 80067d6:	60fb      	str	r3, [r7, #12]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d902      	bls.n	80067ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e002      	b.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d065      	beq.n	80068c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	429a      	cmp	r2, r3
 8006804:	d160      	bne.n	80068c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006806:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	429a      	cmp	r2, r3
 800680e:	d10c      	bne.n	800682a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006810:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006814:	b672      	cpsid	i
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	b662      	cpsie	i
 8006824:	60bb      	str	r3, [r7, #8]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	db04      	blt.n	8006848 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f1c3 0207 	rsb	r2, r3, #7
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	6959      	ldr	r1, [r3, #20]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006858:	4413      	add	r3, r2
 800685a:	4299      	cmp	r1, r3
 800685c:	d134      	bne.n	80068c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3304      	adds	r3, #4
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fca9 	bl	80051ba <uxListRemove>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d115      	bne.n	800689a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	4918      	ldr	r1, [pc, #96]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	2201      	movs	r2, #1
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43da      	mvns	r2, r3
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4013      	ands	r3, r2
 8006896:	4a10      	ldr	r2, [pc, #64]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006898:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	2201      	movs	r2, #1
 80068a0:	409a      	lsls	r2, r3
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4a06      	ldr	r2, [pc, #24]	; (80068d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80068ba:	441a      	add	r2, r3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe fc1c 	bl	8005100 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c8:	bf00      	nop
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000a48 	.word	0x20000a48
 80068d4:	20000a4c 	.word	0x20000a4c
 80068d8:	20000b50 	.word	0x20000b50

080068dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <pvTaskIncrementMutexHeldCount+0x24>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <pvTaskIncrementMutexHeldCount+0x24>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068ee:	3201      	adds	r2, #1
 80068f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <pvTaskIncrementMutexHeldCount+0x24>)
 80068f4:	681b      	ldr	r3, [r3, #0]
	}
 80068f6:	4618      	mov	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20000a48 	.word	0x20000a48

08006904 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800690e:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006914:	4b28      	ldr	r3, [pc, #160]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3304      	adds	r3, #4
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fc4d 	bl	80051ba <uxListRemove>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2201      	movs	r2, #1
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43da      	mvns	r2, r3
 8006934:	4b21      	ldr	r3, [pc, #132]	; (80069bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4013      	ands	r3, r2
 800693a:	4a20      	ldr	r2, [pc, #128]	; (80069bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800693c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d10a      	bne.n	800695c <prvAddCurrentTaskToDelayedList+0x58>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	481a      	ldr	r0, [pc, #104]	; (80069c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006956:	f7fe fbd3 	bl	8005100 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800695a:	e026      	b.n	80069aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006964:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d209      	bcs.n	8006988 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006974:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3304      	adds	r3, #4
 800697e:	4619      	mov	r1, r3
 8006980:	4610      	mov	r0, r2
 8006982:	f7fe fbe1 	bl	8005148 <vListInsert>
}
 8006986:	e010      	b.n	80069aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3304      	adds	r3, #4
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f7fe fbd7 	bl	8005148 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d202      	bcs.n	80069aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6013      	str	r3, [r2, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000b4c 	.word	0x20000b4c
 80069b8:	20000a48 	.word	0x20000a48
 80069bc:	20000b50 	.word	0x20000b50
 80069c0:	20000b34 	.word	0x20000b34
 80069c4:	20000b04 	.word	0x20000b04
 80069c8:	20000b00 	.word	0x20000b00
 80069cc:	20000b68 	.word	0x20000b68

080069d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3b04      	subs	r3, #4
 80069e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b04      	subs	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a00:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <pxPortInitialiseStack+0x64>)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b14      	subs	r3, #20
 8006a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f06f 0202 	mvn.w	r2, #2
 8006a1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3b20      	subs	r3, #32
 8006a24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a26:	68fb      	ldr	r3, [r7, #12]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	08006a39 	.word	0x08006a39

08006a38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <prvTaskExitError+0x5c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d00c      	beq.n	8006a66 <prvTaskExitError+0x2e>
	__asm volatile
 8006a4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <prvTaskExitError+0x2c>
	__asm volatile
 8006a66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a6a:	b672      	cpsid	i
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	b662      	cpsie	i
 8006a7a:	60bb      	str	r3, [r7, #8]
}
 8006a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a7e:	bf00      	nop
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0fc      	beq.n	8006a80 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000018 	.word	0x20000018
	...

08006aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <pxCurrentTCBConst2>)
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	6808      	ldr	r0, [r1, #0]
 8006aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	f380 8809 	msr	PSP, r0
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f380 8811 	msr	BASEPRI, r0
 8006aba:	4770      	bx	lr
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst2>:
 8006ac0:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ac8:	4808      	ldr	r0, [pc, #32]	; (8006aec <prvPortStartFirstTask+0x24>)
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f380 8808 	msr	MSP, r0
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f380 8814 	msr	CONTROL, r0
 8006ada:	b662      	cpsie	i
 8006adc:	b661      	cpsie	f
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	df00      	svc	0
 8006ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aea:	bf00      	nop
 8006aec:	e000ed08 	.word	0xe000ed08

08006af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006af6:	4b37      	ldr	r3, [pc, #220]	; (8006bd4 <xPortStartScheduler+0xe4>)
 8006af8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	22ff      	movs	r2, #255	; 0xff
 8006b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	; (8006bd8 <xPortStartScheduler+0xe8>)
 8006b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b1e:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b24:	e009      	b.n	8006b3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b26:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d0ef      	beq.n	8006b26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b46:	4b25      	ldr	r3, [pc, #148]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1c3 0307 	rsb	r3, r3, #7
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d00c      	beq.n	8006b6c <xPortStartScheduler+0x7c>
	__asm volatile
 8006b52:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b56:	b672      	cpsid	i
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	b662      	cpsie	i
 8006b66:	60bb      	str	r3, [r7, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <xPortStartScheduler+0xec>)
 8006b80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b8a:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <xPortStartScheduler+0xf0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <xPortStartScheduler+0xf0>)
 8006b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b96:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <xPortStartScheduler+0xf0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a11      	ldr	r2, [pc, #68]	; (8006be0 <xPortStartScheduler+0xf0>)
 8006b9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ba0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ba2:	f000 f8dd 	bl	8006d60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <xPortStartScheduler+0xf4>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bac:	f000 f8fc 	bl	8006da8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bb0:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <xPortStartScheduler+0xf8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <xPortStartScheduler+0xf8>)
 8006bb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bbc:	f7ff ff84 	bl	8006ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bc0:	f7ff fafe 	bl	80061c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006bc4:	f7ff ff38 	bl	8006a38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	e000e400 	.word	0xe000e400
 8006bd8:	20000b74 	.word	0x20000b74
 8006bdc:	20000b78 	.word	0x20000b78
 8006be0:	e000ed20 	.word	0xe000ed20
 8006be4:	20000018 	.word	0x20000018
 8006be8:	e000ef34 	.word	0xe000ef34

08006bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8006bf2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	607b      	str	r3, [r7, #4]
}
 8006c08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <vPortEnterCritical+0x60>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4a0e      	ldr	r2, [pc, #56]	; (8006c4c <vPortEnterCritical+0x60>)
 8006c12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <vPortEnterCritical+0x60>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d111      	bne.n	8006c40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <vPortEnterCritical+0x64>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <vPortEnterCritical+0x54>
	__asm volatile
 8006c26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c2a:	b672      	cpsid	i
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	b662      	cpsie	i
 8006c3a:	603b      	str	r3, [r7, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <vPortEnterCritical+0x52>
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000018 	.word	0x20000018
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <vPortExitCritical+0x54>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10c      	bne.n	8006c7c <vPortExitCritical+0x28>
	__asm volatile
 8006c62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c66:	b672      	cpsid	i
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	b662      	cpsie	i
 8006c76:	607b      	str	r3, [r7, #4]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <vPortExitCritical+0x54>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <vPortExitCritical+0x54>)
 8006c84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c86:	4b08      	ldr	r3, [pc, #32]	; (8006ca8 <vPortExitCritical+0x54>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d105      	bne.n	8006c9a <vPortExitCritical+0x46>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000018 	.word	0x20000018
 8006cac:	00000000 	.word	0x00000000

08006cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cb0:	f3ef 8009 	mrs	r0, PSP
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <pxCurrentTCBConst>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f01e 0f10 	tst.w	lr, #16
 8006cc0:	bf08      	it	eq
 8006cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	6010      	str	r0, [r2, #0]
 8006ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cd0:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006cd4:	b672      	cpsid	i
 8006cd6:	f380 8811 	msr	BASEPRI, r0
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	f7ff fa6c 	bl	80061c0 <vTaskSwitchContext>
 8006ce8:	f04f 0000 	mov.w	r0, #0
 8006cec:	f380 8811 	msr	BASEPRI, r0
 8006cf0:	bc09      	pop	{r0, r3}
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f01e 0f10 	tst.w	lr, #16
 8006cfe:	bf08      	it	eq
 8006d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d04:	f380 8809 	msr	PSP, r0
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop

08006d10 <pxCurrentTCBConst>:
 8006d10:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d1e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d22:	b672      	cpsid	i
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	b662      	cpsie	i
 8006d32:	607b      	str	r3, [r7, #4]
}
 8006d34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d36:	f7ff f989 	bl	800604c <xTaskIncrementTick>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <SysTick_Handler+0x44>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	f383 8811 	msr	BASEPRI, r3
}
 8006d52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <vPortSetupTimerInterrupt+0x34>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <vPortSetupTimerInterrupt+0x38>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <vPortSetupTimerInterrupt+0x3c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <vPortSetupTimerInterrupt+0x40>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	099b      	lsrs	r3, r3, #6
 8006d7c:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <vPortSetupTimerInterrupt+0x44>)
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d82:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <vPortSetupTimerInterrupt+0x34>)
 8006d84:	2207      	movs	r2, #7
 8006d86:	601a      	str	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	e000e010 	.word	0xe000e010
 8006d98:	e000e018 	.word	0xe000e018
 8006d9c:	2000000c 	.word	0x2000000c
 8006da0:	10624dd3 	.word	0x10624dd3
 8006da4:	e000e014 	.word	0xe000e014

08006da8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006da8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006db8 <vPortEnableVFP+0x10>
 8006dac:	6801      	ldr	r1, [r0, #0]
 8006dae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006db2:	6001      	str	r1, [r0, #0]
 8006db4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006db6:	bf00      	nop
 8006db8:	e000ed88 	.word	0xe000ed88

08006dbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dc2:	f3ef 8305 	mrs	r3, IPSR
 8006dc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d916      	bls.n	8006dfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dce:	4a19      	ldr	r2, [pc, #100]	; (8006e34 <vPortValidateInterruptPriority+0x78>)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dd8:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <vPortValidateInterruptPriority+0x7c>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	7afa      	ldrb	r2, [r7, #11]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d20c      	bcs.n	8006dfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006de2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006de6:	b672      	cpsid	i
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	b662      	cpsie	i
 8006df6:	607b      	str	r3, [r7, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <vPortValidateInterruptPriority+0x80>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e04:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <vPortValidateInterruptPriority+0x84>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d90c      	bls.n	8006e26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006e0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	603b      	str	r3, [r7, #0]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <vPortValidateInterruptPriority+0x68>
	}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	e000e3f0 	.word	0xe000e3f0
 8006e38:	20000b74 	.word	0x20000b74
 8006e3c:	e000ed0c 	.word	0xe000ed0c
 8006e40:	20000b78 	.word	0x20000b78

08006e44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e50:	f7ff f850 	bl	8005ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e54:	4b5b      	ldr	r3, [pc, #364]	; (8006fc4 <pvPortMalloc+0x180>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e5c:	f000 f91a 	bl	8007094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e60:	4b59      	ldr	r3, [pc, #356]	; (8006fc8 <pvPortMalloc+0x184>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f040 8092 	bne.w	8006f92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01f      	beq.n	8006eb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006e74:	2208      	movs	r2, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d016      	beq.n	8006eb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f023 0307 	bic.w	r3, r3, #7
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <pvPortMalloc+0x70>
	__asm volatile
 8006e9a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e9e:	b672      	cpsid	i
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	b662      	cpsie	i
 8006eae:	617b      	str	r3, [r7, #20]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d06b      	beq.n	8006f92 <pvPortMalloc+0x14e>
 8006eba:	4b44      	ldr	r3, [pc, #272]	; (8006fcc <pvPortMalloc+0x188>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d866      	bhi.n	8006f92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ec4:	4b42      	ldr	r3, [pc, #264]	; (8006fd0 <pvPortMalloc+0x18c>)
 8006ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ec8:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <pvPortMalloc+0x18c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ece:	e004      	b.n	8006eda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d903      	bls.n	8006eec <pvPortMalloc+0xa8>
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f1      	bne.n	8006ed0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006eec:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <pvPortMalloc+0x180>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d04d      	beq.n	8006f92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2208      	movs	r2, #8
 8006efc:	4413      	add	r3, r2
 8006efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	2308      	movs	r3, #8
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d921      	bls.n	8006f5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00c      	beq.n	8006f44 <pvPortMalloc+0x100>
	__asm volatile
 8006f2a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f2e:	b672      	cpsid	i
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	b662      	cpsie	i
 8006f3e:	613b      	str	r3, [r7, #16]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f56:	69b8      	ldr	r0, [r7, #24]
 8006f58:	f000 f8fe 	bl	8007158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <pvPortMalloc+0x188>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <pvPortMalloc+0x188>)
 8006f68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <pvPortMalloc+0x188>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <pvPortMalloc+0x190>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d203      	bcs.n	8006f7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <pvPortMalloc+0x188>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <pvPortMalloc+0x190>)
 8006f7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <pvPortMalloc+0x184>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f92:	f7fe ffbd 	bl	8005f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <pvPortMalloc+0x176>
	__asm volatile
 8006fa0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006fa4:	b672      	cpsid	i
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	b662      	cpsie	i
 8006fb4:	60fb      	str	r3, [r7, #12]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <pvPortMalloc+0x174>
	return pvReturn;
 8006fba:	69fb      	ldr	r3, [r7, #28]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3728      	adds	r7, #40	; 0x28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20004784 	.word	0x20004784
 8006fc8:	20004790 	.word	0x20004790
 8006fcc:	20004788 	.word	0x20004788
 8006fd0:	2000477c 	.word	0x2000477c
 8006fd4:	2000478c 	.word	0x2000478c

08006fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d04c      	beq.n	8007084 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fea:	2308      	movs	r3, #8
 8006fec:	425b      	negs	r3, r3
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4b23      	ldr	r3, [pc, #140]	; (800708c <vPortFree+0xb4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4013      	ands	r3, r2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <vPortFree+0x48>
	__asm volatile
 8007006:	f04f 0380 	mov.w	r3, #128	; 0x80
 800700a:	b672      	cpsid	i
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	b662      	cpsie	i
 800701a:	60fb      	str	r3, [r7, #12]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00c      	beq.n	8007042 <vPortFree+0x6a>
	__asm volatile
 8007028:	f04f 0380 	mov.w	r3, #128	; 0x80
 800702c:	b672      	cpsid	i
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	b662      	cpsie	i
 800703c:	60bb      	str	r3, [r7, #8]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <vPortFree+0xb4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d019      	beq.n	8007084 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <vPortFree+0xb4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	43db      	mvns	r3, r3
 8007062:	401a      	ands	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007068:	f7fe ff44 	bl	8005ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <vPortFree+0xb8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4413      	add	r3, r2
 8007076:	4a06      	ldr	r2, [pc, #24]	; (8007090 <vPortFree+0xb8>)
 8007078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707a:	6938      	ldr	r0, [r7, #16]
 800707c:	f000 f86c 	bl	8007158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007080:	f7fe ff46 	bl	8005f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20004790 	.word	0x20004790
 8007090:	20004788 	.word	0x20004788

08007094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800709a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800709e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <prvHeapInit+0xac>)
 80070a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <prvHeapInit+0xac>)
 80070c4:	4413      	add	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <prvHeapInit+0xb0>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <prvHeapInit+0xb0>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e0:	2208      	movs	r2, #8
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4a15      	ldr	r2, [pc, #84]	; (8007148 <prvHeapInit+0xb4>)
 80070f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvHeapInit+0xb4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvHeapInit+0xb4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <prvHeapInit+0xb4>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <prvHeapInit+0xb8>)
 8007122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4a09      	ldr	r2, [pc, #36]	; (8007150 <prvHeapInit+0xbc>)
 800712a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvHeapInit+0xc0>)
 800712e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000b7c 	.word	0x20000b7c
 8007144:	2000477c 	.word	0x2000477c
 8007148:	20004784 	.word	0x20004784
 800714c:	2000478c 	.word	0x2000478c
 8007150:	20004788 	.word	0x20004788
 8007154:	20004790 	.word	0x20004790

08007158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <prvInsertBlockIntoFreeList+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e002      	b.n	800716c <prvInsertBlockIntoFreeList+0x14>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d8f7      	bhi.n	8007166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d108      	bne.n	800719a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d118      	bne.n	80071e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d00d      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e008      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e003      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d002      	beq.n	80071f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	2000477c 	.word	0x2000477c
 8007208:	20004784 	.word	0x20004784

0800720c <atoi>:
 800720c:	220a      	movs	r2, #10
 800720e:	2100      	movs	r1, #0
 8007210:	f000 bbd0 	b.w	80079b4 <strtol>

08007214 <__errno>:
 8007214:	4b01      	ldr	r3, [pc, #4]	; (800721c <__errno+0x8>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	2000001c 	.word	0x2000001c

08007220 <std>:
 8007220:	2300      	movs	r3, #0
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	e9c0 3300 	strd	r3, r3, [r0]
 800722a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800722e:	6083      	str	r3, [r0, #8]
 8007230:	8181      	strh	r1, [r0, #12]
 8007232:	6643      	str	r3, [r0, #100]	; 0x64
 8007234:	81c2      	strh	r2, [r0, #14]
 8007236:	6183      	str	r3, [r0, #24]
 8007238:	4619      	mov	r1, r3
 800723a:	2208      	movs	r2, #8
 800723c:	305c      	adds	r0, #92	; 0x5c
 800723e:	f000 f91a 	bl	8007476 <memset>
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <std+0x38>)
 8007244:	6263      	str	r3, [r4, #36]	; 0x24
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <std+0x3c>)
 8007248:	62a3      	str	r3, [r4, #40]	; 0x28
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <std+0x40>)
 800724c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <std+0x44>)
 8007250:	6224      	str	r4, [r4, #32]
 8007252:	6323      	str	r3, [r4, #48]	; 0x30
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	08007829 	.word	0x08007829
 800725c:	0800784b 	.word	0x0800784b
 8007260:	08007883 	.word	0x08007883
 8007264:	080078a7 	.word	0x080078a7

08007268 <_cleanup_r>:
 8007268:	4901      	ldr	r1, [pc, #4]	; (8007270 <_cleanup_r+0x8>)
 800726a:	f000 b8af 	b.w	80073cc <_fwalk_reent>
 800726e:	bf00      	nop
 8007270:	08007c99 	.word	0x08007c99

08007274 <__sfmoreglue>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	2268      	movs	r2, #104	; 0x68
 8007278:	1e4d      	subs	r5, r1, #1
 800727a:	4355      	muls	r5, r2
 800727c:	460e      	mov	r6, r1
 800727e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007282:	f000 f921 	bl	80074c8 <_malloc_r>
 8007286:	4604      	mov	r4, r0
 8007288:	b140      	cbz	r0, 800729c <__sfmoreglue+0x28>
 800728a:	2100      	movs	r1, #0
 800728c:	e9c0 1600 	strd	r1, r6, [r0]
 8007290:	300c      	adds	r0, #12
 8007292:	60a0      	str	r0, [r4, #8]
 8007294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007298:	f000 f8ed 	bl	8007476 <memset>
 800729c:	4620      	mov	r0, r4
 800729e:	bd70      	pop	{r4, r5, r6, pc}

080072a0 <__sfp_lock_acquire>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__sfp_lock_acquire+0x8>)
 80072a2:	f000 b8d8 	b.w	8007456 <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	20004795 	.word	0x20004795

080072ac <__sfp_lock_release>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__sfp_lock_release+0x8>)
 80072ae:	f000 b8d3 	b.w	8007458 <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	20004795 	.word	0x20004795

080072b8 <__sinit_lock_acquire>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__sinit_lock_acquire+0x8>)
 80072ba:	f000 b8cc 	b.w	8007456 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20004796 	.word	0x20004796

080072c4 <__sinit_lock_release>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__sinit_lock_release+0x8>)
 80072c6:	f000 b8c7 	b.w	8007458 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20004796 	.word	0x20004796

080072d0 <__sinit>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	f7ff fff0 	bl	80072b8 <__sinit_lock_acquire>
 80072d8:	69a3      	ldr	r3, [r4, #24]
 80072da:	b11b      	cbz	r3, 80072e4 <__sinit+0x14>
 80072dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e0:	f7ff bff0 	b.w	80072c4 <__sinit_lock_release>
 80072e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072e8:	6523      	str	r3, [r4, #80]	; 0x50
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <__sinit+0x68>)
 80072ec:	4a13      	ldr	r2, [pc, #76]	; (800733c <__sinit+0x6c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	bf04      	itt	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	61a3      	streq	r3, [r4, #24]
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 f820 	bl	8007340 <__sfp>
 8007300:	6060      	str	r0, [r4, #4]
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f81c 	bl	8007340 <__sfp>
 8007308:	60a0      	str	r0, [r4, #8]
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f818 	bl	8007340 <__sfp>
 8007310:	2200      	movs	r2, #0
 8007312:	60e0      	str	r0, [r4, #12]
 8007314:	2104      	movs	r1, #4
 8007316:	6860      	ldr	r0, [r4, #4]
 8007318:	f7ff ff82 	bl	8007220 <std>
 800731c:	68a0      	ldr	r0, [r4, #8]
 800731e:	2201      	movs	r2, #1
 8007320:	2109      	movs	r1, #9
 8007322:	f7ff ff7d 	bl	8007220 <std>
 8007326:	68e0      	ldr	r0, [r4, #12]
 8007328:	2202      	movs	r2, #2
 800732a:	2112      	movs	r1, #18
 800732c:	f7ff ff78 	bl	8007220 <std>
 8007330:	2301      	movs	r3, #1
 8007332:	61a3      	str	r3, [r4, #24]
 8007334:	e7d2      	b.n	80072dc <__sinit+0xc>
 8007336:	bf00      	nop
 8007338:	08008b94 	.word	0x08008b94
 800733c:	08007269 	.word	0x08007269

08007340 <__sfp>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	4607      	mov	r7, r0
 8007344:	f7ff ffac 	bl	80072a0 <__sfp_lock_acquire>
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <__sfp+0x84>)
 800734a:	681e      	ldr	r6, [r3, #0]
 800734c:	69b3      	ldr	r3, [r6, #24]
 800734e:	b913      	cbnz	r3, 8007356 <__sfp+0x16>
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff ffbd 	bl	80072d0 <__sinit>
 8007356:	3648      	adds	r6, #72	; 0x48
 8007358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800735c:	3b01      	subs	r3, #1
 800735e:	d503      	bpl.n	8007368 <__sfp+0x28>
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	b30b      	cbz	r3, 80073a8 <__sfp+0x68>
 8007364:	6836      	ldr	r6, [r6, #0]
 8007366:	e7f7      	b.n	8007358 <__sfp+0x18>
 8007368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800736c:	b9d5      	cbnz	r5, 80073a4 <__sfp+0x64>
 800736e:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <__sfp+0x88>)
 8007370:	60e3      	str	r3, [r4, #12]
 8007372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007376:	6665      	str	r5, [r4, #100]	; 0x64
 8007378:	f000 f86c 	bl	8007454 <__retarget_lock_init_recursive>
 800737c:	f7ff ff96 	bl	80072ac <__sfp_lock_release>
 8007380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007388:	6025      	str	r5, [r4, #0]
 800738a:	61a5      	str	r5, [r4, #24]
 800738c:	2208      	movs	r2, #8
 800738e:	4629      	mov	r1, r5
 8007390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007394:	f000 f86f 	bl	8007476 <memset>
 8007398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800739c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073a0:	4620      	mov	r0, r4
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	3468      	adds	r4, #104	; 0x68
 80073a6:	e7d9      	b.n	800735c <__sfp+0x1c>
 80073a8:	2104      	movs	r1, #4
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff ff62 	bl	8007274 <__sfmoreglue>
 80073b0:	4604      	mov	r4, r0
 80073b2:	6030      	str	r0, [r6, #0]
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d1d5      	bne.n	8007364 <__sfp+0x24>
 80073b8:	f7ff ff78 	bl	80072ac <__sfp_lock_release>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	e7ee      	b.n	80073a0 <__sfp+0x60>
 80073c2:	bf00      	nop
 80073c4:	08008b94 	.word	0x08008b94
 80073c8:	ffff0001 	.word	0xffff0001

080073cc <_fwalk_reent>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	4606      	mov	r6, r0
 80073d2:	4688      	mov	r8, r1
 80073d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073d8:	2700      	movs	r7, #0
 80073da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073de:	f1b9 0901 	subs.w	r9, r9, #1
 80073e2:	d505      	bpl.n	80073f0 <_fwalk_reent+0x24>
 80073e4:	6824      	ldr	r4, [r4, #0]
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	d1f7      	bne.n	80073da <_fwalk_reent+0xe>
 80073ea:	4638      	mov	r0, r7
 80073ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f0:	89ab      	ldrh	r3, [r5, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d907      	bls.n	8007406 <_fwalk_reent+0x3a>
 80073f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073fa:	3301      	adds	r3, #1
 80073fc:	d003      	beq.n	8007406 <_fwalk_reent+0x3a>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	47c0      	blx	r8
 8007404:	4307      	orrs	r7, r0
 8007406:	3568      	adds	r5, #104	; 0x68
 8007408:	e7e9      	b.n	80073de <_fwalk_reent+0x12>
	...

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f001 fa16 	bl	8008850 <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08008cd4 	.word	0x08008cd4
 8007448:	08008cd4 	.word	0x08008cd4
 800744c:	08008cd4 	.word	0x08008cd4
 8007450:	08008cd8 	.word	0x08008cd8

08007454 <__retarget_lock_init_recursive>:
 8007454:	4770      	bx	lr

08007456 <__retarget_lock_acquire_recursive>:
 8007456:	4770      	bx	lr

08007458 <__retarget_lock_release_recursive>:
 8007458:	4770      	bx	lr

0800745a <memcpy>:
 800745a:	440a      	add	r2, r1
 800745c:	4291      	cmp	r1, r2
 800745e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007462:	d100      	bne.n	8007466 <memcpy+0xc>
 8007464:	4770      	bx	lr
 8007466:	b510      	push	{r4, lr}
 8007468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800746c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007470:	4291      	cmp	r1, r2
 8007472:	d1f9      	bne.n	8007468 <memcpy+0xe>
 8007474:	bd10      	pop	{r4, pc}

08007476 <memset>:
 8007476:	4402      	add	r2, r0
 8007478:	4603      	mov	r3, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	d100      	bne.n	8007480 <memset+0xa>
 800747e:	4770      	bx	lr
 8007480:	f803 1b01 	strb.w	r1, [r3], #1
 8007484:	e7f9      	b.n	800747a <memset+0x4>
	...

08007488 <sbrk_aligned>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	4e0e      	ldr	r6, [pc, #56]	; (80074c4 <sbrk_aligned+0x3c>)
 800748c:	460c      	mov	r4, r1
 800748e:	6831      	ldr	r1, [r6, #0]
 8007490:	4605      	mov	r5, r0
 8007492:	b911      	cbnz	r1, 800749a <sbrk_aligned+0x12>
 8007494:	f000 f984 	bl	80077a0 <_sbrk_r>
 8007498:	6030      	str	r0, [r6, #0]
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f000 f97f 	bl	80077a0 <_sbrk_r>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	d00a      	beq.n	80074bc <sbrk_aligned+0x34>
 80074a6:	1cc4      	adds	r4, r0, #3
 80074a8:	f024 0403 	bic.w	r4, r4, #3
 80074ac:	42a0      	cmp	r0, r4
 80074ae:	d007      	beq.n	80074c0 <sbrk_aligned+0x38>
 80074b0:	1a21      	subs	r1, r4, r0
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 f974 	bl	80077a0 <_sbrk_r>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d101      	bne.n	80074c0 <sbrk_aligned+0x38>
 80074bc:	f04f 34ff 	mov.w	r4, #4294967295
 80074c0:	4620      	mov	r0, r4
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	2000479c 	.word	0x2000479c

080074c8 <_malloc_r>:
 80074c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074cc:	1ccd      	adds	r5, r1, #3
 80074ce:	f025 0503 	bic.w	r5, r5, #3
 80074d2:	3508      	adds	r5, #8
 80074d4:	2d0c      	cmp	r5, #12
 80074d6:	bf38      	it	cc
 80074d8:	250c      	movcc	r5, #12
 80074da:	2d00      	cmp	r5, #0
 80074dc:	4607      	mov	r7, r0
 80074de:	db01      	blt.n	80074e4 <_malloc_r+0x1c>
 80074e0:	42a9      	cmp	r1, r5
 80074e2:	d905      	bls.n	80074f0 <_malloc_r+0x28>
 80074e4:	230c      	movs	r3, #12
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	2600      	movs	r6, #0
 80074ea:	4630      	mov	r0, r6
 80074ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074f0:	4e2e      	ldr	r6, [pc, #184]	; (80075ac <_malloc_r+0xe4>)
 80074f2:	f000 fc85 	bl	8007e00 <__malloc_lock>
 80074f6:	6833      	ldr	r3, [r6, #0]
 80074f8:	461c      	mov	r4, r3
 80074fa:	bb34      	cbnz	r4, 800754a <_malloc_r+0x82>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4638      	mov	r0, r7
 8007500:	f7ff ffc2 	bl	8007488 <sbrk_aligned>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	4604      	mov	r4, r0
 8007508:	d14d      	bne.n	80075a6 <_malloc_r+0xde>
 800750a:	6834      	ldr	r4, [r6, #0]
 800750c:	4626      	mov	r6, r4
 800750e:	2e00      	cmp	r6, #0
 8007510:	d140      	bne.n	8007594 <_malloc_r+0xcc>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	4631      	mov	r1, r6
 8007516:	4638      	mov	r0, r7
 8007518:	eb04 0803 	add.w	r8, r4, r3
 800751c:	f000 f940 	bl	80077a0 <_sbrk_r>
 8007520:	4580      	cmp	r8, r0
 8007522:	d13a      	bne.n	800759a <_malloc_r+0xd2>
 8007524:	6821      	ldr	r1, [r4, #0]
 8007526:	3503      	adds	r5, #3
 8007528:	1a6d      	subs	r5, r5, r1
 800752a:	f025 0503 	bic.w	r5, r5, #3
 800752e:	3508      	adds	r5, #8
 8007530:	2d0c      	cmp	r5, #12
 8007532:	bf38      	it	cc
 8007534:	250c      	movcc	r5, #12
 8007536:	4629      	mov	r1, r5
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff ffa5 	bl	8007488 <sbrk_aligned>
 800753e:	3001      	adds	r0, #1
 8007540:	d02b      	beq.n	800759a <_malloc_r+0xd2>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	442b      	add	r3, r5
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	e00e      	b.n	8007568 <_malloc_r+0xa0>
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	1b52      	subs	r2, r2, r5
 800754e:	d41e      	bmi.n	800758e <_malloc_r+0xc6>
 8007550:	2a0b      	cmp	r2, #11
 8007552:	d916      	bls.n	8007582 <_malloc_r+0xba>
 8007554:	1961      	adds	r1, r4, r5
 8007556:	42a3      	cmp	r3, r4
 8007558:	6025      	str	r5, [r4, #0]
 800755a:	bf18      	it	ne
 800755c:	6059      	strne	r1, [r3, #4]
 800755e:	6863      	ldr	r3, [r4, #4]
 8007560:	bf08      	it	eq
 8007562:	6031      	streq	r1, [r6, #0]
 8007564:	5162      	str	r2, [r4, r5]
 8007566:	604b      	str	r3, [r1, #4]
 8007568:	4638      	mov	r0, r7
 800756a:	f104 060b 	add.w	r6, r4, #11
 800756e:	f000 fc4d 	bl	8007e0c <__malloc_unlock>
 8007572:	f026 0607 	bic.w	r6, r6, #7
 8007576:	1d23      	adds	r3, r4, #4
 8007578:	1af2      	subs	r2, r6, r3
 800757a:	d0b6      	beq.n	80074ea <_malloc_r+0x22>
 800757c:	1b9b      	subs	r3, r3, r6
 800757e:	50a3      	str	r3, [r4, r2]
 8007580:	e7b3      	b.n	80074ea <_malloc_r+0x22>
 8007582:	6862      	ldr	r2, [r4, #4]
 8007584:	42a3      	cmp	r3, r4
 8007586:	bf0c      	ite	eq
 8007588:	6032      	streq	r2, [r6, #0]
 800758a:	605a      	strne	r2, [r3, #4]
 800758c:	e7ec      	b.n	8007568 <_malloc_r+0xa0>
 800758e:	4623      	mov	r3, r4
 8007590:	6864      	ldr	r4, [r4, #4]
 8007592:	e7b2      	b.n	80074fa <_malloc_r+0x32>
 8007594:	4634      	mov	r4, r6
 8007596:	6876      	ldr	r6, [r6, #4]
 8007598:	e7b9      	b.n	800750e <_malloc_r+0x46>
 800759a:	230c      	movs	r3, #12
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	4638      	mov	r0, r7
 80075a0:	f000 fc34 	bl	8007e0c <__malloc_unlock>
 80075a4:	e7a1      	b.n	80074ea <_malloc_r+0x22>
 80075a6:	6025      	str	r5, [r4, #0]
 80075a8:	e7de      	b.n	8007568 <_malloc_r+0xa0>
 80075aa:	bf00      	nop
 80075ac:	20004798 	.word	0x20004798

080075b0 <iprintf>:
 80075b0:	b40f      	push	{r0, r1, r2, r3}
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <iprintf+0x2c>)
 80075b4:	b513      	push	{r0, r1, r4, lr}
 80075b6:	681c      	ldr	r4, [r3, #0]
 80075b8:	b124      	cbz	r4, 80075c4 <iprintf+0x14>
 80075ba:	69a3      	ldr	r3, [r4, #24]
 80075bc:	b913      	cbnz	r3, 80075c4 <iprintf+0x14>
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff fe86 	bl	80072d0 <__sinit>
 80075c4:	ab05      	add	r3, sp, #20
 80075c6:	9a04      	ldr	r2, [sp, #16]
 80075c8:	68a1      	ldr	r1, [r4, #8]
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	4620      	mov	r0, r4
 80075ce:	f000 fdf5 	bl	80081bc <_vfiprintf_r>
 80075d2:	b002      	add	sp, #8
 80075d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d8:	b004      	add	sp, #16
 80075da:	4770      	bx	lr
 80075dc:	2000001c 	.word	0x2000001c

080075e0 <_puts_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	460e      	mov	r6, r1
 80075e4:	4605      	mov	r5, r0
 80075e6:	b118      	cbz	r0, 80075f0 <_puts_r+0x10>
 80075e8:	6983      	ldr	r3, [r0, #24]
 80075ea:	b90b      	cbnz	r3, 80075f0 <_puts_r+0x10>
 80075ec:	f7ff fe70 	bl	80072d0 <__sinit>
 80075f0:	69ab      	ldr	r3, [r5, #24]
 80075f2:	68ac      	ldr	r4, [r5, #8]
 80075f4:	b913      	cbnz	r3, 80075fc <_puts_r+0x1c>
 80075f6:	4628      	mov	r0, r5
 80075f8:	f7ff fe6a 	bl	80072d0 <__sinit>
 80075fc:	4b2c      	ldr	r3, [pc, #176]	; (80076b0 <_puts_r+0xd0>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d120      	bne.n	8007644 <_puts_r+0x64>
 8007602:	686c      	ldr	r4, [r5, #4]
 8007604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d405      	bmi.n	8007616 <_puts_r+0x36>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	0598      	lsls	r0, r3, #22
 800760e:	d402      	bmi.n	8007616 <_puts_r+0x36>
 8007610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007612:	f7ff ff20 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d51d      	bpl.n	8007658 <_puts_r+0x78>
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	b1db      	cbz	r3, 8007658 <_puts_r+0x78>
 8007620:	3e01      	subs	r6, #1
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007628:	3b01      	subs	r3, #1
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	bb39      	cbnz	r1, 800767e <_puts_r+0x9e>
 800762e:	2b00      	cmp	r3, #0
 8007630:	da38      	bge.n	80076a4 <_puts_r+0xc4>
 8007632:	4622      	mov	r2, r4
 8007634:	210a      	movs	r1, #10
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f9c6 	bl	80079c8 <__swbuf_r>
 800763c:	3001      	adds	r0, #1
 800763e:	d011      	beq.n	8007664 <_puts_r+0x84>
 8007640:	250a      	movs	r5, #10
 8007642:	e011      	b.n	8007668 <_puts_r+0x88>
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <_puts_r+0xd4>)
 8007646:	429c      	cmp	r4, r3
 8007648:	d101      	bne.n	800764e <_puts_r+0x6e>
 800764a:	68ac      	ldr	r4, [r5, #8]
 800764c:	e7da      	b.n	8007604 <_puts_r+0x24>
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <_puts_r+0xd8>)
 8007650:	429c      	cmp	r4, r3
 8007652:	bf08      	it	eq
 8007654:	68ec      	ldreq	r4, [r5, #12]
 8007656:	e7d5      	b.n	8007604 <_puts_r+0x24>
 8007658:	4621      	mov	r1, r4
 800765a:	4628      	mov	r0, r5
 800765c:	f000 fa18 	bl	8007a90 <__swsetup_r>
 8007660:	2800      	cmp	r0, #0
 8007662:	d0dd      	beq.n	8007620 <_puts_r+0x40>
 8007664:	f04f 35ff 	mov.w	r5, #4294967295
 8007668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800766a:	07da      	lsls	r2, r3, #31
 800766c:	d405      	bmi.n	800767a <_puts_r+0x9a>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	d402      	bmi.n	800767a <_puts_r+0x9a>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f7ff feef 	bl	8007458 <__retarget_lock_release_recursive>
 800767a:	4628      	mov	r0, r5
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	2b00      	cmp	r3, #0
 8007680:	da04      	bge.n	800768c <_puts_r+0xac>
 8007682:	69a2      	ldr	r2, [r4, #24]
 8007684:	429a      	cmp	r2, r3
 8007686:	dc06      	bgt.n	8007696 <_puts_r+0xb6>
 8007688:	290a      	cmp	r1, #10
 800768a:	d004      	beq.n	8007696 <_puts_r+0xb6>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	e7c5      	b.n	8007622 <_puts_r+0x42>
 8007696:	4622      	mov	r2, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f995 	bl	80079c8 <__swbuf_r>
 800769e:	3001      	adds	r0, #1
 80076a0:	d1bf      	bne.n	8007622 <_puts_r+0x42>
 80076a2:	e7df      	b.n	8007664 <_puts_r+0x84>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	250a      	movs	r5, #10
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	701d      	strb	r5, [r3, #0]
 80076ae:	e7db      	b.n	8007668 <_puts_r+0x88>
 80076b0:	08008b54 	.word	0x08008b54
 80076b4:	08008b74 	.word	0x08008b74
 80076b8:	08008b34 	.word	0x08008b34

080076bc <puts>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <puts+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f7ff bf8d 	b.w	80075e0 <_puts_r>
 80076c6:	bf00      	nop
 80076c8:	2000001c 	.word	0x2000001c

080076cc <cleanup_glue>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	6809      	ldr	r1, [r1, #0]
 80076d2:	4605      	mov	r5, r0
 80076d4:	b109      	cbz	r1, 80076da <cleanup_glue+0xe>
 80076d6:	f7ff fff9 	bl	80076cc <cleanup_glue>
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e2:	f000 bb99 	b.w	8007e18 <_free_r>
	...

080076e8 <_reclaim_reent>:
 80076e8:	4b2c      	ldr	r3, [pc, #176]	; (800779c <_reclaim_reent+0xb4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4283      	cmp	r3, r0
 80076ee:	b570      	push	{r4, r5, r6, lr}
 80076f0:	4604      	mov	r4, r0
 80076f2:	d051      	beq.n	8007798 <_reclaim_reent+0xb0>
 80076f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076f6:	b143      	cbz	r3, 800770a <_reclaim_reent+0x22>
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d14a      	bne.n	8007794 <_reclaim_reent+0xac>
 80076fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007700:	6819      	ldr	r1, [r3, #0]
 8007702:	b111      	cbz	r1, 800770a <_reclaim_reent+0x22>
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fb87 	bl	8007e18 <_free_r>
 800770a:	6961      	ldr	r1, [r4, #20]
 800770c:	b111      	cbz	r1, 8007714 <_reclaim_reent+0x2c>
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fb82 	bl	8007e18 <_free_r>
 8007714:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007716:	b111      	cbz	r1, 800771e <_reclaim_reent+0x36>
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fb7d 	bl	8007e18 <_free_r>
 800771e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007720:	b111      	cbz	r1, 8007728 <_reclaim_reent+0x40>
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fb78 	bl	8007e18 <_free_r>
 8007728:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800772a:	b111      	cbz	r1, 8007732 <_reclaim_reent+0x4a>
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fb73 	bl	8007e18 <_free_r>
 8007732:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007734:	b111      	cbz	r1, 800773c <_reclaim_reent+0x54>
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fb6e 	bl	8007e18 <_free_r>
 800773c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800773e:	b111      	cbz	r1, 8007746 <_reclaim_reent+0x5e>
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fb69 	bl	8007e18 <_free_r>
 8007746:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007748:	b111      	cbz	r1, 8007750 <_reclaim_reent+0x68>
 800774a:	4620      	mov	r0, r4
 800774c:	f000 fb64 	bl	8007e18 <_free_r>
 8007750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007752:	b111      	cbz	r1, 800775a <_reclaim_reent+0x72>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 fb5f 	bl	8007e18 <_free_r>
 800775a:	69a3      	ldr	r3, [r4, #24]
 800775c:	b1e3      	cbz	r3, 8007798 <_reclaim_reent+0xb0>
 800775e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007760:	4620      	mov	r0, r4
 8007762:	4798      	blx	r3
 8007764:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007766:	b1b9      	cbz	r1, 8007798 <_reclaim_reent+0xb0>
 8007768:	4620      	mov	r0, r4
 800776a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800776e:	f7ff bfad 	b.w	80076cc <cleanup_glue>
 8007772:	5949      	ldr	r1, [r1, r5]
 8007774:	b941      	cbnz	r1, 8007788 <_reclaim_reent+0xa0>
 8007776:	3504      	adds	r5, #4
 8007778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777a:	2d80      	cmp	r5, #128	; 0x80
 800777c:	68d9      	ldr	r1, [r3, #12]
 800777e:	d1f8      	bne.n	8007772 <_reclaim_reent+0x8a>
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fb49 	bl	8007e18 <_free_r>
 8007786:	e7ba      	b.n	80076fe <_reclaim_reent+0x16>
 8007788:	680e      	ldr	r6, [r1, #0]
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fb44 	bl	8007e18 <_free_r>
 8007790:	4631      	mov	r1, r6
 8007792:	e7ef      	b.n	8007774 <_reclaim_reent+0x8c>
 8007794:	2500      	movs	r5, #0
 8007796:	e7ef      	b.n	8007778 <_reclaim_reent+0x90>
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	bf00      	nop
 800779c:	2000001c 	.word	0x2000001c

080077a0 <_sbrk_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d06      	ldr	r5, [pc, #24]	; (80077bc <_sbrk_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fa f8e8 	bl	8001980 <_sbrk>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_sbrk_r+0x1a>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_sbrk_r+0x1a>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	200047a0 	.word	0x200047a0

080077c0 <sniprintf>:
 80077c0:	b40c      	push	{r2, r3}
 80077c2:	b530      	push	{r4, r5, lr}
 80077c4:	4b17      	ldr	r3, [pc, #92]	; (8007824 <sniprintf+0x64>)
 80077c6:	1e0c      	subs	r4, r1, #0
 80077c8:	681d      	ldr	r5, [r3, #0]
 80077ca:	b09d      	sub	sp, #116	; 0x74
 80077cc:	da08      	bge.n	80077e0 <sniprintf+0x20>
 80077ce:	238b      	movs	r3, #139	; 0x8b
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295
 80077d6:	b01d      	add	sp, #116	; 0x74
 80077d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077dc:	b002      	add	sp, #8
 80077de:	4770      	bx	lr
 80077e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80077e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077e8:	bf14      	ite	ne
 80077ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077ee:	4623      	moveq	r3, r4
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	9307      	str	r3, [sp, #28]
 80077f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007802:	ab21      	add	r3, sp, #132	; 0x84
 8007804:	a902      	add	r1, sp, #8
 8007806:	4628      	mov	r0, r5
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f000 fbad 	bl	8007f68 <_svfiprintf_r>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	bfbc      	itt	lt
 8007812:	238b      	movlt	r3, #139	; 0x8b
 8007814:	602b      	strlt	r3, [r5, #0]
 8007816:	2c00      	cmp	r4, #0
 8007818:	d0dd      	beq.n	80077d6 <sniprintf+0x16>
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e7d9      	b.n	80077d6 <sniprintf+0x16>
 8007822:	bf00      	nop
 8007824:	2000001c 	.word	0x2000001c

08007828 <__sread>:
 8007828:	b510      	push	{r4, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007830:	f000 ff88 	bl	8008744 <_read_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	bfab      	itete	ge
 8007838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800783a:	89a3      	ldrhlt	r3, [r4, #12]
 800783c:	181b      	addge	r3, r3, r0
 800783e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007842:	bfac      	ite	ge
 8007844:	6563      	strge	r3, [r4, #84]	; 0x54
 8007846:	81a3      	strhlt	r3, [r4, #12]
 8007848:	bd10      	pop	{r4, pc}

0800784a <__swrite>:
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	461f      	mov	r7, r3
 8007850:	898b      	ldrh	r3, [r1, #12]
 8007852:	05db      	lsls	r3, r3, #23
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	4616      	mov	r6, r2
 800785a:	d505      	bpl.n	8007868 <__swrite+0x1e>
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	2302      	movs	r3, #2
 8007862:	2200      	movs	r2, #0
 8007864:	f000 fa54 	bl	8007d10 <_lseek_r>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800786e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	4632      	mov	r2, r6
 8007876:	463b      	mov	r3, r7
 8007878:	4628      	mov	r0, r5
 800787a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	f000 b8f5 	b.w	8007a6c <_write_r>

08007882 <__sseek>:
 8007882:	b510      	push	{r4, lr}
 8007884:	460c      	mov	r4, r1
 8007886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788a:	f000 fa41 	bl	8007d10 <_lseek_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	bf15      	itete	ne
 8007894:	6560      	strne	r0, [r4, #84]	; 0x54
 8007896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800789a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800789e:	81a3      	strheq	r3, [r4, #12]
 80078a0:	bf18      	it	ne
 80078a2:	81a3      	strhne	r3, [r4, #12]
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <__sclose>:
 80078a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078aa:	f000 b95f 	b.w	8007b6c <_close_r>
	...

080078b0 <_strtol_l.constprop.0>:
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b6:	d001      	beq.n	80078bc <_strtol_l.constprop.0+0xc>
 80078b8:	2b24      	cmp	r3, #36	; 0x24
 80078ba:	d906      	bls.n	80078ca <_strtol_l.constprop.0+0x1a>
 80078bc:	f7ff fcaa 	bl	8007214 <__errno>
 80078c0:	2316      	movs	r3, #22
 80078c2:	6003      	str	r3, [r0, #0]
 80078c4:	2000      	movs	r0, #0
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079b0 <_strtol_l.constprop.0+0x100>
 80078ce:	460d      	mov	r5, r1
 80078d0:	462e      	mov	r6, r5
 80078d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80078da:	f017 0708 	ands.w	r7, r7, #8
 80078de:	d1f7      	bne.n	80078d0 <_strtol_l.constprop.0+0x20>
 80078e0:	2c2d      	cmp	r4, #45	; 0x2d
 80078e2:	d132      	bne.n	800794a <_strtol_l.constprop.0+0x9a>
 80078e4:	782c      	ldrb	r4, [r5, #0]
 80078e6:	2701      	movs	r7, #1
 80078e8:	1cb5      	adds	r5, r6, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d05b      	beq.n	80079a6 <_strtol_l.constprop.0+0xf6>
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	d109      	bne.n	8007906 <_strtol_l.constprop.0+0x56>
 80078f2:	2c30      	cmp	r4, #48	; 0x30
 80078f4:	d107      	bne.n	8007906 <_strtol_l.constprop.0+0x56>
 80078f6:	782c      	ldrb	r4, [r5, #0]
 80078f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078fc:	2c58      	cmp	r4, #88	; 0x58
 80078fe:	d14d      	bne.n	800799c <_strtol_l.constprop.0+0xec>
 8007900:	786c      	ldrb	r4, [r5, #1]
 8007902:	2310      	movs	r3, #16
 8007904:	3502      	adds	r5, #2
 8007906:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800790a:	f108 38ff 	add.w	r8, r8, #4294967295
 800790e:	f04f 0c00 	mov.w	ip, #0
 8007912:	fbb8 f9f3 	udiv	r9, r8, r3
 8007916:	4666      	mov	r6, ip
 8007918:	fb03 8a19 	mls	sl, r3, r9, r8
 800791c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007920:	f1be 0f09 	cmp.w	lr, #9
 8007924:	d816      	bhi.n	8007954 <_strtol_l.constprop.0+0xa4>
 8007926:	4674      	mov	r4, lr
 8007928:	42a3      	cmp	r3, r4
 800792a:	dd24      	ble.n	8007976 <_strtol_l.constprop.0+0xc6>
 800792c:	f1bc 0f00 	cmp.w	ip, #0
 8007930:	db1e      	blt.n	8007970 <_strtol_l.constprop.0+0xc0>
 8007932:	45b1      	cmp	r9, r6
 8007934:	d31c      	bcc.n	8007970 <_strtol_l.constprop.0+0xc0>
 8007936:	d101      	bne.n	800793c <_strtol_l.constprop.0+0x8c>
 8007938:	45a2      	cmp	sl, r4
 800793a:	db19      	blt.n	8007970 <_strtol_l.constprop.0+0xc0>
 800793c:	fb06 4603 	mla	r6, r6, r3, r4
 8007940:	f04f 0c01 	mov.w	ip, #1
 8007944:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007948:	e7e8      	b.n	800791c <_strtol_l.constprop.0+0x6c>
 800794a:	2c2b      	cmp	r4, #43	; 0x2b
 800794c:	bf04      	itt	eq
 800794e:	782c      	ldrbeq	r4, [r5, #0]
 8007950:	1cb5      	addeq	r5, r6, #2
 8007952:	e7ca      	b.n	80078ea <_strtol_l.constprop.0+0x3a>
 8007954:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007958:	f1be 0f19 	cmp.w	lr, #25
 800795c:	d801      	bhi.n	8007962 <_strtol_l.constprop.0+0xb2>
 800795e:	3c37      	subs	r4, #55	; 0x37
 8007960:	e7e2      	b.n	8007928 <_strtol_l.constprop.0+0x78>
 8007962:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007966:	f1be 0f19 	cmp.w	lr, #25
 800796a:	d804      	bhi.n	8007976 <_strtol_l.constprop.0+0xc6>
 800796c:	3c57      	subs	r4, #87	; 0x57
 800796e:	e7db      	b.n	8007928 <_strtol_l.constprop.0+0x78>
 8007970:	f04f 3cff 	mov.w	ip, #4294967295
 8007974:	e7e6      	b.n	8007944 <_strtol_l.constprop.0+0x94>
 8007976:	f1bc 0f00 	cmp.w	ip, #0
 800797a:	da05      	bge.n	8007988 <_strtol_l.constprop.0+0xd8>
 800797c:	2322      	movs	r3, #34	; 0x22
 800797e:	6003      	str	r3, [r0, #0]
 8007980:	4646      	mov	r6, r8
 8007982:	b942      	cbnz	r2, 8007996 <_strtol_l.constprop.0+0xe6>
 8007984:	4630      	mov	r0, r6
 8007986:	e79e      	b.n	80078c6 <_strtol_l.constprop.0+0x16>
 8007988:	b107      	cbz	r7, 800798c <_strtol_l.constprop.0+0xdc>
 800798a:	4276      	negs	r6, r6
 800798c:	2a00      	cmp	r2, #0
 800798e:	d0f9      	beq.n	8007984 <_strtol_l.constprop.0+0xd4>
 8007990:	f1bc 0f00 	cmp.w	ip, #0
 8007994:	d000      	beq.n	8007998 <_strtol_l.constprop.0+0xe8>
 8007996:	1e69      	subs	r1, r5, #1
 8007998:	6011      	str	r1, [r2, #0]
 800799a:	e7f3      	b.n	8007984 <_strtol_l.constprop.0+0xd4>
 800799c:	2430      	movs	r4, #48	; 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1b1      	bne.n	8007906 <_strtol_l.constprop.0+0x56>
 80079a2:	2308      	movs	r3, #8
 80079a4:	e7af      	b.n	8007906 <_strtol_l.constprop.0+0x56>
 80079a6:	2c30      	cmp	r4, #48	; 0x30
 80079a8:	d0a5      	beq.n	80078f6 <_strtol_l.constprop.0+0x46>
 80079aa:	230a      	movs	r3, #10
 80079ac:	e7ab      	b.n	8007906 <_strtol_l.constprop.0+0x56>
 80079ae:	bf00      	nop
 80079b0:	08008b99 	.word	0x08008b99

080079b4 <strtol>:
 80079b4:	4613      	mov	r3, r2
 80079b6:	460a      	mov	r2, r1
 80079b8:	4601      	mov	r1, r0
 80079ba:	4802      	ldr	r0, [pc, #8]	; (80079c4 <strtol+0x10>)
 80079bc:	6800      	ldr	r0, [r0, #0]
 80079be:	f7ff bf77 	b.w	80078b0 <_strtol_l.constprop.0>
 80079c2:	bf00      	nop
 80079c4:	2000001c 	.word	0x2000001c

080079c8 <__swbuf_r>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	460e      	mov	r6, r1
 80079cc:	4614      	mov	r4, r2
 80079ce:	4605      	mov	r5, r0
 80079d0:	b118      	cbz	r0, 80079da <__swbuf_r+0x12>
 80079d2:	6983      	ldr	r3, [r0, #24]
 80079d4:	b90b      	cbnz	r3, 80079da <__swbuf_r+0x12>
 80079d6:	f7ff fc7b 	bl	80072d0 <__sinit>
 80079da:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <__swbuf_r+0x98>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d12b      	bne.n	8007a38 <__swbuf_r+0x70>
 80079e0:	686c      	ldr	r4, [r5, #4]
 80079e2:	69a3      	ldr	r3, [r4, #24]
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	071a      	lsls	r2, r3, #28
 80079ea:	d52f      	bpl.n	8007a4c <__swbuf_r+0x84>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b36b      	cbz	r3, 8007a4c <__swbuf_r+0x84>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	1ac0      	subs	r0, r0, r3
 80079f6:	6963      	ldr	r3, [r4, #20]
 80079f8:	b2f6      	uxtb	r6, r6
 80079fa:	4283      	cmp	r3, r0
 80079fc:	4637      	mov	r7, r6
 80079fe:	dc04      	bgt.n	8007a0a <__swbuf_r+0x42>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f948 	bl	8007c98 <_fflush_r>
 8007a08:	bb30      	cbnz	r0, 8007a58 <__swbuf_r+0x90>
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	60a3      	str	r3, [r4, #8]
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	701e      	strb	r6, [r3, #0]
 8007a18:	6963      	ldr	r3, [r4, #20]
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	4283      	cmp	r3, r0
 8007a1e:	d004      	beq.n	8007a2a <__swbuf_r+0x62>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	07db      	lsls	r3, r3, #31
 8007a24:	d506      	bpl.n	8007a34 <__swbuf_r+0x6c>
 8007a26:	2e0a      	cmp	r6, #10
 8007a28:	d104      	bne.n	8007a34 <__swbuf_r+0x6c>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f933 	bl	8007c98 <_fflush_r>
 8007a32:	b988      	cbnz	r0, 8007a58 <__swbuf_r+0x90>
 8007a34:	4638      	mov	r0, r7
 8007a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <__swbuf_r+0x9c>)
 8007a3a:	429c      	cmp	r4, r3
 8007a3c:	d101      	bne.n	8007a42 <__swbuf_r+0x7a>
 8007a3e:	68ac      	ldr	r4, [r5, #8]
 8007a40:	e7cf      	b.n	80079e2 <__swbuf_r+0x1a>
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <__swbuf_r+0xa0>)
 8007a44:	429c      	cmp	r4, r3
 8007a46:	bf08      	it	eq
 8007a48:	68ec      	ldreq	r4, [r5, #12]
 8007a4a:	e7ca      	b.n	80079e2 <__swbuf_r+0x1a>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 f81e 	bl	8007a90 <__swsetup_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0cb      	beq.n	80079f0 <__swbuf_r+0x28>
 8007a58:	f04f 37ff 	mov.w	r7, #4294967295
 8007a5c:	e7ea      	b.n	8007a34 <__swbuf_r+0x6c>
 8007a5e:	bf00      	nop
 8007a60:	08008b54 	.word	0x08008b54
 8007a64:	08008b74 	.word	0x08008b74
 8007a68:	08008b34 	.word	0x08008b34

08007a6c <_write_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	; (8007a8c <_write_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7f9 ff2f 	bl	80018de <_write>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_write_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_write_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	200047a0 	.word	0x200047a0

08007a90 <__swsetup_r>:
 8007a90:	4b32      	ldr	r3, [pc, #200]	; (8007b5c <__swsetup_r+0xcc>)
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	4606      	mov	r6, r0
 8007a98:	460c      	mov	r4, r1
 8007a9a:	b125      	cbz	r5, 8007aa6 <__swsetup_r+0x16>
 8007a9c:	69ab      	ldr	r3, [r5, #24]
 8007a9e:	b913      	cbnz	r3, 8007aa6 <__swsetup_r+0x16>
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f7ff fc15 	bl	80072d0 <__sinit>
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <__swsetup_r+0xd0>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	d10f      	bne.n	8007acc <__swsetup_r+0x3c>
 8007aac:	686c      	ldr	r4, [r5, #4]
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d42c      	bmi.n	8007b12 <__swsetup_r+0x82>
 8007ab8:	06dd      	lsls	r5, r3, #27
 8007aba:	d411      	bmi.n	8007ae0 <__swsetup_r+0x50>
 8007abc:	2309      	movs	r3, #9
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	e03e      	b.n	8007b4a <__swsetup_r+0xba>
 8007acc:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <__swsetup_r+0xd4>)
 8007ace:	429c      	cmp	r4, r3
 8007ad0:	d101      	bne.n	8007ad6 <__swsetup_r+0x46>
 8007ad2:	68ac      	ldr	r4, [r5, #8]
 8007ad4:	e7eb      	b.n	8007aae <__swsetup_r+0x1e>
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <__swsetup_r+0xd8>)
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	bf08      	it	eq
 8007adc:	68ec      	ldreq	r4, [r5, #12]
 8007ade:	e7e6      	b.n	8007aae <__swsetup_r+0x1e>
 8007ae0:	0758      	lsls	r0, r3, #29
 8007ae2:	d512      	bpl.n	8007b0a <__swsetup_r+0x7a>
 8007ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ae6:	b141      	cbz	r1, 8007afa <__swsetup_r+0x6a>
 8007ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aec:	4299      	cmp	r1, r3
 8007aee:	d002      	beq.n	8007af6 <__swsetup_r+0x66>
 8007af0:	4630      	mov	r0, r6
 8007af2:	f000 f991 	bl	8007e18 <_free_r>
 8007af6:	2300      	movs	r3, #0
 8007af8:	6363      	str	r3, [r4, #52]	; 0x34
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	2300      	movs	r3, #0
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f043 0308 	orr.w	r3, r3, #8
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	b94b      	cbnz	r3, 8007b2a <__swsetup_r+0x9a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b20:	d003      	beq.n	8007b2a <__swsetup_r+0x9a>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 f92b 	bl	8007d80 <__smakebuf_r>
 8007b2a:	89a0      	ldrh	r0, [r4, #12]
 8007b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b30:	f010 0301 	ands.w	r3, r0, #1
 8007b34:	d00a      	beq.n	8007b4c <__swsetup_r+0xbc>
 8007b36:	2300      	movs	r3, #0
 8007b38:	60a3      	str	r3, [r4, #8]
 8007b3a:	6963      	ldr	r3, [r4, #20]
 8007b3c:	425b      	negs	r3, r3
 8007b3e:	61a3      	str	r3, [r4, #24]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	b943      	cbnz	r3, 8007b56 <__swsetup_r+0xc6>
 8007b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b48:	d1ba      	bne.n	8007ac0 <__swsetup_r+0x30>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	0781      	lsls	r1, r0, #30
 8007b4e:	bf58      	it	pl
 8007b50:	6963      	ldrpl	r3, [r4, #20]
 8007b52:	60a3      	str	r3, [r4, #8]
 8007b54:	e7f4      	b.n	8007b40 <__swsetup_r+0xb0>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e7f7      	b.n	8007b4a <__swsetup_r+0xba>
 8007b5a:	bf00      	nop
 8007b5c:	2000001c 	.word	0x2000001c
 8007b60:	08008b54 	.word	0x08008b54
 8007b64:	08008b74 	.word	0x08008b74
 8007b68:	08008b34 	.word	0x08008b34

08007b6c <_close_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_close_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7f9 fecd 	bl	8001916 <_close>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_close_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_close_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	200047a0 	.word	0x200047a0

08007b8c <__sflush_r>:
 8007b8c:	898a      	ldrh	r2, [r1, #12]
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	4605      	mov	r5, r0
 8007b94:	0710      	lsls	r0, r2, #28
 8007b96:	460c      	mov	r4, r1
 8007b98:	d458      	bmi.n	8007c4c <__sflush_r+0xc0>
 8007b9a:	684b      	ldr	r3, [r1, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc05      	bgt.n	8007bac <__sflush_r+0x20>
 8007ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dc02      	bgt.n	8007bac <__sflush_r+0x20>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d0f9      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bb8:	682f      	ldr	r7, [r5, #0]
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	d032      	beq.n	8007c24 <__sflush_r+0x98>
 8007bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	075a      	lsls	r2, r3, #29
 8007bc4:	d505      	bpl.n	8007bd2 <__sflush_r+0x46>
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	1ac0      	subs	r0, r0, r3
 8007bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bcc:	b10b      	cbz	r3, 8007bd2 <__sflush_r+0x46>
 8007bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd0:	1ac0      	subs	r0, r0, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd8:	6a21      	ldr	r1, [r4, #32]
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b0      	blx	r6
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	d106      	bne.n	8007bf2 <__sflush_r+0x66>
 8007be4:	6829      	ldr	r1, [r5, #0]
 8007be6:	291d      	cmp	r1, #29
 8007be8:	d82c      	bhi.n	8007c44 <__sflush_r+0xb8>
 8007bea:	4a2a      	ldr	r2, [pc, #168]	; (8007c94 <__sflush_r+0x108>)
 8007bec:	40ca      	lsrs	r2, r1
 8007bee:	07d6      	lsls	r6, r2, #31
 8007bf0:	d528      	bpl.n	8007c44 <__sflush_r+0xb8>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6062      	str	r2, [r4, #4]
 8007bf6:	04d9      	lsls	r1, r3, #19
 8007bf8:	6922      	ldr	r2, [r4, #16]
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	d504      	bpl.n	8007c08 <__sflush_r+0x7c>
 8007bfe:	1c42      	adds	r2, r0, #1
 8007c00:	d101      	bne.n	8007c06 <__sflush_r+0x7a>
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	b903      	cbnz	r3, 8007c08 <__sflush_r+0x7c>
 8007c06:	6560      	str	r0, [r4, #84]	; 0x54
 8007c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0a:	602f      	str	r7, [r5, #0]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d0ca      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d002      	beq.n	8007c1e <__sflush_r+0x92>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f8fd 	bl	8007e18 <_free_r>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	6360      	str	r0, [r4, #52]	; 0x34
 8007c22:	e7c1      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c24:	6a21      	ldr	r1, [r4, #32]
 8007c26:	2301      	movs	r3, #1
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b0      	blx	r6
 8007c2c:	1c41      	adds	r1, r0, #1
 8007c2e:	d1c7      	bne.n	8007bc0 <__sflush_r+0x34>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0c4      	beq.n	8007bc0 <__sflush_r+0x34>
 8007c36:	2b1d      	cmp	r3, #29
 8007c38:	d001      	beq.n	8007c3e <__sflush_r+0xb2>
 8007c3a:	2b16      	cmp	r3, #22
 8007c3c:	d101      	bne.n	8007c42 <__sflush_r+0xb6>
 8007c3e:	602f      	str	r7, [r5, #0]
 8007c40:	e7b1      	b.n	8007ba6 <__sflush_r+0x1a>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	e7ad      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c4c:	690f      	ldr	r7, [r1, #16]
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	d0a9      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007c52:	0793      	lsls	r3, r2, #30
 8007c54:	680e      	ldr	r6, [r1, #0]
 8007c56:	bf08      	it	eq
 8007c58:	694b      	ldreq	r3, [r1, #20]
 8007c5a:	600f      	str	r7, [r1, #0]
 8007c5c:	bf18      	it	ne
 8007c5e:	2300      	movne	r3, #0
 8007c60:	eba6 0807 	sub.w	r8, r6, r7
 8007c64:	608b      	str	r3, [r1, #8]
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	dd9c      	ble.n	8007ba6 <__sflush_r+0x1a>
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c70:	4643      	mov	r3, r8
 8007c72:	463a      	mov	r2, r7
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b0      	blx	r6
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	dc06      	bgt.n	8007c8a <__sflush_r+0xfe>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e78e      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c8a:	4407      	add	r7, r0
 8007c8c:	eba8 0800 	sub.w	r8, r8, r0
 8007c90:	e7e9      	b.n	8007c66 <__sflush_r+0xda>
 8007c92:	bf00      	nop
 8007c94:	20400001 	.word	0x20400001

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6983      	ldr	r3, [r0, #24]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f7ff fb0f 	bl	80072d0 <__sinit>
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <_fflush_r+0x6c>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d11b      	bne.n	8007cf0 <_fflush_r+0x58>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ef      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc4:	07d0      	lsls	r0, r2, #31
 8007cc6:	d404      	bmi.n	8007cd2 <_fflush_r+0x3a>
 8007cc8:	0599      	lsls	r1, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_fflush_r+0x3a>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cce:	f7ff fbc2 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7ff ff59 	bl	8007b8c <__sflush_r>
 8007cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cdc:	07da      	lsls	r2, r3, #31
 8007cde:	4605      	mov	r5, r0
 8007ce0:	d4e0      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	059b      	lsls	r3, r3, #22
 8007ce6:	d4dd      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cea:	f7ff fbb5 	bl	8007458 <__retarget_lock_release_recursive>
 8007cee:	e7d9      	b.n	8007ca4 <_fflush_r+0xc>
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_fflush_r+0x70>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d101      	bne.n	8007cfa <_fflush_r+0x62>
 8007cf6:	68ac      	ldr	r4, [r5, #8]
 8007cf8:	e7df      	b.n	8007cba <_fflush_r+0x22>
 8007cfa:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <_fflush_r+0x74>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	bf08      	it	eq
 8007d00:	68ec      	ldreq	r4, [r5, #12]
 8007d02:	e7da      	b.n	8007cba <_fflush_r+0x22>
 8007d04:	08008b54 	.word	0x08008b54
 8007d08:	08008b74 	.word	0x08008b74
 8007d0c:	08008b34 	.word	0x08008b34

08007d10 <_lseek_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	; (8007d30 <_lseek_r+0x20>)
 8007d14:	4604      	mov	r4, r0
 8007d16:	4608      	mov	r0, r1
 8007d18:	4611      	mov	r1, r2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7f9 fe20 	bl	8001964 <_lseek>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_lseek_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_lseek_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	200047a0 	.word	0x200047a0

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	; 0x58
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
 8007d44:	da08      	bge.n	8007d58 <__swhatbuf_r+0x24>
 8007d46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	061a      	lsls	r2, r3, #24
 8007d50:	d410      	bmi.n	8007d74 <__swhatbuf_r+0x40>
 8007d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d56:	e00e      	b.n	8007d76 <__swhatbuf_r+0x42>
 8007d58:	466a      	mov	r2, sp
 8007d5a:	f000 fd05 	bl	8008768 <_fstat_r>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	dbf1      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d62:	9a01      	ldr	r2, [sp, #4]
 8007d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d6c:	425a      	negs	r2, r3
 8007d6e:	415a      	adcs	r2, r3
 8007d70:	602a      	str	r2, [r5, #0]
 8007d72:	e7ee      	b.n	8007d52 <__swhatbuf_r+0x1e>
 8007d74:	2340      	movs	r3, #64	; 0x40
 8007d76:	2000      	movs	r0, #0
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	b016      	add	sp, #88	; 0x58
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d80 <__smakebuf_r>:
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d84:	079d      	lsls	r5, r3, #30
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	d507      	bpl.n	8007d9c <__smakebuf_r+0x1c>
 8007d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6163      	str	r3, [r4, #20]
 8007d98:	b002      	add	sp, #8
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	ab01      	add	r3, sp, #4
 8007d9e:	466a      	mov	r2, sp
 8007da0:	f7ff ffc8 	bl	8007d34 <__swhatbuf_r>
 8007da4:	9900      	ldr	r1, [sp, #0]
 8007da6:	4605      	mov	r5, r0
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff fb8d 	bl	80074c8 <_malloc_r>
 8007dae:	b948      	cbnz	r0, 8007dc4 <__smakebuf_r+0x44>
 8007db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db4:	059a      	lsls	r2, r3, #22
 8007db6:	d4ef      	bmi.n	8007d98 <__smakebuf_r+0x18>
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	e7e3      	b.n	8007d8c <__smakebuf_r+0xc>
 8007dc4:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <__smakebuf_r+0x7c>)
 8007dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	9b00      	ldr	r3, [sp, #0]
 8007dd4:	6163      	str	r3, [r4, #20]
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	6120      	str	r0, [r4, #16]
 8007dda:	b15b      	cbz	r3, 8007df4 <__smakebuf_r+0x74>
 8007ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 fcd3 	bl	800878c <_isatty_r>
 8007de6:	b128      	cbz	r0, 8007df4 <__smakebuf_r+0x74>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	89a0      	ldrh	r0, [r4, #12]
 8007df6:	4305      	orrs	r5, r0
 8007df8:	81a5      	strh	r5, [r4, #12]
 8007dfa:	e7cd      	b.n	8007d98 <__smakebuf_r+0x18>
 8007dfc:	08007269 	.word	0x08007269

08007e00 <__malloc_lock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__malloc_lock+0x8>)
 8007e02:	f7ff bb28 	b.w	8007456 <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	20004794 	.word	0x20004794

08007e0c <__malloc_unlock>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__malloc_unlock+0x8>)
 8007e0e:	f7ff bb23 	b.w	8007458 <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	20004794 	.word	0x20004794

08007e18 <_free_r>:
 8007e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e1a:	2900      	cmp	r1, #0
 8007e1c:	d044      	beq.n	8007ea8 <_free_r+0x90>
 8007e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e22:	9001      	str	r0, [sp, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f1a1 0404 	sub.w	r4, r1, #4
 8007e2a:	bfb8      	it	lt
 8007e2c:	18e4      	addlt	r4, r4, r3
 8007e2e:	f7ff ffe7 	bl	8007e00 <__malloc_lock>
 8007e32:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <_free_r+0x94>)
 8007e34:	9801      	ldr	r0, [sp, #4]
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	b933      	cbnz	r3, 8007e48 <_free_r+0x30>
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	6014      	str	r4, [r2, #0]
 8007e3e:	b003      	add	sp, #12
 8007e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e44:	f7ff bfe2 	b.w	8007e0c <__malloc_unlock>
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d908      	bls.n	8007e5e <_free_r+0x46>
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	1961      	adds	r1, r4, r5
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf01      	itttt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	1949      	addeq	r1, r1, r5
 8007e5a:	6021      	streq	r1, [r4, #0]
 8007e5c:	e7ed      	b.n	8007e3a <_free_r+0x22>
 8007e5e:	461a      	mov	r2, r3
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	b10b      	cbz	r3, 8007e68 <_free_r+0x50>
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	d9fa      	bls.n	8007e5e <_free_r+0x46>
 8007e68:	6811      	ldr	r1, [r2, #0]
 8007e6a:	1855      	adds	r5, r2, r1
 8007e6c:	42a5      	cmp	r5, r4
 8007e6e:	d10b      	bne.n	8007e88 <_free_r+0x70>
 8007e70:	6824      	ldr	r4, [r4, #0]
 8007e72:	4421      	add	r1, r4
 8007e74:	1854      	adds	r4, r2, r1
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	6011      	str	r1, [r2, #0]
 8007e7a:	d1e0      	bne.n	8007e3e <_free_r+0x26>
 8007e7c:	681c      	ldr	r4, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	6053      	str	r3, [r2, #4]
 8007e82:	4421      	add	r1, r4
 8007e84:	6011      	str	r1, [r2, #0]
 8007e86:	e7da      	b.n	8007e3e <_free_r+0x26>
 8007e88:	d902      	bls.n	8007e90 <_free_r+0x78>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6003      	str	r3, [r0, #0]
 8007e8e:	e7d6      	b.n	8007e3e <_free_r+0x26>
 8007e90:	6825      	ldr	r5, [r4, #0]
 8007e92:	1961      	adds	r1, r4, r5
 8007e94:	428b      	cmp	r3, r1
 8007e96:	bf04      	itt	eq
 8007e98:	6819      	ldreq	r1, [r3, #0]
 8007e9a:	685b      	ldreq	r3, [r3, #4]
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	bf04      	itt	eq
 8007ea0:	1949      	addeq	r1, r1, r5
 8007ea2:	6021      	streq	r1, [r4, #0]
 8007ea4:	6054      	str	r4, [r2, #4]
 8007ea6:	e7ca      	b.n	8007e3e <_free_r+0x26>
 8007ea8:	b003      	add	sp, #12
 8007eaa:	bd30      	pop	{r4, r5, pc}
 8007eac:	20004798 	.word	0x20004798

08007eb0 <__ssputs_r>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	688e      	ldr	r6, [r1, #8]
 8007eb6:	429e      	cmp	r6, r3
 8007eb8:	4682      	mov	sl, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4690      	mov	r8, r2
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	d838      	bhi.n	8007f34 <__ssputs_r+0x84>
 8007ec2:	898a      	ldrh	r2, [r1, #12]
 8007ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ec8:	d032      	beq.n	8007f30 <__ssputs_r+0x80>
 8007eca:	6825      	ldr	r5, [r4, #0]
 8007ecc:	6909      	ldr	r1, [r1, #16]
 8007ece:	eba5 0901 	sub.w	r9, r5, r1
 8007ed2:	6965      	ldr	r5, [r4, #20]
 8007ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007edc:	3301      	adds	r3, #1
 8007ede:	444b      	add	r3, r9
 8007ee0:	106d      	asrs	r5, r5, #1
 8007ee2:	429d      	cmp	r5, r3
 8007ee4:	bf38      	it	cc
 8007ee6:	461d      	movcc	r5, r3
 8007ee8:	0553      	lsls	r3, r2, #21
 8007eea:	d531      	bpl.n	8007f50 <__ssputs_r+0xa0>
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7ff faeb 	bl	80074c8 <_malloc_r>
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	b950      	cbnz	r0, 8007f0c <__ssputs_r+0x5c>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	f8ca 3000 	str.w	r3, [sl]
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0c:	6921      	ldr	r1, [r4, #16]
 8007f0e:	464a      	mov	r2, r9
 8007f10:	f7ff faa3 	bl	800745a <memcpy>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	6126      	str	r6, [r4, #16]
 8007f22:	6165      	str	r5, [r4, #20]
 8007f24:	444e      	add	r6, r9
 8007f26:	eba5 0509 	sub.w	r5, r5, r9
 8007f2a:	6026      	str	r6, [r4, #0]
 8007f2c:	60a5      	str	r5, [r4, #8]
 8007f2e:	463e      	mov	r6, r7
 8007f30:	42be      	cmp	r6, r7
 8007f32:	d900      	bls.n	8007f36 <__ssputs_r+0x86>
 8007f34:	463e      	mov	r6, r7
 8007f36:	6820      	ldr	r0, [r4, #0]
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	f000 fc36 	bl	80087ac <memmove>
 8007f40:	68a3      	ldr	r3, [r4, #8]
 8007f42:	1b9b      	subs	r3, r3, r6
 8007f44:	60a3      	str	r3, [r4, #8]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	4433      	add	r3, r6
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e7db      	b.n	8007f08 <__ssputs_r+0x58>
 8007f50:	462a      	mov	r2, r5
 8007f52:	f000 fc45 	bl	80087e0 <_realloc_r>
 8007f56:	4606      	mov	r6, r0
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d1e1      	bne.n	8007f20 <__ssputs_r+0x70>
 8007f5c:	6921      	ldr	r1, [r4, #16]
 8007f5e:	4650      	mov	r0, sl
 8007f60:	f7ff ff5a 	bl	8007e18 <_free_r>
 8007f64:	e7c7      	b.n	8007ef6 <__ssputs_r+0x46>
	...

08007f68 <_svfiprintf_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4698      	mov	r8, r3
 8007f6e:	898b      	ldrh	r3, [r1, #12]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	b09d      	sub	sp, #116	; 0x74
 8007f74:	4607      	mov	r7, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	d50e      	bpl.n	8007f9a <_svfiprintf_r+0x32>
 8007f7c:	690b      	ldr	r3, [r1, #16]
 8007f7e:	b963      	cbnz	r3, 8007f9a <_svfiprintf_r+0x32>
 8007f80:	2140      	movs	r1, #64	; 0x40
 8007f82:	f7ff faa1 	bl	80074c8 <_malloc_r>
 8007f86:	6028      	str	r0, [r5, #0]
 8007f88:	6128      	str	r0, [r5, #16]
 8007f8a:	b920      	cbnz	r0, 8007f96 <_svfiprintf_r+0x2e>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e0d1      	b.n	800813a <_svfiprintf_r+0x1d2>
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	616b      	str	r3, [r5, #20]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9e:	2320      	movs	r3, #32
 8007fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fa8:	2330      	movs	r3, #48	; 0x30
 8007faa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008154 <_svfiprintf_r+0x1ec>
 8007fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb2:	f04f 0901 	mov.w	r9, #1
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	469a      	mov	sl, r3
 8007fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fbe:	b10a      	cbz	r2, 8007fc4 <_svfiprintf_r+0x5c>
 8007fc0:	2a25      	cmp	r2, #37	; 0x25
 8007fc2:	d1f9      	bne.n	8007fb8 <_svfiprintf_r+0x50>
 8007fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fc8:	d00b      	beq.n	8007fe2 <_svfiprintf_r+0x7a>
 8007fca:	465b      	mov	r3, fp
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7ff ff6d 	bl	8007eb0 <__ssputs_r>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f000 80aa 	beq.w	8008130 <_svfiprintf_r+0x1c8>
 8007fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fde:	445a      	add	r2, fp
 8007fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80a2 	beq.w	8008130 <_svfiprintf_r+0x1c8>
 8007fec:	2300      	movs	r3, #0
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff6:	f10a 0a01 	add.w	sl, sl, #1
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	9307      	str	r3, [sp, #28]
 8007ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008002:	931a      	str	r3, [sp, #104]	; 0x68
 8008004:	4654      	mov	r4, sl
 8008006:	2205      	movs	r2, #5
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	4851      	ldr	r0, [pc, #324]	; (8008154 <_svfiprintf_r+0x1ec>)
 800800e:	f7f8 f8ff 	bl	8000210 <memchr>
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	b9d8      	cbnz	r0, 800804e <_svfiprintf_r+0xe6>
 8008016:	06d0      	lsls	r0, r2, #27
 8008018:	bf44      	itt	mi
 800801a:	2320      	movmi	r3, #32
 800801c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008020:	0711      	lsls	r1, r2, #28
 8008022:	bf44      	itt	mi
 8008024:	232b      	movmi	r3, #43	; 0x2b
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802a:	f89a 3000 	ldrb.w	r3, [sl]
 800802e:	2b2a      	cmp	r3, #42	; 0x2a
 8008030:	d015      	beq.n	800805e <_svfiprintf_r+0xf6>
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	4654      	mov	r4, sl
 8008036:	2000      	movs	r0, #0
 8008038:	f04f 0c0a 	mov.w	ip, #10
 800803c:	4621      	mov	r1, r4
 800803e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008042:	3b30      	subs	r3, #48	; 0x30
 8008044:	2b09      	cmp	r3, #9
 8008046:	d94e      	bls.n	80080e6 <_svfiprintf_r+0x17e>
 8008048:	b1b0      	cbz	r0, 8008078 <_svfiprintf_r+0x110>
 800804a:	9207      	str	r2, [sp, #28]
 800804c:	e014      	b.n	8008078 <_svfiprintf_r+0x110>
 800804e:	eba0 0308 	sub.w	r3, r0, r8
 8008052:	fa09 f303 	lsl.w	r3, r9, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	46a2      	mov	sl, r4
 800805c:	e7d2      	b.n	8008004 <_svfiprintf_r+0x9c>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	9103      	str	r1, [sp, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	bfbb      	ittet	lt
 800806a:	425b      	neglt	r3, r3
 800806c:	f042 0202 	orrlt.w	r2, r2, #2
 8008070:	9307      	strge	r3, [sp, #28]
 8008072:	9307      	strlt	r3, [sp, #28]
 8008074:	bfb8      	it	lt
 8008076:	9204      	strlt	r2, [sp, #16]
 8008078:	7823      	ldrb	r3, [r4, #0]
 800807a:	2b2e      	cmp	r3, #46	; 0x2e
 800807c:	d10c      	bne.n	8008098 <_svfiprintf_r+0x130>
 800807e:	7863      	ldrb	r3, [r4, #1]
 8008080:	2b2a      	cmp	r3, #42	; 0x2a
 8008082:	d135      	bne.n	80080f0 <_svfiprintf_r+0x188>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	9203      	str	r2, [sp, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	bfb8      	it	lt
 8008090:	f04f 33ff 	movlt.w	r3, #4294967295
 8008094:	3402      	adds	r4, #2
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008164 <_svfiprintf_r+0x1fc>
 800809c:	7821      	ldrb	r1, [r4, #0]
 800809e:	2203      	movs	r2, #3
 80080a0:	4650      	mov	r0, sl
 80080a2:	f7f8 f8b5 	bl	8000210 <memchr>
 80080a6:	b140      	cbz	r0, 80080ba <_svfiprintf_r+0x152>
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	eba0 000a 	sub.w	r0, r0, sl
 80080ae:	fa03 f000 	lsl.w	r0, r3, r0
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	4303      	orrs	r3, r0
 80080b6:	3401      	adds	r4, #1
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080be:	4826      	ldr	r0, [pc, #152]	; (8008158 <_svfiprintf_r+0x1f0>)
 80080c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c4:	2206      	movs	r2, #6
 80080c6:	f7f8 f8a3 	bl	8000210 <memchr>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d038      	beq.n	8008140 <_svfiprintf_r+0x1d8>
 80080ce:	4b23      	ldr	r3, [pc, #140]	; (800815c <_svfiprintf_r+0x1f4>)
 80080d0:	bb1b      	cbnz	r3, 800811a <_svfiprintf_r+0x1b2>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	3307      	adds	r3, #7
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	3308      	adds	r3, #8
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	4433      	add	r3, r6
 80080e2:	9309      	str	r3, [sp, #36]	; 0x24
 80080e4:	e767      	b.n	8007fb6 <_svfiprintf_r+0x4e>
 80080e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ea:	460c      	mov	r4, r1
 80080ec:	2001      	movs	r0, #1
 80080ee:	e7a5      	b.n	800803c <_svfiprintf_r+0xd4>
 80080f0:	2300      	movs	r3, #0
 80080f2:	3401      	adds	r4, #1
 80080f4:	9305      	str	r3, [sp, #20]
 80080f6:	4619      	mov	r1, r3
 80080f8:	f04f 0c0a 	mov.w	ip, #10
 80080fc:	4620      	mov	r0, r4
 80080fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008102:	3a30      	subs	r2, #48	; 0x30
 8008104:	2a09      	cmp	r2, #9
 8008106:	d903      	bls.n	8008110 <_svfiprintf_r+0x1a8>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0c5      	beq.n	8008098 <_svfiprintf_r+0x130>
 800810c:	9105      	str	r1, [sp, #20]
 800810e:	e7c3      	b.n	8008098 <_svfiprintf_r+0x130>
 8008110:	fb0c 2101 	mla	r1, ip, r1, r2
 8008114:	4604      	mov	r4, r0
 8008116:	2301      	movs	r3, #1
 8008118:	e7f0      	b.n	80080fc <_svfiprintf_r+0x194>
 800811a:	ab03      	add	r3, sp, #12
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	462a      	mov	r2, r5
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <_svfiprintf_r+0x1f8>)
 8008122:	a904      	add	r1, sp, #16
 8008124:	4638      	mov	r0, r7
 8008126:	f3af 8000 	nop.w
 800812a:	1c42      	adds	r2, r0, #1
 800812c:	4606      	mov	r6, r0
 800812e:	d1d6      	bne.n	80080de <_svfiprintf_r+0x176>
 8008130:	89ab      	ldrh	r3, [r5, #12]
 8008132:	065b      	lsls	r3, r3, #25
 8008134:	f53f af2c 	bmi.w	8007f90 <_svfiprintf_r+0x28>
 8008138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800813a:	b01d      	add	sp, #116	; 0x74
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	462a      	mov	r2, r5
 8008146:	4b06      	ldr	r3, [pc, #24]	; (8008160 <_svfiprintf_r+0x1f8>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	4638      	mov	r0, r7
 800814c:	f000 f9d4 	bl	80084f8 <_printf_i>
 8008150:	e7eb      	b.n	800812a <_svfiprintf_r+0x1c2>
 8008152:	bf00      	nop
 8008154:	08008c99 	.word	0x08008c99
 8008158:	08008ca3 	.word	0x08008ca3
 800815c:	00000000 	.word	0x00000000
 8008160:	08007eb1 	.word	0x08007eb1
 8008164:	08008c9f 	.word	0x08008c9f

08008168 <__sfputc_r>:
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	b410      	push	{r4}
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	da08      	bge.n	8008186 <__sfputc_r+0x1e>
 8008174:	6994      	ldr	r4, [r2, #24]
 8008176:	42a3      	cmp	r3, r4
 8008178:	db01      	blt.n	800817e <__sfputc_r+0x16>
 800817a:	290a      	cmp	r1, #10
 800817c:	d103      	bne.n	8008186 <__sfputc_r+0x1e>
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	f7ff bc21 	b.w	80079c8 <__swbuf_r>
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	1c58      	adds	r0, r3, #1
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	7019      	strb	r1, [r3, #0]
 800818e:	4608      	mov	r0, r1
 8008190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008194:	4770      	bx	lr

08008196 <__sfputs_r>:
 8008196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4614      	mov	r4, r2
 800819e:	18d5      	adds	r5, r2, r3
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	d101      	bne.n	80081a8 <__sfputs_r+0x12>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e007      	b.n	80081b8 <__sfputs_r+0x22>
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	463a      	mov	r2, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffda 	bl	8008168 <__sfputc_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1f3      	bne.n	80081a0 <__sfputs_r+0xa>
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081bc <_vfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	b09d      	sub	sp, #116	; 0x74
 80081c4:	4614      	mov	r4, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	4606      	mov	r6, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_vfiprintf_r+0x18>
 80081cc:	6983      	ldr	r3, [r0, #24]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x18>
 80081d0:	f7ff f87e 	bl	80072d0 <__sinit>
 80081d4:	4b89      	ldr	r3, [pc, #548]	; (80083fc <_vfiprintf_r+0x240>)
 80081d6:	429d      	cmp	r5, r3
 80081d8:	d11b      	bne.n	8008212 <_vfiprintf_r+0x56>
 80081da:	6875      	ldr	r5, [r6, #4]
 80081dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081de:	07d9      	lsls	r1, r3, #31
 80081e0:	d405      	bmi.n	80081ee <_vfiprintf_r+0x32>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	059a      	lsls	r2, r3, #22
 80081e6:	d402      	bmi.n	80081ee <_vfiprintf_r+0x32>
 80081e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ea:	f7ff f934 	bl	8007456 <__retarget_lock_acquire_recursive>
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	071b      	lsls	r3, r3, #28
 80081f2:	d501      	bpl.n	80081f8 <_vfiprintf_r+0x3c>
 80081f4:	692b      	ldr	r3, [r5, #16]
 80081f6:	b9eb      	cbnz	r3, 8008234 <_vfiprintf_r+0x78>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff fc48 	bl	8007a90 <__swsetup_r>
 8008200:	b1c0      	cbz	r0, 8008234 <_vfiprintf_r+0x78>
 8008202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008204:	07dc      	lsls	r4, r3, #31
 8008206:	d50e      	bpl.n	8008226 <_vfiprintf_r+0x6a>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	b01d      	add	sp, #116	; 0x74
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	4b7b      	ldr	r3, [pc, #492]	; (8008400 <_vfiprintf_r+0x244>)
 8008214:	429d      	cmp	r5, r3
 8008216:	d101      	bne.n	800821c <_vfiprintf_r+0x60>
 8008218:	68b5      	ldr	r5, [r6, #8]
 800821a:	e7df      	b.n	80081dc <_vfiprintf_r+0x20>
 800821c:	4b79      	ldr	r3, [pc, #484]	; (8008404 <_vfiprintf_r+0x248>)
 800821e:	429d      	cmp	r5, r3
 8008220:	bf08      	it	eq
 8008222:	68f5      	ldreq	r5, [r6, #12]
 8008224:	e7da      	b.n	80081dc <_vfiprintf_r+0x20>
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	0598      	lsls	r0, r3, #22
 800822a:	d4ed      	bmi.n	8008208 <_vfiprintf_r+0x4c>
 800822c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800822e:	f7ff f913 	bl	8007458 <__retarget_lock_release_recursive>
 8008232:	e7e9      	b.n	8008208 <_vfiprintf_r+0x4c>
 8008234:	2300      	movs	r3, #0
 8008236:	9309      	str	r3, [sp, #36]	; 0x24
 8008238:	2320      	movs	r3, #32
 800823a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800823e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008242:	2330      	movs	r3, #48	; 0x30
 8008244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008408 <_vfiprintf_r+0x24c>
 8008248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800824c:	f04f 0901 	mov.w	r9, #1
 8008250:	4623      	mov	r3, r4
 8008252:	469a      	mov	sl, r3
 8008254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008258:	b10a      	cbz	r2, 800825e <_vfiprintf_r+0xa2>
 800825a:	2a25      	cmp	r2, #37	; 0x25
 800825c:	d1f9      	bne.n	8008252 <_vfiprintf_r+0x96>
 800825e:	ebba 0b04 	subs.w	fp, sl, r4
 8008262:	d00b      	beq.n	800827c <_vfiprintf_r+0xc0>
 8008264:	465b      	mov	r3, fp
 8008266:	4622      	mov	r2, r4
 8008268:	4629      	mov	r1, r5
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ff93 	bl	8008196 <__sfputs_r>
 8008270:	3001      	adds	r0, #1
 8008272:	f000 80aa 	beq.w	80083ca <_vfiprintf_r+0x20e>
 8008276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008278:	445a      	add	r2, fp
 800827a:	9209      	str	r2, [sp, #36]	; 0x24
 800827c:	f89a 3000 	ldrb.w	r3, [sl]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80a2 	beq.w	80083ca <_vfiprintf_r+0x20e>
 8008286:	2300      	movs	r3, #0
 8008288:	f04f 32ff 	mov.w	r2, #4294967295
 800828c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008290:	f10a 0a01 	add.w	sl, sl, #1
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800829c:	931a      	str	r3, [sp, #104]	; 0x68
 800829e:	4654      	mov	r4, sl
 80082a0:	2205      	movs	r2, #5
 80082a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a6:	4858      	ldr	r0, [pc, #352]	; (8008408 <_vfiprintf_r+0x24c>)
 80082a8:	f7f7 ffb2 	bl	8000210 <memchr>
 80082ac:	9a04      	ldr	r2, [sp, #16]
 80082ae:	b9d8      	cbnz	r0, 80082e8 <_vfiprintf_r+0x12c>
 80082b0:	06d1      	lsls	r1, r2, #27
 80082b2:	bf44      	itt	mi
 80082b4:	2320      	movmi	r3, #32
 80082b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ba:	0713      	lsls	r3, r2, #28
 80082bc:	bf44      	itt	mi
 80082be:	232b      	movmi	r3, #43	; 0x2b
 80082c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ca:	d015      	beq.n	80082f8 <_vfiprintf_r+0x13c>
 80082cc:	9a07      	ldr	r2, [sp, #28]
 80082ce:	4654      	mov	r4, sl
 80082d0:	2000      	movs	r0, #0
 80082d2:	f04f 0c0a 	mov.w	ip, #10
 80082d6:	4621      	mov	r1, r4
 80082d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082dc:	3b30      	subs	r3, #48	; 0x30
 80082de:	2b09      	cmp	r3, #9
 80082e0:	d94e      	bls.n	8008380 <_vfiprintf_r+0x1c4>
 80082e2:	b1b0      	cbz	r0, 8008312 <_vfiprintf_r+0x156>
 80082e4:	9207      	str	r2, [sp, #28]
 80082e6:	e014      	b.n	8008312 <_vfiprintf_r+0x156>
 80082e8:	eba0 0308 	sub.w	r3, r0, r8
 80082ec:	fa09 f303 	lsl.w	r3, r9, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	46a2      	mov	sl, r4
 80082f6:	e7d2      	b.n	800829e <_vfiprintf_r+0xe2>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	1d19      	adds	r1, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	9103      	str	r1, [sp, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	bfbb      	ittet	lt
 8008304:	425b      	neglt	r3, r3
 8008306:	f042 0202 	orrlt.w	r2, r2, #2
 800830a:	9307      	strge	r3, [sp, #28]
 800830c:	9307      	strlt	r3, [sp, #28]
 800830e:	bfb8      	it	lt
 8008310:	9204      	strlt	r2, [sp, #16]
 8008312:	7823      	ldrb	r3, [r4, #0]
 8008314:	2b2e      	cmp	r3, #46	; 0x2e
 8008316:	d10c      	bne.n	8008332 <_vfiprintf_r+0x176>
 8008318:	7863      	ldrb	r3, [r4, #1]
 800831a:	2b2a      	cmp	r3, #42	; 0x2a
 800831c:	d135      	bne.n	800838a <_vfiprintf_r+0x1ce>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	1d1a      	adds	r2, r3, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	9203      	str	r2, [sp, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfb8      	it	lt
 800832a:	f04f 33ff 	movlt.w	r3, #4294967295
 800832e:	3402      	adds	r4, #2
 8008330:	9305      	str	r3, [sp, #20]
 8008332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008418 <_vfiprintf_r+0x25c>
 8008336:	7821      	ldrb	r1, [r4, #0]
 8008338:	2203      	movs	r2, #3
 800833a:	4650      	mov	r0, sl
 800833c:	f7f7 ff68 	bl	8000210 <memchr>
 8008340:	b140      	cbz	r0, 8008354 <_vfiprintf_r+0x198>
 8008342:	2340      	movs	r3, #64	; 0x40
 8008344:	eba0 000a 	sub.w	r0, r0, sl
 8008348:	fa03 f000 	lsl.w	r0, r3, r0
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	4303      	orrs	r3, r0
 8008350:	3401      	adds	r4, #1
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008358:	482c      	ldr	r0, [pc, #176]	; (800840c <_vfiprintf_r+0x250>)
 800835a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800835e:	2206      	movs	r2, #6
 8008360:	f7f7 ff56 	bl	8000210 <memchr>
 8008364:	2800      	cmp	r0, #0
 8008366:	d03f      	beq.n	80083e8 <_vfiprintf_r+0x22c>
 8008368:	4b29      	ldr	r3, [pc, #164]	; (8008410 <_vfiprintf_r+0x254>)
 800836a:	bb1b      	cbnz	r3, 80083b4 <_vfiprintf_r+0x1f8>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	3307      	adds	r3, #7
 8008370:	f023 0307 	bic.w	r3, r3, #7
 8008374:	3308      	adds	r3, #8
 8008376:	9303      	str	r3, [sp, #12]
 8008378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837a:	443b      	add	r3, r7
 800837c:	9309      	str	r3, [sp, #36]	; 0x24
 800837e:	e767      	b.n	8008250 <_vfiprintf_r+0x94>
 8008380:	fb0c 3202 	mla	r2, ip, r2, r3
 8008384:	460c      	mov	r4, r1
 8008386:	2001      	movs	r0, #1
 8008388:	e7a5      	b.n	80082d6 <_vfiprintf_r+0x11a>
 800838a:	2300      	movs	r3, #0
 800838c:	3401      	adds	r4, #1
 800838e:	9305      	str	r3, [sp, #20]
 8008390:	4619      	mov	r1, r3
 8008392:	f04f 0c0a 	mov.w	ip, #10
 8008396:	4620      	mov	r0, r4
 8008398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800839c:	3a30      	subs	r2, #48	; 0x30
 800839e:	2a09      	cmp	r2, #9
 80083a0:	d903      	bls.n	80083aa <_vfiprintf_r+0x1ee>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c5      	beq.n	8008332 <_vfiprintf_r+0x176>
 80083a6:	9105      	str	r1, [sp, #20]
 80083a8:	e7c3      	b.n	8008332 <_vfiprintf_r+0x176>
 80083aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ae:	4604      	mov	r4, r0
 80083b0:	2301      	movs	r3, #1
 80083b2:	e7f0      	b.n	8008396 <_vfiprintf_r+0x1da>
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <_vfiprintf_r+0x258>)
 80083bc:	a904      	add	r1, sp, #16
 80083be:	4630      	mov	r0, r6
 80083c0:	f3af 8000 	nop.w
 80083c4:	4607      	mov	r7, r0
 80083c6:	1c78      	adds	r0, r7, #1
 80083c8:	d1d6      	bne.n	8008378 <_vfiprintf_r+0x1bc>
 80083ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083cc:	07d9      	lsls	r1, r3, #31
 80083ce:	d405      	bmi.n	80083dc <_vfiprintf_r+0x220>
 80083d0:	89ab      	ldrh	r3, [r5, #12]
 80083d2:	059a      	lsls	r2, r3, #22
 80083d4:	d402      	bmi.n	80083dc <_vfiprintf_r+0x220>
 80083d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083d8:	f7ff f83e 	bl	8007458 <__retarget_lock_release_recursive>
 80083dc:	89ab      	ldrh	r3, [r5, #12]
 80083de:	065b      	lsls	r3, r3, #25
 80083e0:	f53f af12 	bmi.w	8008208 <_vfiprintf_r+0x4c>
 80083e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e6:	e711      	b.n	800820c <_vfiprintf_r+0x50>
 80083e8:	ab03      	add	r3, sp, #12
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	462a      	mov	r2, r5
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <_vfiprintf_r+0x258>)
 80083f0:	a904      	add	r1, sp, #16
 80083f2:	4630      	mov	r0, r6
 80083f4:	f000 f880 	bl	80084f8 <_printf_i>
 80083f8:	e7e4      	b.n	80083c4 <_vfiprintf_r+0x208>
 80083fa:	bf00      	nop
 80083fc:	08008b54 	.word	0x08008b54
 8008400:	08008b74 	.word	0x08008b74
 8008404:	08008b34 	.word	0x08008b34
 8008408:	08008c99 	.word	0x08008c99
 800840c:	08008ca3 	.word	0x08008ca3
 8008410:	00000000 	.word	0x00000000
 8008414:	08008197 	.word	0x08008197
 8008418:	08008c9f 	.word	0x08008c9f

0800841c <_printf_common>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	4616      	mov	r6, r2
 8008422:	4699      	mov	r9, r3
 8008424:	688a      	ldr	r2, [r1, #8]
 8008426:	690b      	ldr	r3, [r1, #16]
 8008428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800842c:	4293      	cmp	r3, r2
 800842e:	bfb8      	it	lt
 8008430:	4613      	movlt	r3, r2
 8008432:	6033      	str	r3, [r6, #0]
 8008434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008438:	4607      	mov	r7, r0
 800843a:	460c      	mov	r4, r1
 800843c:	b10a      	cbz	r2, 8008442 <_printf_common+0x26>
 800843e:	3301      	adds	r3, #1
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	0699      	lsls	r1, r3, #26
 8008446:	bf42      	ittt	mi
 8008448:	6833      	ldrmi	r3, [r6, #0]
 800844a:	3302      	addmi	r3, #2
 800844c:	6033      	strmi	r3, [r6, #0]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	f015 0506 	ands.w	r5, r5, #6
 8008454:	d106      	bne.n	8008464 <_printf_common+0x48>
 8008456:	f104 0a19 	add.w	sl, r4, #25
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	6832      	ldr	r2, [r6, #0]
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	42ab      	cmp	r3, r5
 8008462:	dc26      	bgt.n	80084b2 <_printf_common+0x96>
 8008464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008468:	1e13      	subs	r3, r2, #0
 800846a:	6822      	ldr	r2, [r4, #0]
 800846c:	bf18      	it	ne
 800846e:	2301      	movne	r3, #1
 8008470:	0692      	lsls	r2, r2, #26
 8008472:	d42b      	bmi.n	80084cc <_printf_common+0xb0>
 8008474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008478:	4649      	mov	r1, r9
 800847a:	4638      	mov	r0, r7
 800847c:	47c0      	blx	r8
 800847e:	3001      	adds	r0, #1
 8008480:	d01e      	beq.n	80084c0 <_printf_common+0xa4>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	68e5      	ldr	r5, [r4, #12]
 8008486:	6832      	ldr	r2, [r6, #0]
 8008488:	f003 0306 	and.w	r3, r3, #6
 800848c:	2b04      	cmp	r3, #4
 800848e:	bf08      	it	eq
 8008490:	1aad      	subeq	r5, r5, r2
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	bf0c      	ite	eq
 8008498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800849c:	2500      	movne	r5, #0
 800849e:	4293      	cmp	r3, r2
 80084a0:	bfc4      	itt	gt
 80084a2:	1a9b      	subgt	r3, r3, r2
 80084a4:	18ed      	addgt	r5, r5, r3
 80084a6:	2600      	movs	r6, #0
 80084a8:	341a      	adds	r4, #26
 80084aa:	42b5      	cmp	r5, r6
 80084ac:	d11a      	bne.n	80084e4 <_printf_common+0xc8>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e008      	b.n	80084c4 <_printf_common+0xa8>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4652      	mov	r2, sl
 80084b6:	4649      	mov	r1, r9
 80084b8:	4638      	mov	r0, r7
 80084ba:	47c0      	blx	r8
 80084bc:	3001      	adds	r0, #1
 80084be:	d103      	bne.n	80084c8 <_printf_common+0xac>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	3501      	adds	r5, #1
 80084ca:	e7c6      	b.n	800845a <_printf_common+0x3e>
 80084cc:	18e1      	adds	r1, r4, r3
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	2030      	movs	r0, #48	; 0x30
 80084d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084d6:	4422      	add	r2, r4
 80084d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084e0:	3302      	adds	r3, #2
 80084e2:	e7c7      	b.n	8008474 <_printf_common+0x58>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4622      	mov	r2, r4
 80084e8:	4649      	mov	r1, r9
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0e6      	beq.n	80084c0 <_printf_common+0xa4>
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7d9      	b.n	80084aa <_printf_common+0x8e>
	...

080084f8 <_printf_i>:
 80084f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	7e0f      	ldrb	r7, [r1, #24]
 80084fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008500:	2f78      	cmp	r7, #120	; 0x78
 8008502:	4691      	mov	r9, r2
 8008504:	4680      	mov	r8, r0
 8008506:	460c      	mov	r4, r1
 8008508:	469a      	mov	sl, r3
 800850a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800850e:	d807      	bhi.n	8008520 <_printf_i+0x28>
 8008510:	2f62      	cmp	r7, #98	; 0x62
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x32>
 8008514:	2f00      	cmp	r7, #0
 8008516:	f000 80d8 	beq.w	80086ca <_printf_i+0x1d2>
 800851a:	2f58      	cmp	r7, #88	; 0x58
 800851c:	f000 80a3 	beq.w	8008666 <_printf_i+0x16e>
 8008520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008528:	e03a      	b.n	80085a0 <_printf_i+0xa8>
 800852a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800852e:	2b15      	cmp	r3, #21
 8008530:	d8f6      	bhi.n	8008520 <_printf_i+0x28>
 8008532:	a101      	add	r1, pc, #4	; (adr r1, 8008538 <_printf_i+0x40>)
 8008534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008538:	08008591 	.word	0x08008591
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008521 	.word	0x08008521
 8008544:	08008521 	.word	0x08008521
 8008548:	08008521 	.word	0x08008521
 800854c:	08008521 	.word	0x08008521
 8008550:	080085a5 	.word	0x080085a5
 8008554:	08008521 	.word	0x08008521
 8008558:	08008521 	.word	0x08008521
 800855c:	08008521 	.word	0x08008521
 8008560:	08008521 	.word	0x08008521
 8008564:	080086b1 	.word	0x080086b1
 8008568:	080085d5 	.word	0x080085d5
 800856c:	08008693 	.word	0x08008693
 8008570:	08008521 	.word	0x08008521
 8008574:	08008521 	.word	0x08008521
 8008578:	080086d3 	.word	0x080086d3
 800857c:	08008521 	.word	0x08008521
 8008580:	080085d5 	.word	0x080085d5
 8008584:	08008521 	.word	0x08008521
 8008588:	08008521 	.word	0x08008521
 800858c:	0800869b 	.word	0x0800869b
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	602a      	str	r2, [r5, #0]
 8008598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800859c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0a3      	b.n	80086ec <_printf_i+0x1f4>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	6829      	ldr	r1, [r5, #0]
 80085a8:	0606      	lsls	r6, r0, #24
 80085aa:	f101 0304 	add.w	r3, r1, #4
 80085ae:	d50a      	bpl.n	80085c6 <_printf_i+0xce>
 80085b0:	680e      	ldr	r6, [r1, #0]
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	da03      	bge.n	80085c0 <_printf_i+0xc8>
 80085b8:	232d      	movs	r3, #45	; 0x2d
 80085ba:	4276      	negs	r6, r6
 80085bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c0:	485e      	ldr	r0, [pc, #376]	; (800873c <_printf_i+0x244>)
 80085c2:	230a      	movs	r3, #10
 80085c4:	e019      	b.n	80085fa <_printf_i+0x102>
 80085c6:	680e      	ldr	r6, [r1, #0]
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085ce:	bf18      	it	ne
 80085d0:	b236      	sxthne	r6, r6
 80085d2:	e7ef      	b.n	80085b4 <_printf_i+0xbc>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	6820      	ldr	r0, [r4, #0]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	6029      	str	r1, [r5, #0]
 80085dc:	0601      	lsls	r1, r0, #24
 80085de:	d501      	bpl.n	80085e4 <_printf_i+0xec>
 80085e0:	681e      	ldr	r6, [r3, #0]
 80085e2:	e002      	b.n	80085ea <_printf_i+0xf2>
 80085e4:	0646      	lsls	r6, r0, #25
 80085e6:	d5fb      	bpl.n	80085e0 <_printf_i+0xe8>
 80085e8:	881e      	ldrh	r6, [r3, #0]
 80085ea:	4854      	ldr	r0, [pc, #336]	; (800873c <_printf_i+0x244>)
 80085ec:	2f6f      	cmp	r7, #111	; 0x6f
 80085ee:	bf0c      	ite	eq
 80085f0:	2308      	moveq	r3, #8
 80085f2:	230a      	movne	r3, #10
 80085f4:	2100      	movs	r1, #0
 80085f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085fa:	6865      	ldr	r5, [r4, #4]
 80085fc:	60a5      	str	r5, [r4, #8]
 80085fe:	2d00      	cmp	r5, #0
 8008600:	bfa2      	ittt	ge
 8008602:	6821      	ldrge	r1, [r4, #0]
 8008604:	f021 0104 	bicge.w	r1, r1, #4
 8008608:	6021      	strge	r1, [r4, #0]
 800860a:	b90e      	cbnz	r6, 8008610 <_printf_i+0x118>
 800860c:	2d00      	cmp	r5, #0
 800860e:	d04d      	beq.n	80086ac <_printf_i+0x1b4>
 8008610:	4615      	mov	r5, r2
 8008612:	fbb6 f1f3 	udiv	r1, r6, r3
 8008616:	fb03 6711 	mls	r7, r3, r1, r6
 800861a:	5dc7      	ldrb	r7, [r0, r7]
 800861c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008620:	4637      	mov	r7, r6
 8008622:	42bb      	cmp	r3, r7
 8008624:	460e      	mov	r6, r1
 8008626:	d9f4      	bls.n	8008612 <_printf_i+0x11a>
 8008628:	2b08      	cmp	r3, #8
 800862a:	d10b      	bne.n	8008644 <_printf_i+0x14c>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	07de      	lsls	r6, r3, #31
 8008630:	d508      	bpl.n	8008644 <_printf_i+0x14c>
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	6861      	ldr	r1, [r4, #4]
 8008636:	4299      	cmp	r1, r3
 8008638:	bfde      	ittt	le
 800863a:	2330      	movle	r3, #48	; 0x30
 800863c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008640:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008644:	1b52      	subs	r2, r2, r5
 8008646:	6122      	str	r2, [r4, #16]
 8008648:	f8cd a000 	str.w	sl, [sp]
 800864c:	464b      	mov	r3, r9
 800864e:	aa03      	add	r2, sp, #12
 8008650:	4621      	mov	r1, r4
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff fee2 	bl	800841c <_printf_common>
 8008658:	3001      	adds	r0, #1
 800865a:	d14c      	bne.n	80086f6 <_printf_i+0x1fe>
 800865c:	f04f 30ff 	mov.w	r0, #4294967295
 8008660:	b004      	add	sp, #16
 8008662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008666:	4835      	ldr	r0, [pc, #212]	; (800873c <_printf_i+0x244>)
 8008668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800866c:	6829      	ldr	r1, [r5, #0]
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	f851 6b04 	ldr.w	r6, [r1], #4
 8008674:	6029      	str	r1, [r5, #0]
 8008676:	061d      	lsls	r5, r3, #24
 8008678:	d514      	bpl.n	80086a4 <_printf_i+0x1ac>
 800867a:	07df      	lsls	r7, r3, #31
 800867c:	bf44      	itt	mi
 800867e:	f043 0320 	orrmi.w	r3, r3, #32
 8008682:	6023      	strmi	r3, [r4, #0]
 8008684:	b91e      	cbnz	r6, 800868e <_printf_i+0x196>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	f023 0320 	bic.w	r3, r3, #32
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	2310      	movs	r3, #16
 8008690:	e7b0      	b.n	80085f4 <_printf_i+0xfc>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	f043 0320 	orr.w	r3, r3, #32
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	2378      	movs	r3, #120	; 0x78
 800869c:	4828      	ldr	r0, [pc, #160]	; (8008740 <_printf_i+0x248>)
 800869e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086a2:	e7e3      	b.n	800866c <_printf_i+0x174>
 80086a4:	0659      	lsls	r1, r3, #25
 80086a6:	bf48      	it	mi
 80086a8:	b2b6      	uxthmi	r6, r6
 80086aa:	e7e6      	b.n	800867a <_printf_i+0x182>
 80086ac:	4615      	mov	r5, r2
 80086ae:	e7bb      	b.n	8008628 <_printf_i+0x130>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	6826      	ldr	r6, [r4, #0]
 80086b4:	6961      	ldr	r1, [r4, #20]
 80086b6:	1d18      	adds	r0, r3, #4
 80086b8:	6028      	str	r0, [r5, #0]
 80086ba:	0635      	lsls	r5, r6, #24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	d501      	bpl.n	80086c4 <_printf_i+0x1cc>
 80086c0:	6019      	str	r1, [r3, #0]
 80086c2:	e002      	b.n	80086ca <_printf_i+0x1d2>
 80086c4:	0670      	lsls	r0, r6, #25
 80086c6:	d5fb      	bpl.n	80086c0 <_printf_i+0x1c8>
 80086c8:	8019      	strh	r1, [r3, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	4615      	mov	r5, r2
 80086d0:	e7ba      	b.n	8008648 <_printf_i+0x150>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	1d1a      	adds	r2, r3, #4
 80086d6:	602a      	str	r2, [r5, #0]
 80086d8:	681d      	ldr	r5, [r3, #0]
 80086da:	6862      	ldr	r2, [r4, #4]
 80086dc:	2100      	movs	r1, #0
 80086de:	4628      	mov	r0, r5
 80086e0:	f7f7 fd96 	bl	8000210 <memchr>
 80086e4:	b108      	cbz	r0, 80086ea <_printf_i+0x1f2>
 80086e6:	1b40      	subs	r0, r0, r5
 80086e8:	6060      	str	r0, [r4, #4]
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	2300      	movs	r3, #0
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f4:	e7a8      	b.n	8008648 <_printf_i+0x150>
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	462a      	mov	r2, r5
 80086fa:	4649      	mov	r1, r9
 80086fc:	4640      	mov	r0, r8
 80086fe:	47d0      	blx	sl
 8008700:	3001      	adds	r0, #1
 8008702:	d0ab      	beq.n	800865c <_printf_i+0x164>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	079b      	lsls	r3, r3, #30
 8008708:	d413      	bmi.n	8008732 <_printf_i+0x23a>
 800870a:	68e0      	ldr	r0, [r4, #12]
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	4298      	cmp	r0, r3
 8008710:	bfb8      	it	lt
 8008712:	4618      	movlt	r0, r3
 8008714:	e7a4      	b.n	8008660 <_printf_i+0x168>
 8008716:	2301      	movs	r3, #1
 8008718:	4632      	mov	r2, r6
 800871a:	4649      	mov	r1, r9
 800871c:	4640      	mov	r0, r8
 800871e:	47d0      	blx	sl
 8008720:	3001      	adds	r0, #1
 8008722:	d09b      	beq.n	800865c <_printf_i+0x164>
 8008724:	3501      	adds	r5, #1
 8008726:	68e3      	ldr	r3, [r4, #12]
 8008728:	9903      	ldr	r1, [sp, #12]
 800872a:	1a5b      	subs	r3, r3, r1
 800872c:	42ab      	cmp	r3, r5
 800872e:	dcf2      	bgt.n	8008716 <_printf_i+0x21e>
 8008730:	e7eb      	b.n	800870a <_printf_i+0x212>
 8008732:	2500      	movs	r5, #0
 8008734:	f104 0619 	add.w	r6, r4, #25
 8008738:	e7f5      	b.n	8008726 <_printf_i+0x22e>
 800873a:	bf00      	nop
 800873c:	08008caa 	.word	0x08008caa
 8008740:	08008cbb 	.word	0x08008cbb

08008744 <_read_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	; (8008764 <_read_r+0x20>)
 8008748:	4604      	mov	r4, r0
 800874a:	4608      	mov	r0, r1
 800874c:	4611      	mov	r1, r2
 800874e:	2200      	movs	r2, #0
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	f7f9 f8a6 	bl	80018a4 <_read>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_read_r+0x1e>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_read_r+0x1e>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	200047a0 	.word	0x200047a0

08008768 <_fstat_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_fstat_r+0x20>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f7f9 f8da 	bl	800192e <_fstat>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d102      	bne.n	8008784 <_fstat_r+0x1c>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b103      	cbz	r3, 8008784 <_fstat_r+0x1c>
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd38      	pop	{r3, r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	200047a0 	.word	0x200047a0

0800878c <_isatty_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_isatty_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f9 f8d9 	bl	800194e <_isatty>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_isatty_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_isatty_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	200047a0 	.word	0x200047a0

080087ac <memmove>:
 80087ac:	4288      	cmp	r0, r1
 80087ae:	b510      	push	{r4, lr}
 80087b0:	eb01 0402 	add.w	r4, r1, r2
 80087b4:	d902      	bls.n	80087bc <memmove+0x10>
 80087b6:	4284      	cmp	r4, r0
 80087b8:	4623      	mov	r3, r4
 80087ba:	d807      	bhi.n	80087cc <memmove+0x20>
 80087bc:	1e43      	subs	r3, r0, #1
 80087be:	42a1      	cmp	r1, r4
 80087c0:	d008      	beq.n	80087d4 <memmove+0x28>
 80087c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ca:	e7f8      	b.n	80087be <memmove+0x12>
 80087cc:	4402      	add	r2, r0
 80087ce:	4601      	mov	r1, r0
 80087d0:	428a      	cmp	r2, r1
 80087d2:	d100      	bne.n	80087d6 <memmove+0x2a>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087de:	e7f7      	b.n	80087d0 <memmove+0x24>

080087e0 <_realloc_r>:
 80087e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e4:	4680      	mov	r8, r0
 80087e6:	4614      	mov	r4, r2
 80087e8:	460e      	mov	r6, r1
 80087ea:	b921      	cbnz	r1, 80087f6 <_realloc_r+0x16>
 80087ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	4611      	mov	r1, r2
 80087f2:	f7fe be69 	b.w	80074c8 <_malloc_r>
 80087f6:	b92a      	cbnz	r2, 8008804 <_realloc_r+0x24>
 80087f8:	f7ff fb0e 	bl	8007e18 <_free_r>
 80087fc:	4625      	mov	r5, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	f000 f81b 	bl	800883e <_malloc_usable_size_r>
 8008808:	4284      	cmp	r4, r0
 800880a:	4607      	mov	r7, r0
 800880c:	d802      	bhi.n	8008814 <_realloc_r+0x34>
 800880e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008812:	d812      	bhi.n	800883a <_realloc_r+0x5a>
 8008814:	4621      	mov	r1, r4
 8008816:	4640      	mov	r0, r8
 8008818:	f7fe fe56 	bl	80074c8 <_malloc_r>
 800881c:	4605      	mov	r5, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d0ed      	beq.n	80087fe <_realloc_r+0x1e>
 8008822:	42bc      	cmp	r4, r7
 8008824:	4622      	mov	r2, r4
 8008826:	4631      	mov	r1, r6
 8008828:	bf28      	it	cs
 800882a:	463a      	movcs	r2, r7
 800882c:	f7fe fe15 	bl	800745a <memcpy>
 8008830:	4631      	mov	r1, r6
 8008832:	4640      	mov	r0, r8
 8008834:	f7ff faf0 	bl	8007e18 <_free_r>
 8008838:	e7e1      	b.n	80087fe <_realloc_r+0x1e>
 800883a:	4635      	mov	r5, r6
 800883c:	e7df      	b.n	80087fe <_realloc_r+0x1e>

0800883e <_malloc_usable_size_r>:
 800883e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008842:	1f18      	subs	r0, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfbc      	itt	lt
 8008848:	580b      	ldrlt	r3, [r1, r0]
 800884a:	18c0      	addlt	r0, r0, r3
 800884c:	4770      	bx	lr
	...

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
