
Noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008860  08008860  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008868  08008868  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004628  20000078  080088e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046a0  080088e8  000246a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eb9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c22  00000000  00000000  00039f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a496  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ccc  00000000  00000000  0006a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc755  00000000  00000000  00084372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180ac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  00180b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800846c 	.word	0x0800846c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800846c 	.word	0x0800846c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <drv_uart1_receive>:


extern SemaphoreHandle_t semaphori;

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)(pData), size);
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	461a      	mov	r2, r3
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <drv_uart1_receive+0x38>)
 80005c8:	f003 faf7 	bl	8003bba <HAL_UART_Receive_IT>

	printf("Je vais Take semaphori\r\n");
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <drv_uart1_receive+0x3c>)
 80005ce:	f006 ffdd 	bl	800758c <puts>
	xSemaphoreTake(semaphori,portMAX_DELAY);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <drv_uart1_receive+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f04f 31ff 	mov.w	r1, #4294967295
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 ff8c 	bl	80054f8 <xQueueSemaphoreTake>
	{
		printf("Error Take semaphori\r\n");
	}

*/
	return 0;	// Life's too short for error management
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200008b8 	.word	0x200008b8
 80005f0:	08008484 	.word	0x08008484
 80005f4:	20000350 	.word	0x20000350

080005f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken;

	if (huart==&huart1){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <HAL_UART_RxCpltCallback+0x48>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d10c      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x2a>

		higher_priority_task_woken = pdFALSE;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
		printf("Je vais Give\r\n");
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_UART_RxCpltCallback+0x4c>)
 800060e:	f006 ffbd 	bl	800758c <puts>
		xSemaphoreGiveFromISR(semaphori,&higher_priority_task_woken);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_UART_RxCpltCallback+0x50>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fed6 	bl	80053ce <xQueueGiveFromISR>
			printf("Error j ai pas Give\r\n");
		}
		*/
	}

	portYIELD_FROM_ISR(higher_priority_task_woken);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d007      	beq.n	8000638 <HAL_UART_RxCpltCallback+0x40>
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_UART_RxCpltCallback+0x54>)
 800062a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	f3bf 8f6f 	isb	sy

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200008b8 	.word	0x200008b8
 8000644:	0800849c 	.word	0x0800849c
 8000648:	20000350 	.word	0x20000350
 800064c:	e000ed04 	.word	0xe000ed04

08000650 <drv_uart1_transmit>:
}
*/


uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 800065c:	887a      	ldrh	r2, [r7, #2]
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <drv_uart1_transmit+0x24>)
 8000666:	f003 fa25 	bl	8003ab4 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200008b8 	.word	0x200008b8

08000678 <fonction>:

extern int LED_DELAY;
extern TaskHandle_t xHandleLED;

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <fonction+0x40>)
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fffd 	bl	8007690 <sniprintf>
 8000696:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80006a4:	6979      	ldr	r1, [r7, #20]
 80006a6:	b289      	uxth	r1, r1
 80006a8:	4610      	mov	r0, r2
 80006aa:	4798      	blx	r3

	return 0;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	080084ac 	.word	0x080084ac

080006bc <addition>:


int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	if(argc !=3)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d016      	beq.n	80006fc <addition+0x40>
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument\r\n");
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <addition+0x9c>)
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 ffd8 	bl	8007690 <sniprintf>
 80006e0:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80006ee:	6939      	ldr	r1, [r7, #16]
 80006f0:	b289      	uxth	r1, r1
 80006f2:	4610      	mov	r0, r2
 80006f4:	4798      	blx	r3
		return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e028      	b.n	800074e <addition+0x92>
	}
	else
	{
		int a = atoi(argv[1]);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fd02 	bl	800710c <atoi>
 8000708:	61f8      	str	r0, [r7, #28]
		int b = atoi(argv[2]);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3308      	adds	r3, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fcfb 	bl	800710c <atoi>
 8000716:	61b8      	str	r0, [r7, #24]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n\r\n", a, b, a+b);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f503 7041 	add.w	r0, r3, #772	; 0x304
 800071e:	69fa      	ldr	r2, [r7, #28]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	4413      	add	r3, r2
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	4a0b      	ldr	r2, [pc, #44]	; (800075c <addition+0xa0>)
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	f006 ffad 	bl	8007690 <sniprintf>
 8000736:	6178      	str	r0, [r7, #20]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8000744:	6979      	ldr	r1, [r7, #20]
 8000746:	b289      	uxth	r1, r1
 8000748:	4610      	mov	r0, r2
 800074a:	4798      	blx	r3

	}
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	080084cc 	.word	0x080084cc
 800075c:	080084f8 	.word	0x080084f8

08000760 <led>:

int led(h_shell_t * h_shell, int argc, char ** argv)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	if(argc != 2)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d016      	beq.n	80007a0 <led+0x40>
		{
			int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument\r\n");
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <led+0x80>)
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	4618      	mov	r0, r3
 8000780:	f006 ff86 	bl	8007690 <sniprintf>
 8000784:	6178      	str	r0, [r7, #20]
			h_shell->drv.transmit(h_shell->print_buffer, size);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8000792:	6979      	ldr	r1, [r7, #20]
 8000794:	b289      	uxth	r1, r1
 8000796:	4610      	mov	r0, r2
 8000798:	4798      	blx	r3
			return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e01b      	b.n	80007d8 <led+0x78>
		}
	else
		{
			LED_DELAY = atoi(argv[1]);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 fcb0 	bl	800710c <atoi>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <led+0x84>)
 80007b0:	6013      	str	r3, [r2, #0]
			switch(LED_DELAY)
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <led+0x84>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d104      	bne.n	80007c4 <led+0x64>
			{
				case 0 :

					vTaskSuspend(xHandleLED);
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <led+0x88>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fa16 	bl	8005bf0 <vTaskSuspend>


				default :

					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4809      	ldr	r0, [pc, #36]	; (80007ec <led+0x8c>)
 80007c8:	f001 fd7f 	bl	80022ca <HAL_GPIO_TogglePin>
					vTaskDelay(LED_DELAY);
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <led+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 f9d7 	bl	8005b84 <vTaskDelay>

			}
		}

	return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080084cc 	.word	0x080084cc
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000354 	.word	0x20000354
 80007ec:	40022000 	.word	0x40022000

080007f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <vApplicationGetIdleTaskMemory+0x2c>)
 8000800:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <vApplicationGetIdleTaskMemory+0x30>)
 8000806:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000098 	.word	0x20000098
 8000820:	2000014c 	.word	0x2000014c

08000824 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_FREERTOS_Init+0x30>)
 800082c:	1d3c      	adds	r4, r7, #4
 800082e:	461d      	mov	r5, r3
 8000830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f004 fbe4 	bl	800500e <osThreadCreate>
 8000846:	4603      	mov	r3, r0
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <MX_FREERTOS_Init+0x34>)
 800084a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bdb0      	pop	{r4, r5, r7, pc}
 8000854:	08008518 	.word	0x08008518
 8000858:	20000094 	.word	0x20000094

0800085c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f004 fc1e 	bl	80050a6 <osDelay>
 800086a:	e7fb      	b.n	8000864 <StartDefaultTask+0x8>

0800086c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b090      	sub	sp, #64	; 0x40
 8000870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	4bad      	ldr	r3, [pc, #692]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4aac      	ldr	r2, [pc, #688]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4baa      	ldr	r3, [pc, #680]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
 8000898:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4ba7      	ldr	r3, [pc, #668]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4aa6      	ldr	r2, [pc, #664]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4ba4      	ldr	r3, [pc, #656]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4ba1      	ldr	r3, [pc, #644]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4aa0      	ldr	r2, [pc, #640]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b9e      	ldr	r3, [pc, #632]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
 80008c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b9b      	ldr	r3, [pc, #620]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a9a      	ldr	r2, [pc, #616]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b98      	ldr	r3, [pc, #608]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b95      	ldr	r3, [pc, #596]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a94      	ldr	r2, [pc, #592]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b92      	ldr	r3, [pc, #584]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b8f      	ldr	r3, [pc, #572]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a8e      	ldr	r2, [pc, #568]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b8c      	ldr	r3, [pc, #560]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000912:	4b89      	ldr	r3, [pc, #548]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a88      	ldr	r2, [pc, #544]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b86      	ldr	r3, [pc, #536]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800092a:	4b83      	ldr	r3, [pc, #524]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a82      	ldr	r2, [pc, #520]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b80      	ldr	r3, [pc, #512]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000942:	4b7d      	ldr	r3, [pc, #500]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a7c      	ldr	r2, [pc, #496]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b7a      	ldr	r3, [pc, #488]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b77      	ldr	r3, [pc, #476]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a76      	ldr	r2, [pc, #472]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b74      	ldr	r3, [pc, #464]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b71      	ldr	r3, [pc, #452]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a70      	ldr	r2, [pc, #448]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b6e      	ldr	r3, [pc, #440]	; (8000b38 <MX_GPIO_Init+0x2cc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2120      	movs	r1, #32
 800098e:	486b      	ldr	r0, [pc, #428]	; (8000b3c <MX_GPIO_Init+0x2d0>)
 8000990:	f001 fc82 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f241 014c 	movw	r1, #4172	; 0x104c
 800099a:	4869      	ldr	r0, [pc, #420]	; (8000b40 <MX_GPIO_Init+0x2d4>)
 800099c:	f001 fc7c 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2108      	movs	r1, #8
 80009a4:	4867      	ldr	r0, [pc, #412]	; (8000b44 <MX_GPIO_Init+0x2d8>)
 80009a6:	f001 fc77 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	4865      	ldr	r0, [pc, #404]	; (8000b48 <MX_GPIO_Init+0x2dc>)
 80009b2:	f001 fc71 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	21c8      	movs	r1, #200	; 0xc8
 80009ba:	4864      	ldr	r0, [pc, #400]	; (8000b4c <MX_GPIO_Init+0x2e0>)
 80009bc:	f001 fc6c 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80009c0:	2310      	movs	r3, #16
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009d0:	230e      	movs	r3, #14
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d8:	4619      	mov	r1, r3
 80009da:	485d      	ldr	r0, [pc, #372]	; (8000b50 <MX_GPIO_Init+0x2e4>)
 80009dc:	f001 fab0 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80009e0:	2308      	movs	r3, #8
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4857      	ldr	r0, [pc, #348]	; (8000b50 <MX_GPIO_Init+0x2e4>)
 80009f4:	f001 faa4 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80009f8:	2304      	movs	r3, #4
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	4619      	mov	r1, r3
 8000a12:	484f      	ldr	r0, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x2e4>)
 8000a14:	f001 fa94 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a18:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	4845      	ldr	r0, [pc, #276]	; (8000b4c <MX_GPIO_Init+0x2e0>)
 8000a36:	f001 fa83 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a3a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	483e      	ldr	r0, [pc, #248]	; (8000b50 <MX_GPIO_Init+0x2e4>)
 8000a58:	f001 fa72 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4836      	ldr	r0, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x2e8>)
 8000a7a:	f001 fa61 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000a7e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a90:	230a      	movs	r3, #10
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <MX_GPIO_Init+0x2e8>)
 8000a9c:	f001 fa50 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x2e8>)
 8000abc:	f001 fa40 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4818      	ldr	r0, [pc, #96]	; (8000b3c <MX_GPIO_Init+0x2d0>)
 8000adc:	f001 fa30 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000ae0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000af2:	230c      	movs	r3, #12
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000afe:	f001 fa1f 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b14:	2301      	movs	r3, #1
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480f      	ldr	r0, [pc, #60]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 8000b20:	f001 fa0e 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b34:	230d      	movs	r3, #13
 8000b36:	e013      	b.n	8000b60 <MX_GPIO_Init+0x2f4>
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40022000 	.word	0x40022000
 8000b44:	40022800 	.word	0x40022800
 8000b48:	40021c00 	.word	0x40021c00
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	48bc      	ldr	r0, [pc, #752]	; (8000e5c <MX_GPIO_Init+0x5f0>)
 8000b6a:	f001 f9e9 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	48b5      	ldr	r0, [pc, #724]	; (8000e60 <MX_GPIO_Init+0x5f4>)
 8000b8a:	f001 f9d9 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000b8e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	48ae      	ldr	r0, [pc, #696]	; (8000e64 <MX_GPIO_Init+0x5f8>)
 8000bac:	f001 f9c8 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000bb0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc2:	230e      	movs	r3, #14
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	48a6      	ldr	r0, [pc, #664]	; (8000e68 <MX_GPIO_Init+0x5fc>)
 8000bce:	f001 f9b7 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be4:	4619      	mov	r1, r3
 8000be6:	48a0      	ldr	r0, [pc, #640]	; (8000e68 <MX_GPIO_Init+0x5fc>)
 8000be8:	f001 f9aa 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	489a      	ldr	r0, [pc, #616]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000c02:	f001 f99d 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	4892      	ldr	r0, [pc, #584]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000c24:	f001 f98c 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	488a      	ldr	r0, [pc, #552]	; (8000e70 <MX_GPIO_Init+0x604>)
 8000c46:	f001 f97b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin;
 8000c4a:	23b0      	movs	r3, #176	; 0xb0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4883      	ldr	r0, [pc, #524]	; (8000e74 <MX_GPIO_Init+0x608>)
 8000c66:	f001 f96b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000c6a:	23f7      	movs	r3, #247	; 0xf7
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c7a:	230e      	movs	r3, #14
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	487c      	ldr	r0, [pc, #496]	; (8000e78 <MX_GPIO_Init+0x60c>)
 8000c86:	f001 f95b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	486f      	ldr	r0, [pc, #444]	; (8000e64 <MX_GPIO_Init+0x5f8>)
 8000ca8:	f001 f94a 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4866      	ldr	r0, [pc, #408]	; (8000e64 <MX_GPIO_Init+0x5f8>)
 8000cca:	f001 f939 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4861      	ldr	r0, [pc, #388]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000ce6:	f001 f92b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000cea:	2308      	movs	r3, #8
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfa:	230d      	movs	r3, #13
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4859      	ldr	r0, [pc, #356]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000d06:	f001 f91b 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000d0a:	f241 034c 	movw	r3, #4172	; 0x104c
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4854      	ldr	r0, [pc, #336]	; (8000e74 <MX_GPIO_Init+0x608>)
 8000d24:	f001 f90c 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	484f      	ldr	r0, [pc, #316]	; (8000e7c <MX_GPIO_Init+0x610>)
 8000d3e:	f001 f8ff 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000d42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d54:	230c      	movs	r3, #12
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4848      	ldr	r0, [pc, #288]	; (8000e80 <MX_GPIO_Init+0x614>)
 8000d60:	f001 f8ee 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000d64:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d76:	230e      	movs	r3, #14
 8000d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7e:	4619      	mov	r1, r3
 8000d80:	483c      	ldr	r0, [pc, #240]	; (8000e74 <MX_GPIO_Init+0x608>)
 8000d82:	f001 f8dd 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d86:	2308      	movs	r3, #8
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4836      	ldr	r0, [pc, #216]	; (8000e78 <MX_GPIO_Init+0x60c>)
 8000d9e:	f001 f8cf 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db4:	230d      	movs	r3, #13
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4829      	ldr	r0, [pc, #164]	; (8000e64 <MX_GPIO_Init+0x5f8>)
 8000dc0:	f001 f8be 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000dd8:	f001 f8b2 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000dec:	230c      	movs	r3, #12
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_GPIO_Init+0x600>)
 8000df8:	f001 f8a2 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000dfc:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481c      	ldr	r0, [pc, #112]	; (8000e84 <MX_GPIO_Init+0x618>)
 8000e12:	f001 f895 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e26:	2305      	movs	r3, #5
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <MX_GPIO_Init+0x608>)
 8000e32:	f001 f885 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_GPIO_Init+0x618>)
 8000e50:	f001 f876 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e54:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000e58:	e016      	b.n	8000e88 <MX_GPIO_Init+0x61c>
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40022400 	.word	0x40022400
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40022000 	.word	0x40022000
 8000e78:	40022800 	.word	0x40022800
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021c00 	.word	0x40021c00
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e96:	230d      	movs	r3, #13
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	48a5      	ldr	r0, [pc, #660]	; (8001138 <MX_GPIO_Init+0x8cc>)
 8000ea2:	f001 f84d 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	489e      	ldr	r0, [pc, #632]	; (800113c <MX_GPIO_Init+0x8d0>)
 8000ec2:	f001 f83d 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4897      	ldr	r0, [pc, #604]	; (8001140 <MX_GPIO_Init+0x8d4>)
 8000ee4:	f001 f82c 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	488f      	ldr	r0, [pc, #572]	; (800113c <MX_GPIO_Init+0x8d0>)
 8000f00:	f001 f81e 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000f04:	23c0      	movs	r3, #192	; 0xc0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f14:	2308      	movs	r3, #8
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4889      	ldr	r0, [pc, #548]	; (8001144 <MX_GPIO_Init+0x8d8>)
 8000f20:	f001 f80e 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f24:	2310      	movs	r3, #16
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f34:	230a      	movs	r3, #10
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	487e      	ldr	r0, [pc, #504]	; (8001138 <MX_GPIO_Init+0x8cc>)
 8000f40:	f000 fffe 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000f44:	2328      	movs	r3, #40	; 0x28
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f54:	230c      	movs	r3, #12
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4876      	ldr	r0, [pc, #472]	; (8001138 <MX_GPIO_Init+0x8cc>)
 8000f60:	f000 ffee 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000f64:	23c8      	movs	r3, #200	; 0xc8
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4873      	ldr	r0, [pc, #460]	; (8001148 <MX_GPIO_Init+0x8dc>)
 8000f7c:	f000 ffe0 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f80:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	486d      	ldr	r0, [pc, #436]	; (800114c <MX_GPIO_Init+0x8e0>)
 8000f96:	f000 ffd3 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000faa:	230c      	movs	r3, #12
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4863      	ldr	r0, [pc, #396]	; (8001144 <MX_GPIO_Init+0x8d8>)
 8000fb6:	f000 ffc3 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	485b      	ldr	r0, [pc, #364]	; (8001144 <MX_GPIO_Init+0x8d8>)
 8000fd6:	f000 ffb3 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fda:	2332      	movs	r3, #50	; 0x32
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fea:	230b      	movs	r3, #11
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4853      	ldr	r0, [pc, #332]	; (8001144 <MX_GPIO_Init+0x8d8>)
 8000ff6:	f000 ffa3 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800100a:	2309      	movs	r3, #9
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	484e      	ldr	r0, [pc, #312]	; (8001150 <MX_GPIO_Init+0x8e4>)
 8001016:	f000 ff93 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800101a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800102c:	2309      	movs	r3, #9
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	4847      	ldr	r0, [pc, #284]	; (8001154 <MX_GPIO_Init+0x8e8>)
 8001038:	f000 ff82 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800103c:	2304      	movs	r3, #4
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	483e      	ldr	r0, [pc, #248]	; (8001148 <MX_GPIO_Init+0x8dc>)
 8001050:	f000 ff76 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001054:	2386      	movs	r3, #134	; 0x86
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4834      	ldr	r0, [pc, #208]	; (8001140 <MX_GPIO_Init+0x8d4>)
 8001070:	f000 ff66 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001078:	2303      	movs	r3, #3
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	482e      	ldr	r0, [pc, #184]	; (8001140 <MX_GPIO_Init+0x8d4>)
 8001088:	f000 ff5a 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800108c:	2350      	movs	r3, #80	; 0x50
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800109c:	230d      	movs	r3, #13
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <MX_GPIO_Init+0x8d4>)
 80010a8:	f000 ff4a 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80010ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010be:	2304      	movs	r3, #4
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	481b      	ldr	r0, [pc, #108]	; (8001138 <MX_GPIO_Init+0x8cc>)
 80010ca:	f000 ff39 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010ce:	2328      	movs	r3, #40	; 0x28
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010de:	230a      	movs	r3, #10
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e6:	4619      	mov	r1, r3
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_GPIO_Init+0x8d4>)
 80010ea:	f000 ff29 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010fe:	2309      	movs	r3, #9
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0x8cc>)
 800110a:	f000 ff19 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800110e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001120:	2305      	movs	r3, #5
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	4619      	mov	r1, r3
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_GPIO_Init+0x8e4>)
 800112c:	f000 ff08 	bl	8001f40 <HAL_GPIO_Init>

}
 8001130:	bf00      	nop
 8001132:	3740      	adds	r7, #64	; 0x40
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40022000 	.word	0x40022000
 8001140:	40020000 	.word	0x40020000
 8001144:	40020800 	.word	0x40020800
 8001148:	40021800 	.word	0x40021800
 800114c:	40021400 	.word	0x40021400
 8001150:	40020400 	.word	0x40020400
 8001154:	40020c00 	.word	0x40020c00

08001158 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001160:	1d39      	adds	r1, r7, #4
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2201      	movs	r2, #1
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <__io_putchar+0x20>)
 800116a:	f002 fca3 	bl	8003ab4 <HAL_UART_Transmit>

	return ch;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200008b8 	.word	0x200008b8

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fd3c 	bl	8001bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f895 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f7ff fb6f 	bl	800086c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800118e:	f000 fc53 	bl	8001a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Init\r\n");
 8001192:	4832      	ldr	r0, [pc, #200]	; (800125c <main+0xe0>)
 8001194:	f006 f9fa 	bl	800758c <puts>
  semaphori = xSemaphoreCreateBinary();
 8001198:	2203      	movs	r2, #3
 800119a:	2100      	movs	r1, #0
 800119c:	2001      	movs	r0, #1
 800119e:	f004 f8b5 	bl	800530c <xQueueGenericCreate>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <main+0xe4>)
 80011a6:	6013      	str	r3, [r2, #0]


  xReturned = xTaskCreate(
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <main+0xe8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <main+0xec>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	2304      	movs	r3, #4
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011bc:	492b      	ldr	r1, [pc, #172]	; (800126c <main+0xf0>)
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <main+0xf4>)
 80011c0:	f004 fb91 	bl	80058e6 <xTaskCreate>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <main+0xf8>)
 80011c8:	6013      	str	r3, [r2, #0]
    		STACK_SIZE, /* Stack size in words, not bytes. */
    		(void *) LED_DELAY, /* Parameter passed into the task. */
    		LED_PRIORITY,/* Priority at which the task is created. */
    		&xHandleLED ); /* Used to pass out the created task's handle. */

  if(xReturned == pdTRUE)
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <main+0xf8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d103      	bne.n	80011da <main+0x5e>
  {
	  printf("Led task created \r\n");
 80011d2:	4829      	ldr	r0, [pc, #164]	; (8001278 <main+0xfc>)
 80011d4:	f006 f9da 	bl	800758c <puts>
 80011d8:	e002      	b.n	80011e0 <main+0x64>
  }
  else
  {
	  printf("Error Led task not created \r\n");
 80011da:	4828      	ldr	r0, [pc, #160]	; (800127c <main+0x100>)
 80011dc:	f006 f9d6 	bl	800758c <puts>
  }




  xReturned = xTaskCreate(
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <main+0x104>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2305      	movs	r3, #5
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <main+0x108>)
 80011ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ee:	4926      	ldr	r1, [pc, #152]	; (8001288 <main+0x10c>)
 80011f0:	4826      	ldr	r0, [pc, #152]	; (800128c <main+0x110>)
 80011f2:	f004 fb78 	bl	80058e6 <xTaskCreate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <main+0xf8>)
 80011fa:	6013      	str	r3, [r2, #0]
      		(void *) &h_shell, /* Parameter passed into the task. */
      		SHELL_PRIORITY,/* Priority at which the task is created. */
      		&xHandleSHELL ); /* Used to pass out the created task's handle. */


  if(xReturned == pdTRUE)
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <main+0xf8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d103      	bne.n	800120c <main+0x90>
  {
	  printf("Shell task created \r\n");
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <main+0x114>)
 8001206:	f006 f9c1 	bl	800758c <puts>
 800120a:	e002      	b.n	8001212 <main+0x96>
  }
  else
  {
	  printf("Error Shell task not created \r\n");
 800120c:	4821      	ldr	r0, [pc, #132]	; (8001294 <main+0x118>)
 800120e:	f006 f9bd 	bl	800758c <puts>
  }



  	h_shell.drv.receive = drv_uart1_receive;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <main+0x108>)
 8001214:	4a20      	ldr	r2, [pc, #128]	; (8001298 <main+0x11c>)
 8001216:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  	h_shell.drv.transmit = drv_uart1_transmit;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <main+0x108>)
 800121c:	4a1f      	ldr	r2, [pc, #124]	; (800129c <main+0x120>)
 800121e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	shell_init(&h_shell);
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <main+0x108>)
 8001224:	f000 f906 	bl	8001434 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <main+0x124>)
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <main+0x128>)
 800122c:	2166      	movs	r1, #102	; 0x66
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <main+0x108>)
 8001230:	f000 f944 	bl	80014bc <shell_add>
	shell_add(&h_shell, 'a', addition, "addition de deux entiers");
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <main+0x12c>)
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <main+0x130>)
 8001238:	2161      	movs	r1, #97	; 0x61
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <main+0x108>)
 800123c:	f000 f93e 	bl	80014bc <shell_add>
	shell_add(&h_shell, 'l', led, "faire clignoter la led a la frequence 1/p");
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <main+0x134>)
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <main+0xf4>)
 8001244:	216c      	movs	r1, #108	; 0x6c
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <main+0x108>)
 8001248:	f000 f938 	bl	80014bc <shell_add>

	vTaskStartScheduler();
 800124c:	f004 fd64 	bl	8005d18 <vTaskStartScheduler>

	//shell_run(&h_shell); <-- plus besoin car appelée a la creation de la task
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001250:	f7ff fae8 	bl	8000824 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001254:	f003 fed4 	bl	8005000 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001258:	e7fe      	b.n	8001258 <main+0xdc>
 800125a:	bf00      	nop
 800125c:	08008534 	.word	0x08008534
 8001260:	20000350 	.word	0x20000350
 8001264:	20000000 	.word	0x20000000
 8001268:	20000354 	.word	0x20000354
 800126c:	0800853c 	.word	0x0800853c
 8001270:	08000761 	.word	0x08000761
 8001274:	2000034c 	.word	0x2000034c
 8001278:	08008540 	.word	0x08008540
 800127c:	08008554 	.word	0x08008554
 8001280:	20000358 	.word	0x20000358
 8001284:	2000035c 	.word	0x2000035c
 8001288:	08008574 	.word	0x08008574
 800128c:	08001615 	.word	0x08001615
 8001290:	0800857c 	.word	0x0800857c
 8001294:	08008594 	.word	0x08008594
 8001298:	080005b5 	.word	0x080005b5
 800129c:	08000651 	.word	0x08000651
 80012a0:	080085b4 	.word	0x080085b4
 80012a4:	08000679 	.word	0x08000679
 80012a8:	080085cc 	.word	0x080085cc
 80012ac:	080006bd 	.word	0x080006bd
 80012b0:	080085e8 	.word	0x080085e8

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 f857 	bl	8007376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemClock_Config+0xc8>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <SystemClock_Config+0xc8>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemClock_Config+0xc8>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <SystemClock_Config+0xcc>)
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <SystemClock_Config+0xcc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	2310      	movs	r3, #16
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001320:	230a      	movs	r3, #10
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001324:	23d2      	movs	r3, #210	; 0xd2
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	2302      	movs	r3, #2
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4618      	mov	r0, r3
 8001336:	f000 ffe3 	bl	8002300 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001340:	f000 f832 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001344:	230f      	movs	r3, #15
 8001346:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001350:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2105      	movs	r1, #5
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fa70 	bl	8002848 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800136e:	f000 f81b 	bl	80013a8 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	; 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001396:	f000 fc3f 	bl	8001c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <sh_help>:
 */

#include "shell.h"


static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e02a      	b.n	800141c <sh_help+0x68>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f503 7041 	add.w	r0, r3, #772	; 0x304
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3304      	adds	r3, #4
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461c      	mov	r4, r3
 80013e0:	68f9      	ldr	r1, [r7, #12]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	330c      	adds	r3, #12
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4623      	mov	r3, r4
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <sh_help+0x7c>)
 80013f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fc:	f006 f948 	bl	8007690 <sniprintf>
 8001400:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	b289      	uxth	r1, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbcf      	blt.n	80013c6 <sh_help+0x12>
	}

	return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	08008614 	.word	0x08008614

08001434 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <shell_init+0x78>)
 800144e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001452:	4618      	mov	r0, r3
 8001454:	f006 f91c 	bl	8007690 <sniprintf>
 8001458:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	b289      	uxth	r1, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "TP (v0.2.2)\r\n");
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <shell_init+0x7c>)
 8001476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147a:	4618      	mov	r0, r3
 800147c:	f006 f908 	bl	8007690 <sniprintf>
 8001480:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800148e:	68f9      	ldr	r1, [r7, #12]
 8001490:	b289      	uxth	r1, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <shell_init+0x80>)
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <shell_init+0x84>)
 800149a:	2168      	movs	r1, #104	; 0x68
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f80d 	bl	80014bc <shell_add>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08008620 	.word	0x08008620
 80014b0:	08008648 	.word	0x08008648
 80014b4:	08008658 	.word	0x08008658
 80014b8:	080013b5 	.word	0x080013b5

080014bc <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	460b      	mov	r3, r1
 80014ca:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b3f      	cmp	r3, #63	; 0x3f
 80014d2:	dc27      	bgt.n	8001524 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	7afa      	ldrb	r2, [r7, #11]
 80014e8:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68f9      	ldr	r1, [r7, #12]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3308      	adds	r3, #8
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	330c      	adds	r3, #12
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]
		return 0;
 8001520:	2300      	movs	r3, #0
 8001522:	e001      	b.n	8001528 <shell_add+0x6c>
	}

	return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b090      	sub	sp, #64	; 0x40
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154a:	e041      	b.n	80015d0 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3304      	adds	r3, #4
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001562:	429a      	cmp	r2, r3
 8001564:	d131      	bne.n	80015ca <shell_exec+0x96>
			argc = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
 8001572:	e013      	b.n	800159c <shell_exec+0x68>
				if(*p == ' ') {
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b20      	cmp	r3, #32
 800157a:	d10c      	bne.n	8001596 <shell_exec+0x62>
					*p = '\0';
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8001582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	63ba      	str	r2, [r7, #56]	; 0x38
 8001588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800158a:	3201      	adds	r2, #1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	3340      	adds	r3, #64	; 0x40
 8001590:	443b      	add	r3, r7
 8001592:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001598:	3301      	adds	r3, #1
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <shell_exec+0x76>
 80015a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	dde4      	ble.n	8001574 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3308      	adds	r3, #8
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f107 020c 	add.w	r2, r7, #12
 80015c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	e01e      	b.n	8001608 <shell_exec+0xd4>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80015ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015cc:	3301      	adds	r3, #1
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbb8      	blt.n	800154c <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 7041 	add.w	r0, r3, #772	; 0x304
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <shell_exec+0xdc>)
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	f006 f851 	bl	8007690 <sniprintf>
 80015ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80015fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015fe:	b289      	uxth	r1, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4798      	blx	r3
	return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3740      	adds	r7, #64	; 0x40
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08008660 	.word	0x08008660

08001614 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	printf("je rentre dans shell run\r\n");
 800161c:	4840      	ldr	r0, [pc, #256]	; (8001720 <shell_run+0x10c>)
 800161e:	f005 ffb5 	bl	800758c <puts>
	int reading = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8001630:	2102      	movs	r1, #2
 8001632:	483c      	ldr	r0, [pc, #240]	; (8001724 <shell_run+0x110>)
 8001634:	4798      	blx	r3
		reading = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]

		while(reading) {
 800163a:	e066      	b.n	800170a <shell_run+0xf6>
			char c;
			h_shell->drv.receive(&c, 1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001642:	f107 020b 	add.w	r2, r7, #11
 8001646:	2101      	movs	r1, #1
 8001648:	4610      	mov	r0, r2
 800164a:	4798      	blx	r3
			int size;

			switch (c) {
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d038      	beq.n	80016c4 <shell_run+0xb0>
 8001652:	2b0d      	cmp	r3, #13
 8001654:	d143      	bne.n	80016de <shell_run+0xca>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800165c:	4a32      	ldr	r2, [pc, #200]	; (8001728 <shell_run+0x114>)
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f814 	bl	8007690 <sniprintf>
 8001668:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	b289      	uxth	r1, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	613a      	str	r2, [r7, #16]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <shell_run+0x118>)
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	f005 fff6 	bl	8007690 <sniprintf>
 80016a4:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f502 7241 	add.w	r2, r2, #772	; 0x304
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	b289      	uxth	r1, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4798      	blx	r3
				reading = 0;        //exit read loop
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
				break;
 80016c2:	e022      	b.n	800170a <shell_run+0xf6>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dd1e      	ble.n	8001708 <shell_run+0xf4>
					pos--;          //remove it in buffer
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80016d6:	2103      	movs	r1, #3
 80016d8:	4815      	ldr	r0, [pc, #84]	; (8001730 <shell_run+0x11c>)
 80016da:	4798      	blx	r3
				}
				break;
 80016dc:	e014      	b.n	8001708 <shell_run+0xf4>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	dc12      	bgt.n	800170a <shell_run+0xf6>
					h_shell->drv.transmit(&c, 1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80016ea:	f107 020b 	add.w	r2, r7, #11
 80016ee:	2101      	movs	r1, #1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	613a      	str	r2, [r7, #16]
 80016fa:	7af9      	ldrb	r1, [r7, #11]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8001706:	e000      	b.n	800170a <shell_run+0xf6>
				break;
 8001708:	bf00      	nop
		while(reading) {
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d195      	bne.n	800163c <shell_run+0x28>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff0b 	bl	8001534 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800171e:	e784      	b.n	800162a <shell_run+0x16>
 8001720:	08008678 	.word	0x08008678
 8001724:	080086ac 	.word	0x080086ac
 8001728:	08008694 	.word	0x08008694
 800172c:	08008698 	.word	0x08008698
 8001730:	080086a8 	.word	0x080086a8

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_MspInit+0x4c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	210f      	movs	r1, #15
 800176e:	f06f 0001 	mvn.w	r0, #1
 8001772:	f000 fb29 	bl	8001dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_InitTick+0xe0>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_InitTick+0xe0>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_InitTick+0xe0>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ac:	f107 0210 	add.w	r2, r7, #16
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fa2c 	bl	8002c14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d103      	bne.n	80017ce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017c6:	f001 f9fd 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80017ca:	6378      	str	r0, [r7, #52]	; 0x34
 80017cc:	e004      	b.n	80017d8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ce:	f001 f9f9 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80017d2:	4603      	mov	r3, r0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_InitTick+0xe4>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	3b01      	subs	r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_InitTick+0xe8>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_InitTick+0xec>)
 80017ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_InitTick+0xe8>)
 80017ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_InitTick+0xe8>)
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_InitTick+0xe8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_InitTick+0xe8>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_InitTick+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800180c:	4817      	ldr	r0, [pc, #92]	; (800186c <HAL_InitTick+0xe8>)
 800180e:	f001 fe23 	bl	8003458 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11b      	bne.n	8001858 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <HAL_InitTick+0xe8>)
 8001822:	f001 fe7b 	bl	800351c <HAL_TIM_Base_Start_IT>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001834:	2036      	movs	r0, #54	; 0x36
 8001836:	f000 fae3 	bl	8001e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d808      	bhi.n	8001852 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2036      	movs	r0, #54	; 0x36
 8001846:	f000 fabf 	bl	8001dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0xf0>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e002      	b.n	8001858 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800185c:	4618      	mov	r0, r3
 800185e:	3738      	adds	r7, #56	; 0x38
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	431bde83 	.word	0x431bde83
 800186c:	20000868 	.word	0x20000868
 8001870:	40001000 	.word	0x40001000
 8001874:	20000008 	.word	0x20000008

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART1_IRQHandler+0x10>)
 80018aa:	f002 f9cb 	bl	8003c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200008b8 	.word	0x200008b8

080018b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM6_DAC_IRQHandler+0x10>)
 80018be:	f001 fea5 	bl	800360c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000868 	.word	0x20000868

080018cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fc19 	bl	8001158 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f005 fb9c 	bl	8007114 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20050000 	.word	0x20050000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200008b4 	.word	0x200008b4
 8001a10:	200046a0 	.word	0x200046a0

08001a14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <MX_USART1_UART_Init+0x5c>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_USART1_UART_Init+0x58>)
 8001a7c:	f001 ffcc 	bl	8003a18 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a86:	f7ff fc8f 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200008b8 	.word	0x200008b8
 8001a94:	40011000 	.word	0x40011000

08001a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0ac      	sub	sp, #176	; 0xb0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	2284      	movs	r2, #132	; 0x84
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 fc5c 	bl	8007376 <memset>
  if(uartHandle->Instance==USART1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <HAL_UART_MspInit+0x104>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d164      	bne.n	8001b92 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001acc:	2300      	movs	r3, #0
 8001ace:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 f8cf 	bl	8002c78 <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae0:	f7ff fc62 	bl	80013a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6453      	str	r3, [r2, #68]	; 0x44
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_UART_MspInit+0x108>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b44:	2307      	movs	r3, #7
 8001b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <HAL_UART_MspInit+0x10c>)
 8001b52:	f000 f9f5 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b70:	2307      	movs	r3, #7
 8001b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <HAL_UART_MspInit+0x110>)
 8001b7e:	f000 f9df 	bl	8001f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2108      	movs	r1, #8
 8001b86:	2025      	movs	r0, #37	; 0x25
 8001b88:	f000 f91e 	bl	8001dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b8c:	2025      	movs	r0, #37	; 0x25
 8001b8e:	f000 f937 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b92:	bf00      	nop
 8001b94:	37b0      	adds	r7, #176	; 0xb0
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020000 	.word	0x40020000

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff ff1d 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f005 fb97 	bl	800730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff facd 	bl	800117c <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bf0:	08008870 	.word	0x08008870
  ldr r2, =_sbss
 8001bf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bf8:	200046a0 	.word	0x200046a0

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>

08001bfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c02:	2003      	movs	r0, #3
 8001c04:	f000 f8d5 	bl	8001db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c08:	200f      	movs	r0, #15
 8001c0a:	f7ff fdbb 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0e:	f7ff fd91 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	20000940 	.word	0x20000940

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000940 	.word	0x20000940

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <__NVIC_SetPriorityGrouping+0x40>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x40>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	05fa0000 	.word	0x05fa0000

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff4c 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dda:	f7ff ff61 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff ffb1 	bl	8001d4c <NVIC_EncodePriority>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff80 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff54 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e2a:	f7ff ff09 	bl	8001c40 <HAL_GetTick>
 8001e2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e052      	b.n	8001ef4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_Abort+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9e:	e013      	b.n	8001ec8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea0:	f7ff fece 	bl	8001c40 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d90c      	bls.n	8001ec8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e015      	b.n	8001ef4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e4      	bne.n	8001ea0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	223f      	movs	r2, #63	; 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00c      	b.n	8001f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e175      	b.n	800224c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8164 	bne.w	8002246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d005      	beq.n	8001f96 <HAL_GPIO_Init+0x56>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d130      	bne.n	8001ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d017      	beq.n	8002034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80be 	beq.w	8002246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_GPIO_Init+0x324>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_GPIO_Init+0x324>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_GPIO_Init+0x324>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020e2:	4a61      	ldr	r2, [pc, #388]	; (8002268 <HAL_GPIO_Init+0x328>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <HAL_GPIO_Init+0x23e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_GPIO_Init+0x330>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d031      	beq.n	800217a <HAL_GPIO_Init+0x23a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x334>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x236>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_GPIO_Init+0x338>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x232>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a54      	ldr	r2, [pc, #336]	; (800227c <HAL_GPIO_Init+0x33c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x22e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_GPIO_Init+0x340>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x22a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_GPIO_Init+0x344>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <HAL_GPIO_Init+0x348>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_GPIO_Init+0x34c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_GPIO_Init+0x350>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x21a>
 8002156:	2309      	movs	r3, #9
 8002158:	e012      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800215a:	230a      	movs	r3, #10
 800215c:	e010      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800215e:	2308      	movs	r3, #8
 8002160:	e00e      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002162:	2307      	movs	r3, #7
 8002164:	e00c      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002166:	2306      	movs	r3, #6
 8002168:	e00a      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800216a:	2305      	movs	r3, #5
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800216e:	2304      	movs	r3, #4
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x240>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x240>
 800217e:	2300      	movs	r3, #0
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002190:	4935      	ldr	r1, [pc, #212]	; (8002268 <HAL_GPIO_Init+0x328>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_GPIO_Init+0x354>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_GPIO_Init+0x354>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_GPIO_Init+0x354>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a29      	ldr	r2, [pc, #164]	; (8002294 <HAL_GPIO_Init+0x354>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_GPIO_Init+0x354>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_GPIO_Init+0x354>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_GPIO_Init+0x354>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_GPIO_Init+0x354>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f ae86 	bls.w	8001f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40013800 	.word	0x40013800
 800226c:	40020000 	.word	0x40020000
 8002270:	40020400 	.word	0x40020400
 8002274:	40020800 	.word	0x40020800
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40021000 	.word	0x40021000
 8002280:	40021400 	.word	0x40021400
 8002284:	40021800 	.word	0x40021800
 8002288:	40021c00 	.word	0x40021c00
 800228c:	40022000 	.word	0x40022000
 8002290:	40022400 	.word	0x40022400
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	041a      	lsls	r2, r3, #16
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e291      	b.n	800283a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002330:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x62>
 800233c:	4b90      	ldr	r3, [pc, #576]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b8d      	ldr	r3, [pc, #564]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x130>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e26b      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x7a>
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a83      	ldr	r2, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x9c>
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7e      	ldr	r2, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7b      	ldr	r2, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xc0>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a72      	ldr	r2, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd8>
 80023c0:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6b      	ldr	r2, [pc, #428]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc2e 	bl	8001c40 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fc2a 	bl	8001c40 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e21f      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe8>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff fc1a 	bl	8001c40 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fc16 	bl	8001c40 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e20b      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x110>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d069      	beq.n	8002512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x190>
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x17a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1df      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	493d      	ldr	r1, [pc, #244]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e040      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a38      	ldr	r2, [pc, #224]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbcc 	bl	8001c40 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fbc8 	bl	8001c40 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1bd      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4929      	ldr	r1, [pc, #164]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
 80024de:	e018      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff fba8 	bl	8001c40 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fba4 	bl	8001c40 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e199      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d038      	beq.n	8002590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fb85 	bl	8001c40 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7ff fb81 	bl	8001c40 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e176      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x23a>
 8002558:	e01a      	b.n	8002590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x280>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff fb6b 	bl	8001c40 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff fb67 	bl	8001c40 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d903      	bls.n	8002584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e15c      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
 8002580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ee      	bne.n	800256e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a4 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7ff fb2f 	bl	8001c40 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7ff fb2b 	bl	8001c40 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e120      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x31a>
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x376>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x33c>
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x376>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x35e>
 8002644:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x376>
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	4b58      	ldr	r3, [pc, #352]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7ff fadf 	bl	8001c40 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7ff fadb 	bl	8001c40 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0ce      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x386>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7ff fac9 	bl	8001c40 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fac5 	bl	8001c40 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80a4 	beq.w	8002838 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d06b      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d149      	bne.n	8002798 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a30      	ldr	r2, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff fa96 	bl	8001c40 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fa92 	bl	8001c40 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e087      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	4313      	orrs	r3, r2
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800275e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002762:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7ff fa66 	bl	8001c40 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff fa62 	bl	8001c40 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e057      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x478>
 8002796:	e04f      	b.n	8002838 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff fa4c 	bl	8001c40 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff fa48 	bl	8001c40 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e03d      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x4ac>
 80027ca:	e035      	b.n	8002838 <HAL_RCC_OscConfig+0x538>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x544>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d028      	beq.n	8002834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d121      	bne.n	8002834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11a      	bne.n	8002834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d0      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d910      	bls.n	8002890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	4965      	ldr	r1, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d040      	beq.n	800296c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d115      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e073      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06b      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4936      	ldr	r1, [pc, #216]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293c:	f7ff f980 	bl	8001c40 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7ff f97c 	bl	8001c40 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e053      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d210      	bcs.n	800299c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1d0>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1d4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fec2 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	080086b0 	.word	0x080086b0
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	20000008 	.word	0x20000008

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b090      	sub	sp, #64	; 0x40
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80a1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e09b      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a58:	e09b      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5e:	e098      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	627a      	str	r2, [r7, #36]	; 0x24
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	fb03 f201 	mul.w	r2, r3, r1
 8002a90:	2300      	movs	r3, #0
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	4413      	add	r3, r2
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	2200      	movs	r2, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	61fa      	str	r2, [r7, #28]
 8002ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aba:	f7fd fbf9 	bl	80002b0 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac6:	e053      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	617a      	str	r2, [r7, #20]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	4652      	mov	r2, sl
 8002ae0:	465b      	mov	r3, fp
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ebb2 080a 	subs.w	r8, r2, sl
 8002afa:	eb63 090b 	sbc.w	r9, r3, fp
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b12:	ebb2 0408 	subs.w	r4, r2, r8
 8002b16:	eb63 0509 	sbc.w	r5, r3, r9
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	00eb      	lsls	r3, r5, #3
 8002b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b28:	00e2      	lsls	r2, r4, #3
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	eb14 030a 	adds.w	r3, r4, sl
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	eb45 030b 	adc.w	r3, r5, fp
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	60fa      	str	r2, [r7, #12]
 8002b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b64:	f7fd fba4 	bl	80002b0 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3740      	adds	r7, #64	; 0x40
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840

08002bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	080086c0 	.word	0x080086c0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	080086c0 	.word	0x080086c0

08002c14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	220f      	movs	r2, #15
 8002c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0203 	and.w	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	08db      	lsrs	r3, r3, #3
 8002c4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_RCC_GetClockConfig+0x60>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40023c00 	.word	0x40023c00

08002c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca0:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a68      	ldr	r2, [pc, #416]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	4964      	ldr	r1, [pc, #400]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d017      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	4959      	ldr	r1, [pc, #356]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	494a      	ldr	r1, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 808b 	beq.w	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	; 0x40
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d74:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d80:	f7fe ff5e 	bl	8001c40 <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe ff5a 	bl	8001c40 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e357      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d9a:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d035      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d02e      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d114      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe ff22 	bl	8001c40 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe ff1e 	bl	8001c40 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e319      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ee      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e3e:	400b      	ands	r3, r1
 8002e40:	4901      	ldr	r1, [pc, #4]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	0ffffcff 	.word	0x0ffffcff
 8002e54:	4baa      	ldr	r3, [pc, #680]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4aa9      	ldr	r2, [pc, #676]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	4ba7      	ldr	r3, [pc, #668]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	49a4      	ldr	r1, [pc, #656]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e7e:	4ba0      	ldr	r3, [pc, #640]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e84:	4a9e      	ldr	r2, [pc, #632]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e8e:	4b9c      	ldr	r3, [pc, #624]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4999      	ldr	r1, [pc, #612]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eac:	4b94      	ldr	r3, [pc, #592]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eba:	4991      	ldr	r1, [pc, #580]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ece:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002edc:	4988      	ldr	r1, [pc, #544]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efe:	4980      	ldr	r1, [pc, #512]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f12:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4977      	ldr	r1, [pc, #476]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f34:	4b72      	ldr	r3, [pc, #456]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	496f      	ldr	r1, [pc, #444]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f023 020c 	bic.w	r2, r3, #12
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f64:	4966      	ldr	r1, [pc, #408]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f78:	4b61      	ldr	r3, [pc, #388]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	495e      	ldr	r1, [pc, #376]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f9a:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	4955      	ldr	r1, [pc, #340]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fde:	4b48      	ldr	r3, [pc, #288]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4944      	ldr	r1, [pc, #272]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	493c      	ldr	r1, [pc, #240]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	4933      	ldr	r1, [pc, #204]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003044:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003052:	492b      	ldr	r1, [pc, #172]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d011      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003074:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003084:	d101      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	4912      	ldr	r1, [pc, #72]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d8:	4909      	ldr	r1, [pc, #36]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d006      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80d9 	beq.w	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a01      	ldr	r2, [pc, #4]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003100:	40023800 	.word	0x40023800
 8003104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe fd9b 	bl	8001c40 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800310e:	f7fe fd97 	bl	8001c40 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e194      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003120:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d021      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11d      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800314e:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	0e1b      	lsrs	r3, r3, #24
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	019a      	lsls	r2, r3, #6
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	4957      	ldr	r1, [pc, #348]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a6:	d129      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031a8:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	0c1b      	lsrs	r3, r3, #16
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	0f1b      	lsrs	r3, r3, #28
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	019a      	lsls	r2, r3, #6
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	071b      	lsls	r3, r3, #28
 80031dc:	493d      	ldr	r1, [pc, #244]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ea:	f023 021f 	bic.w	r2, r3, #31
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	3b01      	subs	r3, #1
 80031f4:	4937      	ldr	r1, [pc, #220]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01d      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	0e1b      	lsrs	r3, r3, #24
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321c:	0f1b      	lsrs	r3, r3, #28
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	019a      	lsls	r2, r3, #6
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	071b      	lsls	r3, r3, #28
 800323c:	4925      	ldr	r1, [pc, #148]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d011      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	019a      	lsls	r2, r3, #6
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	071b      	lsls	r3, r3, #28
 800326c:	4919      	ldr	r1, [pc, #100]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800327e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7fe fcde 	bl	8001c40 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003288:	f7fe fcda 	bl	8001c40 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0d7      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 80cd 	bne.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fe fcc1 	bl	8001c40 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032c2:	f7fe fcbd 	bl	8001c40 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d903      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ba      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032d8:	4b5e      	ldr	r3, [pc, #376]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d0ed      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003302:	2b00      	cmp	r3, #0
 8003304:	d02e      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d12a      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	0f1b      	lsrs	r3, r3, #28
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	019a      	lsls	r2, r3, #6
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	071b      	lsls	r3, r3, #28
 8003342:	4944      	ldr	r1, [pc, #272]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	493d      	ldr	r1, [pc, #244]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d022      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003378:	d11d      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	0e1b      	lsrs	r3, r3, #24
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	0f1b      	lsrs	r3, r3, #28
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	019a      	lsls	r2, r3, #6
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	4929      	ldr	r1, [pc, #164]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d028      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	0e1b      	lsrs	r3, r3, #24
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	4917      	ldr	r1, [pc, #92]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	4911      	ldr	r1, [pc, #68]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fe fc0e 	bl	8001c40 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003428:	f7fe fc0a 	bl	8001c40 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e007      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d1ef      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e049      	b.n	80034fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f841 	bl	8003506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fa00 	bl	800389c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e054      	b.n	80035de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_TIM_Base_Start_IT+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d01d      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00e      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_TIM_Base_Start_IT+0xe0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_TIM_Base_Start_IT+0xe4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_TIM_Base_Start_IT+0xe8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d115      	bne.n	80035c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_TIM_Base_Start_IT+0xec>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d015      	beq.n	80035da <HAL_TIM_Base_Start_IT+0xbe>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d011      	beq.n	80035da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e008      	b.n	80035da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e000      	b.n	80035dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40000c00 	.word	0x40000c00
 80035fc:	40010400 	.word	0x40010400
 8003600:	40014000 	.word	0x40014000
 8003604:	40001800 	.word	0x40001800
 8003608:	00010007 	.word	0x00010007

0800360c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f905 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8f7 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f908 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0204 	mvn.w	r2, #4
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8db 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8cd 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8de 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0208 	mvn.w	r2, #8
 80036e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8b1 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8a3 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8b4 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b10      	cmp	r3, #16
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0210 	mvn.w	r2, #16
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2208      	movs	r2, #8
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f887 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f879 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f88a 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10e      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0201 	mvn.w	r2, #1
 8003788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fdfa 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f91a 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d10e      	bne.n	80037ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f90d 	bl	8003a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d10e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d107      	bne.n	8003816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f838 	bl	8003886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b20      	cmp	r3, #32
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0220 	mvn.w	r2, #32
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8cd 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3d      	ldr	r2, [pc, #244]	; (80039b4 <TIM_Base_SetConfig+0x118>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <TIM_Base_SetConfig+0x11c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3b      	ldr	r2, [pc, #236]	; (80039bc <TIM_Base_SetConfig+0x120>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3a      	ldr	r2, [pc, #232]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d027      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <TIM_Base_SetConfig+0x118>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d023      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <TIM_Base_SetConfig+0x11c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <TIM_Base_SetConfig+0x120>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d017      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <TIM_Base_SetConfig+0x128>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <TIM_Base_SetConfig+0x12c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <TIM_Base_SetConfig+0x130>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <TIM_Base_SetConfig+0x134>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <TIM_Base_SetConfig+0x138>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <TIM_Base_SetConfig+0x13c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0xf8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	615a      	str	r2, [r3, #20]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	40001800 	.word	0x40001800
 80039d4:	40001c00 	.word	0x40001c00
 80039d8:	40002000 	.word	0x40002000

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e040      	b.n	8003aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fe f82c 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fbe6 	bl	8004228 <UART_SetConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e022      	b.n	8003aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fe3e 	bl	80046f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fec5 	bl	8004834 <UART_CheckIdleState>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d171      	bne.n	8003bb0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_UART_Transmit+0x24>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e06a      	b.n	8003bb2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	; 0x21
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aea:	f7fe f8a9 	bl	8001c40 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d108      	bne.n	8003b1c <HAL_UART_Transmit+0x68>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d104      	bne.n	8003b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b24:	e02c      	b.n	8003b80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 feb6 	bl	80048a2 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e038      	b.n	8003bb2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	3302      	adds	r3, #2
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	e007      	b.n	8003b6e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1cc      	bne.n	8003b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fe83 	bl	80048a2 <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e005      	b.n	8003bb2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d132      	bne.n	8003c38 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_UART_Receive_IT+0x24>
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02b      	b.n	8003c3a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	613b      	str	r3, [r7, #16]
   return(result);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	69f9      	ldr	r1, [r7, #28]
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e6      	bne.n	8003bf6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fefe 	bl	8004a30 <UART_Start_Receive_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	e000      	b.n	8003c3a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3728      	adds	r7, #40	; 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b0ba      	sub	sp, #232	; 0xe8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c72:	4013      	ands	r3, r2
 8003c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d115      	bne.n	8003cac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00f      	beq.n	8003cac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8297 	beq.w	80041d0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      }
      return;
 8003caa:	e291      	b.n	80041d0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8117 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cc6:	4b85      	ldr	r3, [pc, #532]	; (8003edc <HAL_UART_IRQHandler+0x298>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 810a 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <HAL_UART_IRQHandler+0xbc>
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d011      	beq.n	8003d30 <HAL_UART_IRQHandler+0xec>
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d011      	beq.n	8003d60 <HAL_UART_IRQHandler+0x11c>
 8003d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f043 0208 	orr.w	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <HAL_UART_IRQHandler+0x18a>
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00c      	beq.n	8003dce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 81fd 	beq.w	80041d4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fec8 	bl	8004bbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d141      	bne.n	8003ebe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1d9      	bne.n	8003e3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_UART_IRQHandler+0x29c>)
 8003e94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe f82e 	bl	8001efc <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d017      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00f      	b.n	8003ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9a0 	bl	80041fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00b      	b.n	8003ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f99c 	bl	80041fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f998 	bl	80041fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ed4:	e17e      	b.n	80041d4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed6:	bf00      	nop
    return;
 8003ed8:	e17c      	b.n	80041d4 <HAL_UART_IRQHandler+0x590>
 8003eda:	bf00      	nop
 8003edc:	04000120 	.word	0x04000120
 8003ee0:	08004c85 	.word	0x08004c85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 814c 	bne.w	8004186 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8145 	beq.w	8004186 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 813e 	beq.w	8004186 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2210      	movs	r2, #16
 8003f10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	f040 80b6 	bne.w	800408e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8150 	beq.w	80041d8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 8148 	bcs.w	80041d8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	f000 8086 	beq.w	800406c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1da      	bne.n	8003f60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e1      	bne.n	8003faa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800400a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800400c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403c:	f023 0310 	bic.w	r3, r3, #16
 8004040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800404e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e4      	bne.n	800402c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fed8 	bl	8001e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800407e:	b29b      	uxth	r3, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8c2 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800408c:	e0a4      	b.n	80041d8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409a:	b29b      	uxth	r3, r3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8096 	beq.w	80041dc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8091 	beq.w	80041dc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
 80040de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e4      	bne.n	80040ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004114:	633a      	str	r2, [r7, #48]	; 0x30
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e3      	bne.n	80040f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	60fb      	str	r3, [r7, #12]
   return(result);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0310 	bic.w	r3, r3, #16
 8004150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	617b      	str	r3, [r7, #20]
   return(result);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e4      	bne.n	800413c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f846 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004184:	e02a      	b.n	80041dc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01c      	beq.n	80041e0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
    }
    return;
 80041ae:	e017      	b.n	80041e0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <HAL_UART_IRQHandler+0x59e>
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fd71 	bl	8004cb0 <UART_EndTransmit_IT>
    return;
 80041ce:	e008      	b.n	80041e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041d0:	bf00      	nop
 80041d2:	e006      	b.n	80041e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80041d4:	bf00      	nop
 80041d6:	e004      	b.n	80041e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041d8:	bf00      	nop
 80041da:	e002      	b.n	80041e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80041e0:	bf00      	nop
  }

}
 80041e2:	37e8      	adds	r7, #232	; 0xe8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4ba6      	ldr	r3, [pc, #664]	; (80044ec <UART_SetConfig+0x2c4>)
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a94      	ldr	r2, [pc, #592]	; (80044f0 <UART_SetConfig+0x2c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d120      	bne.n	80042e6 <UART_SetConfig+0xbe>
 80042a4:	4b93      	ldr	r3, [pc, #588]	; (80044f4 <UART_SetConfig+0x2cc>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d816      	bhi.n	80042e0 <UART_SetConfig+0xb8>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0x90>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042d5 	.word	0x080042d5
 80042c0:	080042cf 	.word	0x080042cf
 80042c4:	080042db 	.word	0x080042db
 80042c8:	2301      	movs	r3, #1
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e150      	b.n	8004570 <UART_SetConfig+0x348>
 80042ce:	2302      	movs	r3, #2
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e14d      	b.n	8004570 <UART_SetConfig+0x348>
 80042d4:	2304      	movs	r3, #4
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e14a      	b.n	8004570 <UART_SetConfig+0x348>
 80042da:	2308      	movs	r3, #8
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e147      	b.n	8004570 <UART_SetConfig+0x348>
 80042e0:	2310      	movs	r3, #16
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e144      	b.n	8004570 <UART_SetConfig+0x348>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a83      	ldr	r2, [pc, #524]	; (80044f8 <UART_SetConfig+0x2d0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d132      	bne.n	8004356 <UART_SetConfig+0x12e>
 80042f0:	4b80      	ldr	r3, [pc, #512]	; (80044f4 <UART_SetConfig+0x2cc>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d828      	bhi.n	8004350 <UART_SetConfig+0x128>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0xdc>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004339 	.word	0x08004339
 8004308:	08004351 	.word	0x08004351
 800430c:	08004351 	.word	0x08004351
 8004310:	08004351 	.word	0x08004351
 8004314:	08004345 	.word	0x08004345
 8004318:	08004351 	.word	0x08004351
 800431c:	08004351 	.word	0x08004351
 8004320:	08004351 	.word	0x08004351
 8004324:	0800433f 	.word	0x0800433f
 8004328:	08004351 	.word	0x08004351
 800432c:	08004351 	.word	0x08004351
 8004330:	08004351 	.word	0x08004351
 8004334:	0800434b 	.word	0x0800434b
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e118      	b.n	8004570 <UART_SetConfig+0x348>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e115      	b.n	8004570 <UART_SetConfig+0x348>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e112      	b.n	8004570 <UART_SetConfig+0x348>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e10f      	b.n	8004570 <UART_SetConfig+0x348>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e10c      	b.n	8004570 <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a68      	ldr	r2, [pc, #416]	; (80044fc <UART_SetConfig+0x2d4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0x17a>
 8004360:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d013      	beq.n	8004396 <UART_SetConfig+0x16e>
 800436e:	2b30      	cmp	r3, #48	; 0x30
 8004370:	d814      	bhi.n	800439c <UART_SetConfig+0x174>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d009      	beq.n	800438a <UART_SetConfig+0x162>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d810      	bhi.n	800439c <UART_SetConfig+0x174>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x15c>
 800437e:	2b10      	cmp	r3, #16
 8004380:	d006      	beq.n	8004390 <UART_SetConfig+0x168>
 8004382:	e00b      	b.n	800439c <UART_SetConfig+0x174>
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e0f2      	b.n	8004570 <UART_SetConfig+0x348>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e0ef      	b.n	8004570 <UART_SetConfig+0x348>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0ec      	b.n	8004570 <UART_SetConfig+0x348>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0e9      	b.n	8004570 <UART_SetConfig+0x348>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0e6      	b.n	8004570 <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a56      	ldr	r2, [pc, #344]	; (8004500 <UART_SetConfig+0x2d8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d120      	bne.n	80043ee <UART_SetConfig+0x1c6>
 80043ac:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <UART_SetConfig+0x2cc>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d013      	beq.n	80043e2 <UART_SetConfig+0x1ba>
 80043ba:	2bc0      	cmp	r3, #192	; 0xc0
 80043bc:	d814      	bhi.n	80043e8 <UART_SetConfig+0x1c0>
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x1ae>
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d810      	bhi.n	80043e8 <UART_SetConfig+0x1c0>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <UART_SetConfig+0x1a8>
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d006      	beq.n	80043dc <UART_SetConfig+0x1b4>
 80043ce:	e00b      	b.n	80043e8 <UART_SetConfig+0x1c0>
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e0cc      	b.n	8004570 <UART_SetConfig+0x348>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e0c9      	b.n	8004570 <UART_SetConfig+0x348>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e0c6      	b.n	8004570 <UART_SetConfig+0x348>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e0c3      	b.n	8004570 <UART_SetConfig+0x348>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e0c0      	b.n	8004570 <UART_SetConfig+0x348>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a44      	ldr	r2, [pc, #272]	; (8004504 <UART_SetConfig+0x2dc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d125      	bne.n	8004444 <UART_SetConfig+0x21c>
 80043f8:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <UART_SetConfig+0x2cc>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004406:	d017      	beq.n	8004438 <UART_SetConfig+0x210>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440c:	d817      	bhi.n	800443e <UART_SetConfig+0x216>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d00b      	beq.n	800442c <UART_SetConfig+0x204>
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d811      	bhi.n	800443e <UART_SetConfig+0x216>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <UART_SetConfig+0x1fe>
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	d006      	beq.n	8004432 <UART_SetConfig+0x20a>
 8004424:	e00b      	b.n	800443e <UART_SetConfig+0x216>
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e0a1      	b.n	8004570 <UART_SetConfig+0x348>
 800442c:	2302      	movs	r3, #2
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e09e      	b.n	8004570 <UART_SetConfig+0x348>
 8004432:	2304      	movs	r3, #4
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e09b      	b.n	8004570 <UART_SetConfig+0x348>
 8004438:	2308      	movs	r3, #8
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e098      	b.n	8004570 <UART_SetConfig+0x348>
 800443e:	2310      	movs	r3, #16
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e095      	b.n	8004570 <UART_SetConfig+0x348>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <UART_SetConfig+0x2e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d125      	bne.n	800449a <UART_SetConfig+0x272>
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <UART_SetConfig+0x2cc>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445c:	d017      	beq.n	800448e <UART_SetConfig+0x266>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004462:	d817      	bhi.n	8004494 <UART_SetConfig+0x26c>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004468:	d00b      	beq.n	8004482 <UART_SetConfig+0x25a>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446e:	d811      	bhi.n	8004494 <UART_SetConfig+0x26c>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x254>
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d006      	beq.n	8004488 <UART_SetConfig+0x260>
 800447a:	e00b      	b.n	8004494 <UART_SetConfig+0x26c>
 800447c:	2301      	movs	r3, #1
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e076      	b.n	8004570 <UART_SetConfig+0x348>
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e073      	b.n	8004570 <UART_SetConfig+0x348>
 8004488:	2304      	movs	r3, #4
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e070      	b.n	8004570 <UART_SetConfig+0x348>
 800448e:	2308      	movs	r3, #8
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e06d      	b.n	8004570 <UART_SetConfig+0x348>
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e06a      	b.n	8004570 <UART_SetConfig+0x348>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1b      	ldr	r2, [pc, #108]	; (800450c <UART_SetConfig+0x2e4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d138      	bne.n	8004516 <UART_SetConfig+0x2ee>
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <UART_SetConfig+0x2cc>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044b2:	d017      	beq.n	80044e4 <UART_SetConfig+0x2bc>
 80044b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044b8:	d82a      	bhi.n	8004510 <UART_SetConfig+0x2e8>
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044be:	d00b      	beq.n	80044d8 <UART_SetConfig+0x2b0>
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c4:	d824      	bhi.n	8004510 <UART_SetConfig+0x2e8>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <UART_SetConfig+0x2aa>
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x2b6>
 80044d0:	e01e      	b.n	8004510 <UART_SetConfig+0x2e8>
 80044d2:	2300      	movs	r3, #0
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e04b      	b.n	8004570 <UART_SetConfig+0x348>
 80044d8:	2302      	movs	r3, #2
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e048      	b.n	8004570 <UART_SetConfig+0x348>
 80044de:	2304      	movs	r3, #4
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e045      	b.n	8004570 <UART_SetConfig+0x348>
 80044e4:	2308      	movs	r3, #8
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e042      	b.n	8004570 <UART_SetConfig+0x348>
 80044ea:	bf00      	nop
 80044ec:	efff69f3 	.word	0xefff69f3
 80044f0:	40011000 	.word	0x40011000
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40004400 	.word	0x40004400
 80044fc:	40004800 	.word	0x40004800
 8004500:	40004c00 	.word	0x40004c00
 8004504:	40005000 	.word	0x40005000
 8004508:	40011400 	.word	0x40011400
 800450c:	40007800 	.word	0x40007800
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e02c      	b.n	8004570 <UART_SetConfig+0x348>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a72      	ldr	r2, [pc, #456]	; (80046e4 <UART_SetConfig+0x4bc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d125      	bne.n	800456c <UART_SetConfig+0x344>
 8004520:	4b71      	ldr	r3, [pc, #452]	; (80046e8 <UART_SetConfig+0x4c0>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800452a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800452e:	d017      	beq.n	8004560 <UART_SetConfig+0x338>
 8004530:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004534:	d817      	bhi.n	8004566 <UART_SetConfig+0x33e>
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453a:	d00b      	beq.n	8004554 <UART_SetConfig+0x32c>
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d811      	bhi.n	8004566 <UART_SetConfig+0x33e>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <UART_SetConfig+0x326>
 8004546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454a:	d006      	beq.n	800455a <UART_SetConfig+0x332>
 800454c:	e00b      	b.n	8004566 <UART_SetConfig+0x33e>
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e00d      	b.n	8004570 <UART_SetConfig+0x348>
 8004554:	2302      	movs	r3, #2
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e00a      	b.n	8004570 <UART_SetConfig+0x348>
 800455a:	2304      	movs	r3, #4
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e007      	b.n	8004570 <UART_SetConfig+0x348>
 8004560:	2308      	movs	r3, #8
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x348>
 8004566:	2310      	movs	r3, #16
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e001      	b.n	8004570 <UART_SetConfig+0x348>
 800456c:	2310      	movs	r3, #16
 800456e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d15b      	bne.n	8004632 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d828      	bhi.n	80045d2 <UART_SetConfig+0x3aa>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <UART_SetConfig+0x360>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045c3 	.word	0x080045c3
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045d3 	.word	0x080045d3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe fb0a 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80045b0:	61b8      	str	r0, [r7, #24]
        break;
 80045b2:	e013      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe fb1a 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80045b8:	61b8      	str	r0, [r7, #24]
        break;
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <UART_SetConfig+0x4c4>)
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e00c      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe fa2d 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80045c6:	61b8      	str	r0, [r7, #24]
        break;
 80045c8:	e008      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e004      	b.n	80045dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	77bb      	strb	r3, [r7, #30]
        break;
 80045da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d074      	beq.n	80046cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	005a      	lsls	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d916      	bls.n	800462c <UART_SetConfig+0x404>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d212      	bcs.n	800462c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f023 030f 	bic.w	r3, r3, #15
 800460e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b29a      	uxth	r2, r3
 800461c:	89fb      	ldrh	r3, [r7, #14]
 800461e:	4313      	orrs	r3, r2
 8004620:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	89fa      	ldrh	r2, [r7, #14]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e04f      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77bb      	strb	r3, [r7, #30]
 8004630:	e04c      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004632:	7ffb      	ldrb	r3, [r7, #31]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d828      	bhi.n	800468a <UART_SetConfig+0x462>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <UART_SetConfig+0x418>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	0800468b 	.word	0x0800468b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800468b 	.word	0x0800468b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe faae 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8004668:	61b8      	str	r0, [r7, #24]
        break;
 800466a:	e013      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe fabe 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004670:	61b8      	str	r0, [r7, #24]
        break;
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <UART_SetConfig+0x4c4>)
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e00c      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe f9d1 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 800467e:	61b8      	str	r0, [r7, #24]
        break;
 8004680:	e008      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	61bb      	str	r3, [r7, #24]
        break;
 8004688:	e004      	b.n	8004694 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	77bb      	strb	r3, [r7, #30]
        break;
 8004692:	bf00      	nop
    }

    if (pclk != 0U)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d018      	beq.n	80046cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	085a      	lsrs	r2, r3, #1
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	d909      	bls.n	80046c8 <UART_SetConfig+0x4a0>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d205      	bcs.n	80046c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e001      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40007c00 	.word	0x40007c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01a      	beq.n	8004806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ee:	d10a      	bne.n	8004806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004844:	f7fd f9fc 	bl	8001c40 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d10e      	bne.n	8004876 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f81b 	bl	80048a2 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e011      	b.n	800489a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b09c      	sub	sp, #112	; 0x70
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b2:	e0a7      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	f000 80a3 	beq.w	8004a04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fd f9bf 	bl	8001c40 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d13f      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004926:	64ba      	str	r2, [r7, #72]	; 0x48
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800492c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e068      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d050      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004970:	d148      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800497a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
 800499c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	613b      	str	r3, [r7, #16]
   return(result);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049ce:	623a      	str	r2, [r7, #32]
 80049d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	69f9      	ldr	r1, [r7, #28]
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	61bb      	str	r3, [r7, #24]
   return(result);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e5      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2220      	movs	r2, #32
 80049e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e010      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	f43f af48 	beq.w	80048b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3770      	adds	r7, #112	; 0x70
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b097      	sub	sp, #92	; 0x5c
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d10e      	bne.n	8004a82 <UART_Start_Receive_IT+0x52>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <UART_Start_Receive_IT+0x48>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a76:	e02d      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	22ff      	movs	r2, #255	; 0xff
 8004a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a80:	e028      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <UART_Start_Receive_IT+0x76>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <UART_Start_Receive_IT+0x6c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	22ff      	movs	r2, #255	; 0xff
 8004a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a9a:	e01b      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	227f      	movs	r2, #127	; 0x7f
 8004aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa4:	e016      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aae:	d10d      	bne.n	8004acc <UART_Start_Receive_IT+0x9c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <UART_Start_Receive_IT+0x92>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	227f      	movs	r2, #127	; 0x7f
 8004abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ac0:	e008      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	223f      	movs	r2, #63	; 0x3f
 8004ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aca:	e003      	b.n	8004ad4 <UART_Start_Receive_IT+0xa4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2222      	movs	r2, #34	; 0x22
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b04:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d107      	bne.n	8004b32 <UART_Start_Receive_IT+0x102>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <UART_Start_Receive_IT+0x184>)
 8004b2e:	669a      	str	r2, [r3, #104]	; 0x68
 8004b30:	e002      	b.n	8004b38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <UART_Start_Receive_IT+0x188>)
 8004b36:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d019      	beq.n	8004b74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_Start_Receive_IT+0x110>
 8004b72:	e018      	b.n	8004ba6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	613b      	str	r3, [r7, #16]
   return(result);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f043 0320 	orr.w	r3, r3, #32
 8004b88:	653b      	str	r3, [r7, #80]	; 0x50
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	69f9      	ldr	r1, [r7, #28]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e6      	bne.n	8004b74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	375c      	adds	r7, #92	; 0x5c
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	08004e6b 	.word	0x08004e6b
 8004bb8:	08004d05 	.word	0x08004d05

08004bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b095      	sub	sp, #84	; 0x54
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3308      	adds	r3, #8
 8004c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d118      	bne.n	8004c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c78:	bf00      	nop
 8004c7a:	3754      	adds	r7, #84	; 0x54
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff faaa 	bl	80041fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6979      	ldr	r1, [r7, #20]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e6      	bne.n	8004cb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fa76 	bl	80041e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b096      	sub	sp, #88	; 0x58
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1c:	2b22      	cmp	r3, #34	; 0x22
 8004d1e:	f040 8098 	bne.w	8004e52 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d30:	b2d9      	uxtb	r1, r3
 8004d32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d17b      	bne.n	8004e62 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	623b      	str	r3, [r7, #32]
   return(result);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dbc:	633a      	str	r2, [r7, #48]	; 0x30
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d12e      	bne.n	8004e4a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d103      	bne.n	8004e3a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff f9e4 	bl	8004210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e48:	e00b      	b.n	8004e62 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fb fbd4 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 8004e50:	e007      	b.n	8004e62 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0208 	orr.w	r2, r2, #8
 8004e60:	619a      	str	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	3758      	adds	r7, #88	; 0x58
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b096      	sub	sp, #88	; 0x58
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	f040 8098 	bne.w	8004fb8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004e9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d17b      	bne.n	8004fc8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eee:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e6      	bne.n	8004ed0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3308      	adds	r3, #8
 8004f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d12e      	bne.n	8004fb0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0310 	bic.w	r3, r3, #16
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6979      	ldr	r1, [r7, #20]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	613b      	str	r3, [r7, #16]
   return(result);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d103      	bne.n	8004fa0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff f931 	bl	8004210 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fae:	e00b      	b.n	8004fc8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fb fb21 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 8004fb6:	e007      	b.n	8004fc8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	619a      	str	r2, [r3, #24]
}
 8004fc8:	bf00      	nop
 8004fca:	3758      	adds	r7, #88	; 0x58
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	2b84      	cmp	r3, #132	; 0x84
 8004fe4:	d005      	beq.n	8004ff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3303      	adds	r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005004:	f000 fe88 	bl	8005d18 <vTaskStartScheduler>
  
  return osOK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	bd80      	pop	{r7, pc}

0800500e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800500e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005010:	b089      	sub	sp, #36	; 0x24
 8005012:	af04      	add	r7, sp, #16
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <osThreadCreate+0x54>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01c      	beq.n	8005062 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685c      	ldr	r4, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681d      	ldr	r5, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691e      	ldr	r6, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ffc8 	bl	8004fd0 <makeFreeRtosPriority>
 8005040:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504a:	9202      	str	r2, [sp, #8]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	9100      	str	r1, [sp, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4632      	mov	r2, r6
 8005054:	4629      	mov	r1, r5
 8005056:	4620      	mov	r0, r4
 8005058:	f000 fbe2 	bl	8005820 <xTaskCreateStatic>
 800505c:	4603      	mov	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e01c      	b.n	800509c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685c      	ldr	r4, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800506e:	b29e      	uxth	r6, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ffaa 	bl	8004fd0 <makeFreeRtosPriority>
 800507c:	4602      	mov	r2, r0
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	9200      	str	r2, [sp, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	4632      	mov	r2, r6
 800508a:	4629      	mov	r1, r5
 800508c:	4620      	mov	r0, r4
 800508e:	f000 fc2a 	bl	80058e6 <xTaskCreate>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <osDelay+0x16>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e000      	b.n	80050be <osDelay+0x18>
 80050bc:	2301      	movs	r3, #1
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fd60 	bl	8005b84 <vTaskDelay>
  
  return osOK;
 80050c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f103 0208 	add.w	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f103 0208 	add.w	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d103      	bne.n	8005190 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e00c      	b.n	80051aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3308      	adds	r3, #8
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e002      	b.n	800519e <vListInsert+0x2e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d2f6      	bcs.n	8005198 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d103      	bne.n	8005216 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10c      	bne.n	8005266 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800524c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005250:	b672      	cpsid	i
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	b662      	cpsie	i
 8005260:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005266:	f001 fc41 	bl	8006aec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	3b01      	subs	r3, #1
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	22ff      	movs	r2, #255	; 0xff
 80052b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3310      	adds	r3, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 ff83 	bl	80061d4 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <xQueueGenericReset+0xd0>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	e009      	b.n	80052fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff feef 	bl	80050ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff feea 	bl	80050ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 fc2b 	bl	8006b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <xQueueGenericCreate+0x2e>
	__asm volatile
 8005320:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005324:	b672      	cpsid	i
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	b662      	cpsie	i
 8005334:	613b      	str	r3, [r7, #16]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e004      	b.n	8005350 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3348      	adds	r3, #72	; 0x48
 8005354:	4618      	mov	r0, r3
 8005356:	f001 fcf5 	bl	8006d44 <pvPortMalloc>
 800535a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	3348      	adds	r3, #72	; 0x48
 800536a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005374:	79fa      	ldrb	r2, [r7, #7]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f805 	bl	8005390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005386:	69bb      	ldr	r3, [r7, #24]
	}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053be:	2101      	movs	r1, #1
 80053c0:	69b8      	ldr	r0, [r7, #24]
 80053c2:	f7ff ff39 	bl	8005238 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b08e      	sub	sp, #56	; 0x38
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <xQueueGiveFromISR+0x2e>
	__asm volatile
 80053e2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053e6:	b672      	cpsid	i
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	b662      	cpsie	i
 80053f6:	623b      	str	r3, [r7, #32]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <xQueueGiveFromISR+0x50>
	__asm volatile
 8005404:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	61fb      	str	r3, [r7, #28]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <xQueueGiveFromISR+0x60>
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <xQueueGiveFromISR+0x64>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <xQueueGiveFromISR+0x66>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005438:	f04f 0380 	mov.w	r3, #128	; 0x80
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
 800544c:	61bb      	str	r3, [r7, #24]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005452:	f001 fc33 	bl	8006cbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005456:	f3ef 8211 	mrs	r2, BASEPRI
 800545a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800545e:	b672      	cpsid	i
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	b662      	cpsie	i
 800546e:	617a      	str	r2, [r7, #20]
 8005470:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005472:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005482:	429a      	cmp	r2, r3
 8005484:	d22b      	bcs.n	80054de <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d112      	bne.n	80054c8 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fe90 	bl	80061d4 <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e007      	b.n	80054d8 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054cc:	3301      	adds	r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	b25a      	sxtb	r2, r3
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	e001      	b.n	80054e2 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3738      	adds	r7, #56	; 0x38
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08e      	sub	sp, #56	; 0x38
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005502:	2300      	movs	r3, #0
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800550a:	2300      	movs	r3, #0
 800550c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005514:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	623b      	str	r3, [r7, #32]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005536:	f04f 0380 	mov.w	r3, #128	; 0x80
 800553a:	b672      	cpsid	i
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	b662      	cpsie	i
 800554a:	61fb      	str	r3, [r7, #28]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005550:	f001 f808 	bl	8006564 <xTaskGetSchedulerState>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <xQueueSemaphoreTake+0x68>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueSemaphoreTake+0x6c>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueSemaphoreTake+0x6e>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800556a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	61bb      	str	r3, [r7, #24]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005584:	f001 fab2 	bl	8006aec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	2b00      	cmp	r3, #0
 8005592:	d024      	beq.n	80055de <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055a4:	f001 f91a 	bl	80067dc <pvTaskIncrementMutexHeldCount>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00f      	beq.n	80055d6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	3310      	adds	r3, #16
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fe0a 	bl	80061d4 <xTaskRemoveFromEventList>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055c6:	4b55      	ldr	r3, [pc, #340]	; (800571c <xQueueSemaphoreTake+0x224>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055d6:	f001 fabd 	bl	8006b54 <vPortExitCritical>
				return pdPASS;
 80055da:	2301      	movs	r3, #1
 80055dc:	e099      	b.n	8005712 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80055ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055ee:	b672      	cpsid	i
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	b662      	cpsie	i
 80055fe:	617b      	str	r3, [r7, #20]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005604:	f001 faa6 	bl	8006b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005608:	2300      	movs	r3, #0
 800560a:	e082      	b.n	8005712 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fe40 	bl	800629c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005620:	f001 fa98 	bl	8006b54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005624:	f000 fbe6 	bl	8005df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005628:	f001 fa60 	bl	8006aec <vPortEnterCritical>
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005632:	b25b      	sxtb	r3, r3
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d103      	bne.n	8005642 <xQueueSemaphoreTake+0x14a>
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005648:	b25b      	sxtb	r3, r3
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d103      	bne.n	8005658 <xQueueSemaphoreTake+0x160>
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005658:	f001 fa7c 	bl	8006b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800565c:	463a      	mov	r2, r7
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fe2f 	bl	80062c8 <xTaskCheckForTimeOut>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d132      	bne.n	80056d6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005672:	f000 f8bf 	bl	80057f4 <prvIsQueueEmpty>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d026      	beq.n	80056ca <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005684:	f001 fa32 	bl	8006aec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 ff87 	bl	80065a0 <xTaskPriorityInherit>
 8005692:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005694:	f001 fa5e 	bl	8006b54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	3324      	adds	r3, #36	; 0x24
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fd71 	bl	8006188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056a8:	f000 f852 	bl	8005750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056ac:	f000 fbb0 	bl	8005e10 <xTaskResumeAll>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f47f af66 	bne.w	8005584 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80056b8:	4b18      	ldr	r3, [pc, #96]	; (800571c <xQueueSemaphoreTake+0x224>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	e75c      	b.n	8005584 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056cc:	f000 f840 	bl	8005750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056d0:	f000 fb9e 	bl	8005e10 <xTaskResumeAll>
 80056d4:	e756      	b.n	8005584 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056d8:	f000 f83a 	bl	8005750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056dc:	f000 fb98 	bl	8005e10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e2:	f000 f887 	bl	80057f4 <prvIsQueueEmpty>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f43f af4b 	beq.w	8005584 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80056f4:	f001 f9fa 	bl	8006aec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056fa:	f000 f811 	bl	8005720 <prvGetDisinheritPriorityAfterTimeout>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f000 ffca 	bl	80066a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800570c:	f001 fa22 	bl	8006b54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005710:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005712:	4618      	mov	r0, r3
 8005714:	3738      	adds	r7, #56	; 0x38
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1c3 0307 	rsb	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e001      	b.n	8005742 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005742:	68fb      	ldr	r3, [r7, #12]
	}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005758:	f001 f9c8 	bl	8006aec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005762:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005764:	e011      	b.n	800578a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b00      	cmp	r3, #0
 800576c:	d012      	beq.n	8005794 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3324      	adds	r3, #36	; 0x24
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd2e 	bl	80061d4 <xTaskRemoveFromEventList>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800577e:	f000 fe09 	bl	8006394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	3b01      	subs	r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578e:	2b00      	cmp	r3, #0
 8005790:	dce9      	bgt.n	8005766 <prvUnlockQueue+0x16>
 8005792:	e000      	b.n	8005796 <prvUnlockQueue+0x46>
					break;
 8005794:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	22ff      	movs	r2, #255	; 0xff
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800579e:	f001 f9d9 	bl	8006b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057a2:	f001 f9a3 	bl	8006aec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ae:	e011      	b.n	80057d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d012      	beq.n	80057de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3310      	adds	r3, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fd09 	bl	80061d4 <xTaskRemoveFromEventList>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057c8:	f000 fde4 	bl	8006394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dce9      	bgt.n	80057b0 <prvUnlockQueue+0x60>
 80057dc:	e000      	b.n	80057e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	22ff      	movs	r2, #255	; 0xff
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057e8:	f001 f9b4 	bl	8006b54 <vPortExitCritical>
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057fc:	f001 f976 	bl	8006aec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e001      	b.n	8005812 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005812:	f001 f99f 	bl	8006b54 <vPortExitCritical>

	return xReturn;
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10c      	bne.n	800584e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005834:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005838:	b672      	cpsid	i
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	b662      	cpsie	i
 8005848:	623b      	str	r3, [r7, #32]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10c      	bne.n	800586e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005854:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005858:	b672      	cpsid	i
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	b662      	cpsie	i
 8005868:	61fb      	str	r3, [r7, #28]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586e:	23b4      	movs	r3, #180	; 0xb4
 8005870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2bb4      	cmp	r3, #180	; 0xb4
 8005876:	d00c      	beq.n	8005892 <xTaskCreateStatic+0x72>
	__asm volatile
 8005878:	f04f 0380 	mov.w	r3, #128	; 0x80
 800587c:	b672      	cpsid	i
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	b662      	cpsie	i
 800588c:	61bb      	str	r3, [r7, #24]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01e      	beq.n	80058d8 <xTaskCreateStatic+0xb8>
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058b2:	2300      	movs	r3, #0
 80058b4:	9303      	str	r3, [sp, #12]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	9302      	str	r3, [sp, #8]
 80058ba:	f107 0314 	add.w	r3, r7, #20
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f850 	bl	8005970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058d2:	f000 f8ed 	bl	8005ab0 <prvAddNewTaskToReadyList>
 80058d6:	e001      	b.n	80058dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058dc:	697b      	ldr	r3, [r7, #20]
	}
 80058de:	4618      	mov	r0, r3
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b08c      	sub	sp, #48	; 0x30
 80058ea:	af04      	add	r7, sp, #16
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fa22 	bl	8006d44 <pvPortMalloc>
 8005900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005908:	20b4      	movs	r0, #180	; 0xb4
 800590a:	f001 fa1b 	bl	8006d44 <pvPortMalloc>
 800590e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
 800591c:	e005      	b.n	800592a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f001 fada 	bl	8006ed8 <vPortFree>
 8005924:	e001      	b.n	800592a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d017      	beq.n	8005960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	2300      	movs	r3, #0
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f80e 	bl	8005970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005954:	69f8      	ldr	r0, [r7, #28]
 8005956:	f000 f8ab 	bl	8005ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800595a:	2301      	movs	r3, #1
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e002      	b.n	8005966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295
 8005964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005966:	69bb      	ldr	r3, [r7, #24]
	}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005988:	440b      	add	r3, r1
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f023 0307 	bic.w	r3, r3, #7
 8005996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80059a2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059a6:	b672      	cpsid	i
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	b662      	cpsie	i
 80059b6:	617b      	str	r3, [r7, #20]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01f      	beq.n	8005a02 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	e012      	b.n	80059ee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	7819      	ldrb	r1, [r3, #0]
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	3334      	adds	r3, #52	; 0x34
 80059d8:	460a      	mov	r2, r1
 80059da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d006      	beq.n	80059f6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d9e9      	bls.n	80059c8 <prvInitialiseNewTask+0x58>
 80059f4:	e000      	b.n	80059f8 <prvInitialiseNewTask+0x88>
			{
				break;
 80059f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a00:	e003      	b.n	8005a0a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d901      	bls.n	8005a14 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a10:	2306      	movs	r3, #6
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	2200      	movs	r2, #0
 8005a24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fb6f 	bl	800510e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fb6a 	bl	800510e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	f1c3 0207 	rsb	r2, r3, #7
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	334c      	adds	r3, #76	; 0x4c
 8005a64:	2260      	movs	r2, #96	; 0x60
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fc84 	bl	8007376 <memset>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <prvInitialiseNewTask+0x134>)
 8005a72:	651a      	str	r2, [r3, #80]	; 0x50
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <prvInitialiseNewTask+0x138>)
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	4a0b      	ldr	r2, [pc, #44]	; (8005aac <prvInitialiseNewTask+0x13c>)
 8005a7e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	69b8      	ldr	r0, [r7, #24]
 8005a86:	f000 ff23 	bl	80068d0 <pxPortInitialiseStack>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	080086e8 	.word	0x080086e8
 8005aa8:	08008708 	.word	0x08008708
 8005aac:	080086c8 	.word	0x080086c8

08005ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ab8:	f001 f818 	bl	8006aec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005abc:	4b2a      	ldr	r3, [pc, #168]	; (8005b68 <prvAddNewTaskToReadyList+0xb8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <prvAddNewTaskToReadyList+0xb8>)
 8005ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <prvAddNewTaskToReadyList+0xbc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <prvAddNewTaskToReadyList+0xbc>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ad4:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <prvAddNewTaskToReadyList+0xb8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d110      	bne.n	8005afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005adc:	f000 fc7e 	bl	80063dc <prvInitialiseTaskLists>
 8005ae0:	e00d      	b.n	8005afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <prvAddNewTaskToReadyList+0xc0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <prvAddNewTaskToReadyList+0xbc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d802      	bhi.n	8005afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <prvAddNewTaskToReadyList+0xbc>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <prvAddNewTaskToReadyList+0xc4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <prvAddNewTaskToReadyList+0xc4>)
 8005b06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	409a      	lsls	r2, r3
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <prvAddNewTaskToReadyList+0xc8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <prvAddNewTaskToReadyList+0xc8>)
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <prvAddNewTaskToReadyList+0xcc>)
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7ff faf9 	bl	8005128 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b36:	f001 f80d 	bl	8006b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <prvAddNewTaskToReadyList+0xc0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <prvAddNewTaskToReadyList+0xbc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d207      	bcs.n	8005b60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <prvAddNewTaskToReadyList+0xd0>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000a44 	.word	0x20000a44
 8005b6c:	20000944 	.word	0x20000944
 8005b70:	20000a50 	.word	0x20000a50
 8005b74:	20000a60 	.word	0x20000a60
 8005b78:	20000a4c 	.word	0x20000a4c
 8005b7c:	20000948 	.word	0x20000948
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d019      	beq.n	8005bca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <vTaskDelay+0x64>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <vTaskDelay+0x34>
	__asm volatile
 8005b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ba2:	b672      	cpsid	i
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	b662      	cpsie	i
 8005bb2:	60bb      	str	r3, [r7, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005bb8:	f000 f91c 	bl	8005df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fe20 	bl	8006804 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bc4:	f000 f924 	bl	8005e10 <xTaskResumeAll>
 8005bc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <vTaskDelay+0x68>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000a6c 	.word	0x20000a6c
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005bf8:	f000 ff78 	bl	8006aec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d102      	bne.n	8005c08 <vTaskSuspend+0x18>
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <vTaskSuspend+0x108>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	e000      	b.n	8005c0a <vTaskSuspend+0x1a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fae6 	bl	80051e2 <uxListRemove>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4936      	ldr	r1, [pc, #216]	; (8005cfc <vTaskSuspend+0x10c>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <vTaskSuspend+0x58>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43da      	mvns	r2, r3
 8005c3e:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <vTaskSuspend+0x110>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4013      	ands	r3, r2
 8005c44:	4a2e      	ldr	r2, [pc, #184]	; (8005d00 <vTaskSuspend+0x110>)
 8005c46:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3318      	adds	r3, #24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fac4 	bl	80051e2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4828      	ldr	r0, [pc, #160]	; (8005d04 <vTaskSuspend+0x114>)
 8005c62:	f7ff fa61 	bl	8005128 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d103      	bne.n	8005c7a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005c7a:	f000 ff6b 	bl	8006b54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <vTaskSuspend+0x118>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005c86:	f000 ff31 	bl	8006aec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005c8a:	f000 fc4b 	bl	8006524 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005c8e:	f000 ff61 	bl	8006b54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <vTaskSuspend+0x108>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d129      	bne.n	8005cf0 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <vTaskSuspend+0x118>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d019      	beq.n	8005cd8 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005ca4:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <vTaskSuspend+0x11c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <vTaskSuspend+0xd6>
	__asm volatile
 8005cac:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005cb0:	b672      	cpsid	i
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	b662      	cpsie	i
 8005cc0:	60bb      	str	r3, [r7, #8]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <vTaskSuspend+0x120>)
 8005cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cd6:	e00b      	b.n	8005cf0 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <vTaskSuspend+0x114>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <vTaskSuspend+0x124>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d103      	bne.n	8005cec <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8005ce4:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <vTaskSuspend+0x108>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
	}
 8005cea:	e001      	b.n	8005cf0 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8005cec:	f000 f9e8 	bl	80060c0 <vTaskSwitchContext>
	}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000944 	.word	0x20000944
 8005cfc:	20000948 	.word	0x20000948
 8005d00:	20000a4c 	.word	0x20000a4c
 8005d04:	20000a30 	.word	0x20000a30
 8005d08:	20000a50 	.word	0x20000a50
 8005d0c:	20000a6c 	.word	0x20000a6c
 8005d10:	e000ed04 	.word	0xe000ed04
 8005d14:	20000a44 	.word	0x20000a44

08005d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d26:	463a      	mov	r2, r7
 8005d28:	1d39      	adds	r1, r7, #4
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fa fd5e 	bl	80007f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	9202      	str	r2, [sp, #8]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	460a      	mov	r2, r1
 8005d46:	4923      	ldr	r1, [pc, #140]	; (8005dd4 <vTaskStartScheduler+0xbc>)
 8005d48:	4823      	ldr	r0, [pc, #140]	; (8005dd8 <vTaskStartScheduler+0xc0>)
 8005d4a:	f7ff fd69 	bl	8005820 <xTaskCreateStatic>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4a22      	ldr	r2, [pc, #136]	; (8005ddc <vTaskStartScheduler+0xc4>)
 8005d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d54:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <vTaskStartScheduler+0xc4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e001      	b.n	8005d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d11d      	bne.n	8005da8 <vTaskStartScheduler+0x90>
	__asm volatile
 8005d6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	613b      	str	r3, [r7, #16]
}
 8005d82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d84:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <vTaskStartScheduler+0xc8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	334c      	adds	r3, #76	; 0x4c
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <vTaskStartScheduler+0xcc>)
 8005d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <vTaskStartScheduler+0xd0>)
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295
 8005d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <vTaskStartScheduler+0xd4>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <vTaskStartScheduler+0xd8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005da2:	f000 fe25 	bl	80069f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da6:	e010      	b.n	8005dca <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d10c      	bne.n	8005dca <vTaskStartScheduler+0xb2>
	__asm volatile
 8005db0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005db4:	b672      	cpsid	i
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	b662      	cpsie	i
 8005dc4:	60fb      	str	r3, [r7, #12]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <vTaskStartScheduler+0xb0>
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	080086a0 	.word	0x080086a0
 8005dd8:	080063ad 	.word	0x080063ad
 8005ddc:	20000a68 	.word	0x20000a68
 8005de0:	20000944 	.word	0x20000944
 8005de4:	20000014 	.word	0x20000014
 8005de8:	20000a64 	.word	0x20000a64
 8005dec:	20000a50 	.word	0x20000a50
 8005df0:	20000a48 	.word	0x20000a48

08005df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005df8:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <vTaskSuspendAll+0x18>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a03      	ldr	r2, [pc, #12]	; (8005e0c <vTaskSuspendAll+0x18>)
 8005e00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000a6c 	.word	0x20000a6c

08005e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e1e:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <xTaskResumeAll+0x118>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <xTaskResumeAll+0x30>
	__asm volatile
 8005e26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e2a:	b672      	cpsid	i
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	b662      	cpsie	i
 8005e3a:	603b      	str	r3, [r7, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e40:	f000 fe54 	bl	8006aec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e44:	4b38      	ldr	r3, [pc, #224]	; (8005f28 <xTaskResumeAll+0x118>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	4a37      	ldr	r2, [pc, #220]	; (8005f28 <xTaskResumeAll+0x118>)
 8005e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4e:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <xTaskResumeAll+0x118>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d161      	bne.n	8005f1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e56:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <xTaskResumeAll+0x11c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d05d      	beq.n	8005f1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5e:	e02e      	b.n	8005ebe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b33      	ldr	r3, [pc, #204]	; (8005f30 <xTaskResumeAll+0x120>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff f9b8 	bl	80051e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff f9b3 	bl	80051e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	2201      	movs	r2, #1
 8005e82:	409a      	lsls	r2, r3
 8005e84:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <xTaskResumeAll+0x124>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <xTaskResumeAll+0x124>)
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a27      	ldr	r2, [pc, #156]	; (8005f38 <xTaskResumeAll+0x128>)
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7ff f93f 	bl	8005128 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <xTaskResumeAll+0x12c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005eb8:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <xTaskResumeAll+0x130>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <xTaskResumeAll+0x120>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1cc      	bne.n	8005e60 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ecc:	f000 fb2a 	bl	8006524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <xTaskResumeAll+0x134>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005edc:	f000 f836 	bl	8005f4c <xTaskIncrementTick>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <xTaskResumeAll+0x130>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f1      	bne.n	8005edc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <xTaskResumeAll+0x134>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xTaskResumeAll+0x130>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTaskResumeAll+0x138>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f1a:	f000 fe1b 	bl	8006b54 <vPortExitCritical>

	return xAlreadyYielded;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000a6c 	.word	0x20000a6c
 8005f2c:	20000a44 	.word	0x20000a44
 8005f30:	20000a04 	.word	0x20000a04
 8005f34:	20000a4c 	.word	0x20000a4c
 8005f38:	20000948 	.word	0x20000948
 8005f3c:	20000944 	.word	0x20000944
 8005f40:	20000a58 	.word	0x20000a58
 8005f44:	20000a54 	.word	0x20000a54
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f56:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <xTaskIncrementTick+0x148>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 808a 	bne.w	8006074 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f60:	4b4d      	ldr	r3, [pc, #308]	; (8006098 <xTaskIncrementTick+0x14c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f68:	4a4b      	ldr	r2, [pc, #300]	; (8006098 <xTaskIncrementTick+0x14c>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d122      	bne.n	8005fba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f74:	4b49      	ldr	r3, [pc, #292]	; (800609c <xTaskIncrementTick+0x150>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005f7e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005f82:	b672      	cpsid	i
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	b662      	cpsie	i
 8005f92:	603b      	str	r3, [r7, #0]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xTaskIncrementTick+0x4a>
 8005f98:	4b40      	ldr	r3, [pc, #256]	; (800609c <xTaskIncrementTick+0x150>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <xTaskIncrementTick+0x154>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a3e      	ldr	r2, [pc, #248]	; (800609c <xTaskIncrementTick+0x150>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4a3e      	ldr	r2, [pc, #248]	; (80060a0 <xTaskIncrementTick+0x154>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b3d      	ldr	r3, [pc, #244]	; (80060a4 <xTaskIncrementTick+0x158>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	4a3c      	ldr	r2, [pc, #240]	; (80060a4 <xTaskIncrementTick+0x158>)
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	f000 fab5 	bl	8006524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fba:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <xTaskIncrementTick+0x15c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d348      	bcc.n	8006056 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <xTaskIncrementTick+0x150>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <xTaskIncrementTick+0x15c>)
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd4:	601a      	str	r2, [r3, #0]
					break;
 8005fd6:	e03e      	b.n	8006056 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <xTaskIncrementTick+0x150>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d203      	bcs.n	8005ff8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <xTaskIncrementTick+0x15c>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ff6:	e02e      	b.n	8006056 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f8f0 	bl	80051e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3318      	adds	r3, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff f8e7 	bl	80051e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	2201      	movs	r2, #1
 800601a:	409a      	lsls	r2, r3
 800601c:	4b23      	ldr	r3, [pc, #140]	; (80060ac <xTaskIncrementTick+0x160>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4313      	orrs	r3, r2
 8006022:	4a22      	ldr	r2, [pc, #136]	; (80060ac <xTaskIncrementTick+0x160>)
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <xTaskIncrementTick+0x164>)
 8006034:	441a      	add	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7ff f873 	bl	8005128 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <xTaskIncrementTick+0x168>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d3b9      	bcc.n	8005fc4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006054:	e7b6      	b.n	8005fc4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <xTaskIncrementTick+0x168>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4914      	ldr	r1, [pc, #80]	; (80060b0 <xTaskIncrementTick+0x164>)
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d907      	bls.n	800607e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e004      	b.n	800607e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006074:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <xTaskIncrementTick+0x16c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a0f      	ldr	r2, [pc, #60]	; (80060b8 <xTaskIncrementTick+0x16c>)
 800607c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <xTaskIncrementTick+0x170>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006086:	2301      	movs	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000a6c 	.word	0x20000a6c
 8006098:	20000a48 	.word	0x20000a48
 800609c:	200009fc 	.word	0x200009fc
 80060a0:	20000a00 	.word	0x20000a00
 80060a4:	20000a5c 	.word	0x20000a5c
 80060a8:	20000a64 	.word	0x20000a64
 80060ac:	20000a4c 	.word	0x20000a4c
 80060b0:	20000948 	.word	0x20000948
 80060b4:	20000944 	.word	0x20000944
 80060b8:	20000a54 	.word	0x20000a54
 80060bc:	20000a58 	.word	0x20000a58

080060c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060c6:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <vTaskSwitchContext+0xb0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ce:	4b29      	ldr	r3, [pc, #164]	; (8006174 <vTaskSwitchContext+0xb4>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060d4:	e046      	b.n	8006164 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80060d6:	4b27      	ldr	r3, [pc, #156]	; (8006174 <vTaskSwitchContext+0xb4>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060dc:	4b26      	ldr	r3, [pc, #152]	; (8006178 <vTaskSwitchContext+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	fab3 f383 	clz	r3, r3
 80060e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	f1c3 031f 	rsb	r3, r3, #31
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	4922      	ldr	r1, [pc, #136]	; (800617c <vTaskSwitchContext+0xbc>)
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10c      	bne.n	8006120 <vTaskSwitchContext+0x60>
	__asm volatile
 8006106:	f04f 0380 	mov.w	r3, #128	; 0x80
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	607b      	str	r3, [r7, #4]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vTaskSwitchContext+0x5e>
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4a14      	ldr	r2, [pc, #80]	; (800617c <vTaskSwitchContext+0xbc>)
 800612c:	4413      	add	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	605a      	str	r2, [r3, #4]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3308      	adds	r3, #8
 8006142:	429a      	cmp	r2, r3
 8006144:	d104      	bne.n	8006150 <vTaskSwitchContext+0x90>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <vTaskSwitchContext+0xc0>)
 8006158:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <vTaskSwitchContext+0xc0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	334c      	adds	r3, #76	; 0x4c
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <vTaskSwitchContext+0xc4>)
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000a6c 	.word	0x20000a6c
 8006174:	20000a58 	.word	0x20000a58
 8006178:	20000a4c 	.word	0x20000a4c
 800617c:	20000948 	.word	0x20000948
 8006180:	20000944 	.word	0x20000944
 8006184:	20000014 	.word	0x20000014

08006188 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10c      	bne.n	80061b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006198:	f04f 0380 	mov.w	r3, #128	; 0x80
 800619c:	b672      	cpsid	i
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	b662      	cpsie	i
 80061ac:	60fb      	str	r3, [r7, #12]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <vTaskPlaceOnEventList+0x48>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fe ffd8 	bl	8005170 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061c0:	2101      	movs	r1, #1
 80061c2:	6838      	ldr	r0, [r7, #0]
 80061c4:	f000 fb1e 	bl	8006804 <prvAddCurrentTaskToDelayedList>
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000944 	.word	0x20000944

080061d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10c      	bne.n	8006204 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80061ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80061ee:	b672      	cpsid	i
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	b662      	cpsie	i
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	3318      	adds	r3, #24
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe ffea 	bl	80051e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <xTaskRemoveFromEventList+0xb0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11c      	bne.n	8006250 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe ffe1 	bl	80051e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	2201      	movs	r2, #1
 8006226:	409a      	lsls	r2, r3
 8006228:	4b17      	ldr	r3, [pc, #92]	; (8006288 <xTaskRemoveFromEventList+0xb4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	4a16      	ldr	r2, [pc, #88]	; (8006288 <xTaskRemoveFromEventList+0xb4>)
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <xTaskRemoveFromEventList+0xb8>)
 8006240:	441a      	add	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe ff6d 	bl	8005128 <vListInsertEnd>
 800624e:	e005      	b.n	800625c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	3318      	adds	r3, #24
 8006254:	4619      	mov	r1, r3
 8006256:	480e      	ldr	r0, [pc, #56]	; (8006290 <xTaskRemoveFromEventList+0xbc>)
 8006258:	f7fe ff66 	bl	8005128 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <xTaskRemoveFromEventList+0xc0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	429a      	cmp	r2, r3
 8006268:	d905      	bls.n	8006276 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <xTaskRemoveFromEventList+0xc4>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e001      	b.n	800627a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000a6c 	.word	0x20000a6c
 8006288:	20000a4c 	.word	0x20000a4c
 800628c:	20000948 	.word	0x20000948
 8006290:	20000a04 	.word	0x20000a04
 8006294:	20000944 	.word	0x20000944
 8006298:	20000a58 	.word	0x20000a58

0800629c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <vTaskInternalSetTimeOutState+0x24>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <vTaskInternalSetTimeOutState+0x28>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000a5c 	.word	0x20000a5c
 80062c4:	20000a48 	.word	0x20000a48

080062c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10c      	bne.n	80062f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80062d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062dc:	b672      	cpsid	i
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	b662      	cpsie	i
 80062ec:	613b      	str	r3, [r7, #16]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80062f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062fc:	b672      	cpsid	i
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	b662      	cpsie	i
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006312:	f000 fbeb 	bl	8006aec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <xTaskCheckForTimeOut+0xc4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d102      	bne.n	8006336 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e023      	b.n	800637e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <xTaskCheckForTimeOut+0xc8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d007      	beq.n	8006352 <xTaskCheckForTimeOut+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e015      	b.n	800637e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d20b      	bcs.n	8006374 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff ff97 	bl	800629c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e004      	b.n	800637e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800637a:	2301      	movs	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800637e:	f000 fbe9 	bl	8006b54 <vPortExitCritical>

	return xReturn;
 8006382:	69fb      	ldr	r3, [r7, #28]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000a48 	.word	0x20000a48
 8006390:	20000a5c 	.word	0x20000a5c

08006394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <vTaskMissedYield+0x14>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	20000a58 	.word	0x20000a58

080063ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063b4:	f000 f852 	bl	800645c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <prvIdleTask+0x28>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d9f9      	bls.n	80063b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <prvIdleTask+0x2c>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063d0:	e7f0      	b.n	80063b4 <prvIdleTask+0x8>
 80063d2:	bf00      	nop
 80063d4:	20000948 	.word	0x20000948
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063e2:	2300      	movs	r3, #0
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	e00c      	b.n	8006402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <prvInitialiseTaskLists+0x60>)
 80063f4:	4413      	add	r3, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fe69 	bl	80050ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3301      	adds	r3, #1
 8006400:	607b      	str	r3, [r7, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b06      	cmp	r3, #6
 8006406:	d9ef      	bls.n	80063e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006408:	480d      	ldr	r0, [pc, #52]	; (8006440 <prvInitialiseTaskLists+0x64>)
 800640a:	f7fe fe60 	bl	80050ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800640e:	480d      	ldr	r0, [pc, #52]	; (8006444 <prvInitialiseTaskLists+0x68>)
 8006410:	f7fe fe5d 	bl	80050ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006414:	480c      	ldr	r0, [pc, #48]	; (8006448 <prvInitialiseTaskLists+0x6c>)
 8006416:	f7fe fe5a 	bl	80050ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800641a:	480c      	ldr	r0, [pc, #48]	; (800644c <prvInitialiseTaskLists+0x70>)
 800641c:	f7fe fe57 	bl	80050ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006420:	480b      	ldr	r0, [pc, #44]	; (8006450 <prvInitialiseTaskLists+0x74>)
 8006422:	f7fe fe54 	bl	80050ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <prvInitialiseTaskLists+0x78>)
 8006428:	4a05      	ldr	r2, [pc, #20]	; (8006440 <prvInitialiseTaskLists+0x64>)
 800642a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <prvInitialiseTaskLists+0x7c>)
 800642e:	4a05      	ldr	r2, [pc, #20]	; (8006444 <prvInitialiseTaskLists+0x68>)
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000948 	.word	0x20000948
 8006440:	200009d4 	.word	0x200009d4
 8006444:	200009e8 	.word	0x200009e8
 8006448:	20000a04 	.word	0x20000a04
 800644c:	20000a18 	.word	0x20000a18
 8006450:	20000a30 	.word	0x20000a30
 8006454:	200009fc 	.word	0x200009fc
 8006458:	20000a00 	.word	0x20000a00

0800645c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006462:	e019      	b.n	8006498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006464:	f000 fb42 	bl	8006aec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <prvCheckTasksWaitingTermination+0x50>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe feb4 	bl	80051e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <prvCheckTasksWaitingTermination+0x54>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3b01      	subs	r3, #1
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <prvCheckTasksWaitingTermination+0x54>)
 8006482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <prvCheckTasksWaitingTermination+0x58>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3b01      	subs	r3, #1
 800648a:	4a0a      	ldr	r2, [pc, #40]	; (80064b4 <prvCheckTasksWaitingTermination+0x58>)
 800648c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800648e:	f000 fb61 	bl	8006b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f810 	bl	80064b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <prvCheckTasksWaitingTermination+0x58>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e1      	bne.n	8006464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000a18 	.word	0x20000a18
 80064b0:	20000a44 	.word	0x20000a44
 80064b4:	20000a2c 	.word	0x20000a2c

080064b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	334c      	adds	r3, #76	; 0x4c
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f877 	bl	80075b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d108      	bne.n	80064e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fcfd 	bl	8006ed8 <vPortFree>
				vPortFree( pxTCB );
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fcfa 	bl	8006ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064e4:	e01a      	b.n	800651c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d103      	bne.n	80064f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcf1 	bl	8006ed8 <vPortFree>
	}
 80064f6:	e011      	b.n	800651c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d00c      	beq.n	800651c <prvDeleteTCB+0x64>
	__asm volatile
 8006502:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006506:	b672      	cpsid	i
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	b662      	cpsie	i
 8006516:	60fb      	str	r3, [r7, #12]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <prvDeleteTCB+0x62>
	}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <prvResetNextTaskUnblockTime+0x38>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <prvResetNextTaskUnblockTime+0x3c>)
 8006536:	f04f 32ff 	mov.w	r2, #4294967295
 800653a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800653c:	e008      	b.n	8006550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653e:	4b07      	ldr	r3, [pc, #28]	; (800655c <prvResetNextTaskUnblockTime+0x38>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <prvResetNextTaskUnblockTime+0x3c>)
 800654e:	6013      	str	r3, [r2, #0]
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200009fc 	.word	0x200009fc
 8006560:	20000a64 	.word	0x20000a64

08006564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <xTaskGetSchedulerState+0x34>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006572:	2301      	movs	r3, #1
 8006574:	607b      	str	r3, [r7, #4]
 8006576:	e008      	b.n	800658a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006578:	4b08      	ldr	r3, [pc, #32]	; (800659c <xTaskGetSchedulerState+0x38>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006580:	2302      	movs	r3, #2
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	e001      	b.n	800658a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006586:	2300      	movs	r3, #0
 8006588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800658a:	687b      	ldr	r3, [r7, #4]
	}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000a50 	.word	0x20000a50
 800659c:	20000a6c 	.word	0x20000a6c

080065a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d069      	beq.n	800668a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	4b36      	ldr	r3, [pc, #216]	; (8006694 <xTaskPriorityInherit+0xf4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d259      	bcs.n	8006678 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	db06      	blt.n	80065da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065cc:	4b31      	ldr	r3, [pc, #196]	; (8006694 <xTaskPriorityInherit+0xf4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f1c3 0207 	rsb	r2, r3, #7
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <xTaskPriorityInherit+0xf8>)
 80065ec:	4413      	add	r3, r2
 80065ee:	4299      	cmp	r1, r3
 80065f0:	d13a      	bne.n	8006668 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fdf3 	bl	80051e2 <uxListRemove>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d115      	bne.n	800662e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	4924      	ldr	r1, [pc, #144]	; (8006698 <xTaskPriorityInherit+0xf8>)
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xTaskPriorityInherit+0x8e>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43da      	mvns	r2, r3
 8006624:	4b1d      	ldr	r3, [pc, #116]	; (800669c <xTaskPriorityInherit+0xfc>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4013      	ands	r3, r2
 800662a:	4a1c      	ldr	r2, [pc, #112]	; (800669c <xTaskPriorityInherit+0xfc>)
 800662c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <xTaskPriorityInherit+0xf4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	2201      	movs	r2, #1
 800663e:	409a      	lsls	r2, r3
 8006640:	4b16      	ldr	r3, [pc, #88]	; (800669c <xTaskPriorityInherit+0xfc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4313      	orrs	r3, r2
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <xTaskPriorityInherit+0xfc>)
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4a10      	ldr	r2, [pc, #64]	; (8006698 <xTaskPriorityInherit+0xf8>)
 8006658:	441a      	add	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3304      	adds	r3, #4
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7fe fd61 	bl	8005128 <vListInsertEnd>
 8006666:	e004      	b.n	8006672 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <xTaskPriorityInherit+0xf4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006672:	2301      	movs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	e008      	b.n	800668a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <xTaskPriorityInherit+0xf4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	429a      	cmp	r2, r3
 8006684:	d201      	bcs.n	800668a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800668a:	68fb      	ldr	r3, [r7, #12]
	}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000944 	.word	0x20000944
 8006698:	20000948 	.word	0x20000948
 800669c:	20000a4c 	.word	0x20000a4c

080066a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8087 	beq.w	80067c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80066c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80066c6:	b672      	cpsid	i
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	b662      	cpsie	i
 80066d6:	60fb      	str	r3, [r7, #12]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d902      	bls.n	80066ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e002      	b.n	80066f2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d065      	beq.n	80067c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	429a      	cmp	r2, r3
 8006704:	d160      	bne.n	80067c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006706:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	429a      	cmp	r2, r3
 800670e:	d10c      	bne.n	800672a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006710:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006714:	b672      	cpsid	i
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	b662      	cpsie	i
 8006724:	60bb      	str	r3, [r7, #8]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	db04      	blt.n	8006748 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f1c3 0207 	rsb	r2, r3, #7
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6959      	ldr	r1, [r3, #20]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006758:	4413      	add	r3, r2
 800675a:	4299      	cmp	r1, r3
 800675c:	d134      	bne.n	80067c8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fd3d 	bl	80051e2 <uxListRemove>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d115      	bne.n	800679a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	4918      	ldr	r1, [pc, #96]	; (80067d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	2201      	movs	r2, #1
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43da      	mvns	r2, r3
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4013      	ands	r3, r2
 8006796:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006798:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	2201      	movs	r2, #1
 80067a0:	409a      	lsls	r2, r3
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4a06      	ldr	r2, [pc, #24]	; (80067d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80067ba:	441a      	add	r2, r3
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe fcb0 	bl	8005128 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c8:	bf00      	nop
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000944 	.word	0x20000944
 80067d4:	20000948 	.word	0x20000948
 80067d8:	20000a4c 	.word	0x20000a4c

080067dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <pvTaskIncrementMutexHeldCount+0x24>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <pvTaskIncrementMutexHeldCount+0x24>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ee:	3201      	adds	r2, #1
 80067f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80067f2:	4b03      	ldr	r3, [pc, #12]	; (8006800 <pvTaskIncrementMutexHeldCount+0x24>)
 80067f4:	681b      	ldr	r3, [r3, #0]
	}
 80067f6:	4618      	mov	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20000944 	.word	0x20000944

08006804 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800680e:	4b29      	ldr	r3, [pc, #164]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006814:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fce1 	bl	80051e2 <uxListRemove>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	2201      	movs	r2, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43da      	mvns	r2, r3
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4013      	ands	r3, r2
 800683a:	4a20      	ldr	r2, [pc, #128]	; (80068bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800683c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d10a      	bne.n	800685c <prvAddCurrentTaskToDelayedList+0x58>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	481a      	ldr	r0, [pc, #104]	; (80068c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006856:	f7fe fc67 	bl	8005128 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800685a:	e026      	b.n	80068aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4413      	add	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006864:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	429a      	cmp	r2, r3
 8006872:	d209      	bcs.n	8006888 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fe fc75 	bl	8005170 <vListInsert>
}
 8006886:	e010      	b.n	80068aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe fc6b 	bl	8005170 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d202      	bcs.n	80068aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6013      	str	r3, [r2, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000a48 	.word	0x20000a48
 80068b8:	20000944 	.word	0x20000944
 80068bc:	20000a4c 	.word	0x20000a4c
 80068c0:	20000a30 	.word	0x20000a30
 80068c4:	20000a00 	.word	0x20000a00
 80068c8:	200009fc 	.word	0x200009fc
 80068cc:	20000a64 	.word	0x20000a64

080068d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3b04      	subs	r3, #4
 80068e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 0201 	bic.w	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006900:	4a0c      	ldr	r2, [pc, #48]	; (8006934 <pxPortInitialiseStack+0x64>)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3b14      	subs	r3, #20
 800690a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f06f 0202 	mvn.w	r2, #2
 800691e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3b20      	subs	r3, #32
 8006924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	08006939 	.word	0x08006939

08006938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006942:	4b14      	ldr	r3, [pc, #80]	; (8006994 <prvTaskExitError+0x5c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d00c      	beq.n	8006966 <prvTaskExitError+0x2e>
	__asm volatile
 800694c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006950:	b672      	cpsid	i
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	b662      	cpsie	i
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <prvTaskExitError+0x2c>
	__asm volatile
 8006966:	f04f 0380 	mov.w	r3, #128	; 0x80
 800696a:	b672      	cpsid	i
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	b662      	cpsie	i
 800697a:	60bb      	str	r3, [r7, #8]
}
 800697c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800697e:	bf00      	nop
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0fc      	beq.n	8006980 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000010 	.word	0x20000010
	...

080069a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <pxCurrentTCBConst2>)
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	f380 8809 	msr	PSP, r0
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8811 	msr	BASEPRI, r0
 80069ba:	4770      	bx	lr
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst2>:
 80069c0:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069c8:	4808      	ldr	r0, [pc, #32]	; (80069ec <prvPortStartFirstTask+0x24>)
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	6800      	ldr	r0, [r0, #0]
 80069ce:	f380 8808 	msr	MSP, r0
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8814 	msr	CONTROL, r0
 80069da:	b662      	cpsie	i
 80069dc:	b661      	cpsie	f
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	df00      	svc	0
 80069e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ea:	bf00      	nop
 80069ec:	e000ed08 	.word	0xe000ed08

080069f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069f6:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <xPortStartScheduler+0xe4>)
 80069f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <xPortStartScheduler+0xe8>)
 8006a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	; (8006adc <xPortStartScheduler+0xec>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a24:	e009      	b.n	8006a3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a26:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <xPortStartScheduler+0xec>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <xPortStartScheduler+0xec>)
 8006a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d0ef      	beq.n	8006a26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a46:	4b25      	ldr	r3, [pc, #148]	; (8006adc <xPortStartScheduler+0xec>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f1c3 0307 	rsb	r3, r3, #7
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d00c      	beq.n	8006a6c <xPortStartScheduler+0x7c>
	__asm volatile
 8006a52:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a56:	b672      	cpsid	i
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	b662      	cpsie	i
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <xPortStartScheduler+0xec>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	4a1a      	ldr	r2, [pc, #104]	; (8006adc <xPortStartScheduler+0xec>)
 8006a74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <xPortStartScheduler+0xec>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a7e:	4a17      	ldr	r2, [pc, #92]	; (8006adc <xPortStartScheduler+0xec>)
 8006a80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <xPortStartScheduler+0xf0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <xPortStartScheduler+0xf0>)
 8006a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <xPortStartScheduler+0xf0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a11      	ldr	r2, [pc, #68]	; (8006ae0 <xPortStartScheduler+0xf0>)
 8006a9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aa0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aa2:	f000 f8dd 	bl	8006c60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <xPortStartScheduler+0xf4>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006aac:	f000 f8fc 	bl	8006ca8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <xPortStartScheduler+0xf8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <xPortStartScheduler+0xf8>)
 8006ab6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006aba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006abc:	f7ff ff84 	bl	80069c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ac0:	f7ff fafe 	bl	80060c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006ac4:	f7ff ff38 	bl	8006938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000e400 	.word	0xe000e400
 8006ad8:	20000a70 	.word	0x20000a70
 8006adc:	20000a74 	.word	0x20000a74
 8006ae0:	e000ed20 	.word	0xe000ed20
 8006ae4:	20000010 	.word	0x20000010
 8006ae8:	e000ef34 	.word	0xe000ef34

08006aec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
	__asm volatile
 8006af2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006af6:	b672      	cpsid	i
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	b662      	cpsie	i
 8006b06:	607b      	str	r3, [r7, #4]
}
 8006b08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b0a:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <vPortEnterCritical+0x60>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	4a0e      	ldr	r2, [pc, #56]	; (8006b4c <vPortEnterCritical+0x60>)
 8006b12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <vPortEnterCritical+0x60>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d111      	bne.n	8006b40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <vPortEnterCritical+0x64>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <vPortEnterCritical+0x54>
	__asm volatile
 8006b26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b2a:	b672      	cpsid	i
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	b662      	cpsie	i
 8006b3a:	603b      	str	r3, [r7, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <vPortEnterCritical+0x52>
	}
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000010 	.word	0x20000010
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <vPortExitCritical+0x54>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10c      	bne.n	8006b7c <vPortExitCritical+0x28>
	__asm volatile
 8006b62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	607b      	str	r3, [r7, #4]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <vPortExitCritical+0x54>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <vPortExitCritical+0x54>)
 8006b84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <vPortExitCritical+0x54>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d105      	bne.n	8006b9a <vPortExitCritical+0x46>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	f383 8811 	msr	BASEPRI, r3
}
 8006b98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000010 	.word	0x20000010
 8006bac:	00000000 	.word	0x00000000

08006bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bb0:	f3ef 8009 	mrs	r0, PSP
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <pxCurrentTCBConst>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	f01e 0f10 	tst.w	lr, #16
 8006bc0:	bf08      	it	eq
 8006bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	6010      	str	r0, [r2, #0]
 8006bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bd0:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006bd4:	b672      	cpsid	i
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	b662      	cpsie	i
 8006be4:	f7ff fa6c 	bl	80060c0 <vTaskSwitchContext>
 8006be8:	f04f 0000 	mov.w	r0, #0
 8006bec:	f380 8811 	msr	BASEPRI, r0
 8006bf0:	bc09      	pop	{r0, r3}
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	f01e 0f10 	tst.w	lr, #16
 8006bfe:	bf08      	it	eq
 8006c00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c04:	f380 8809 	msr	PSP, r0
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop

08006c10 <pxCurrentTCBConst>:
 8006c10:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop

08006c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c1e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c36:	f7ff f989 	bl	8005f4c <xTaskIncrementTick>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <SysTick_Handler+0x44>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
}
 8006c52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <vPortSetupTimerInterrupt+0x34>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <vPortSetupTimerInterrupt+0x38>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vPortSetupTimerInterrupt+0x3c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <vPortSetupTimerInterrupt+0x40>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	099b      	lsrs	r3, r3, #6
 8006c7c:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <vPortSetupTimerInterrupt+0x44>)
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c82:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <vPortSetupTimerInterrupt+0x34>)
 8006c84:	2207      	movs	r2, #7
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	e000e010 	.word	0xe000e010
 8006c98:	e000e018 	.word	0xe000e018
 8006c9c:	20000004 	.word	0x20000004
 8006ca0:	10624dd3 	.word	0x10624dd3
 8006ca4:	e000e014 	.word	0xe000e014

08006ca8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ca8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cb8 <vPortEnableVFP+0x10>
 8006cac:	6801      	ldr	r1, [r0, #0]
 8006cae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cb2:	6001      	str	r1, [r0, #0]
 8006cb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cb6:	bf00      	nop
 8006cb8:	e000ed88 	.word	0xe000ed88

08006cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cc2:	f3ef 8305 	mrs	r3, IPSR
 8006cc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b0f      	cmp	r3, #15
 8006ccc:	d916      	bls.n	8006cfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cce:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <vPortValidateInterruptPriority+0x78>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cd8:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <vPortValidateInterruptPriority+0x7c>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	7afa      	ldrb	r2, [r7, #11]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d20c      	bcs.n	8006cfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006ce2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	607b      	str	r3, [r7, #4]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <vPortValidateInterruptPriority+0x80>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortValidateInterruptPriority+0x84>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d90c      	bls.n	8006d26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006d0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d10:	b672      	cpsid	i
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	b662      	cpsie	i
 8006d20:	603b      	str	r3, [r7, #0]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <vPortValidateInterruptPriority+0x68>
	}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	e000e3f0 	.word	0xe000e3f0
 8006d38:	20000a70 	.word	0x20000a70
 8006d3c:	e000ed0c 	.word	0xe000ed0c
 8006d40:	20000a74 	.word	0x20000a74

08006d44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d50:	f7ff f850 	bl	8005df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d54:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <pvPortMalloc+0x180>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d5c:	f000 f91a 	bl	8006f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d60:	4b59      	ldr	r3, [pc, #356]	; (8006ec8 <pvPortMalloc+0x184>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 8092 	bne.w	8006e92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01f      	beq.n	8006db4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006d74:	2208      	movs	r2, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d016      	beq.n	8006db4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <pvPortMalloc+0x70>
	__asm volatile
 8006d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d9e:	b672      	cpsid	i
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	b662      	cpsie	i
 8006dae:	617b      	str	r3, [r7, #20]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d06b      	beq.n	8006e92 <pvPortMalloc+0x14e>
 8006dba:	4b44      	ldr	r3, [pc, #272]	; (8006ecc <pvPortMalloc+0x188>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d866      	bhi.n	8006e92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dc4:	4b42      	ldr	r3, [pc, #264]	; (8006ed0 <pvPortMalloc+0x18c>)
 8006dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dc8:	4b41      	ldr	r3, [pc, #260]	; (8006ed0 <pvPortMalloc+0x18c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dce:	e004      	b.n	8006dda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <pvPortMalloc+0xa8>
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f1      	bne.n	8006dd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dec:	4b35      	ldr	r3, [pc, #212]	; (8006ec4 <pvPortMalloc+0x180>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d04d      	beq.n	8006e92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	2308      	movs	r3, #8
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d921      	bls.n	8006e5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <pvPortMalloc+0x100>
	__asm volatile
 8006e2a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e2e:	b672      	cpsid	i
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	b662      	cpsie	i
 8006e3e:	613b      	str	r3, [r7, #16]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e56:	69b8      	ldr	r0, [r7, #24]
 8006e58:	f000 f8fe 	bl	8007058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <pvPortMalloc+0x188>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	4a19      	ldr	r2, [pc, #100]	; (8006ecc <pvPortMalloc+0x188>)
 8006e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <pvPortMalloc+0x188>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <pvPortMalloc+0x190>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d203      	bcs.n	8006e7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <pvPortMalloc+0x188>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a16      	ldr	r2, [pc, #88]	; (8006ed4 <pvPortMalloc+0x190>)
 8006e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <pvPortMalloc+0x184>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e92:	f7fe ffbd 	bl	8005e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00c      	beq.n	8006eba <pvPortMalloc+0x176>
	__asm volatile
 8006ea0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ea4:	b672      	cpsid	i
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	60fb      	str	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <pvPortMalloc+0x174>
	return pvReturn;
 8006eba:	69fb      	ldr	r3, [r7, #28]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3728      	adds	r7, #40	; 0x28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20004680 	.word	0x20004680
 8006ec8:	2000468c 	.word	0x2000468c
 8006ecc:	20004684 	.word	0x20004684
 8006ed0:	20004678 	.word	0x20004678
 8006ed4:	20004688 	.word	0x20004688

08006ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d04c      	beq.n	8006f84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eea:	2308      	movs	r3, #8
 8006eec:	425b      	negs	r3, r3
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <vPortFree+0xb4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10c      	bne.n	8006f20 <vPortFree+0x48>
	__asm volatile
 8006f06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f0a:	b672      	cpsid	i
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	b662      	cpsie	i
 8006f1a:	60fb      	str	r3, [r7, #12]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <vPortFree+0x6a>
	__asm volatile
 8006f28:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f2c:	b672      	cpsid	i
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	b662      	cpsie	i
 8006f3c:	60bb      	str	r3, [r7, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <vPortFree+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d019      	beq.n	8006f84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d115      	bne.n	8006f84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <vPortFree+0xb4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f68:	f7fe ff44 	bl	8005df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <vPortFree+0xb8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <vPortFree+0xb8>)
 8006f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f7a:	6938      	ldr	r0, [r7, #16]
 8006f7c:	f000 f86c 	bl	8007058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f80:	f7fe ff46 	bl	8005e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f84:	bf00      	nop
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	2000468c 	.word	0x2000468c
 8006f90:	20004684 	.word	0x20004684

08006f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fa0:	4b27      	ldr	r3, [pc, #156]	; (8007040 <prvHeapInit+0xac>)
 8006fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3307      	adds	r3, #7
 8006fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <prvHeapInit+0xac>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <prvHeapInit+0xb0>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <prvHeapInit+0xb0>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a15      	ldr	r2, [pc, #84]	; (8007048 <prvHeapInit+0xb4>)
 8006ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <prvHeapInit+0xb4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <prvHeapInit+0xb4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <prvHeapInit+0xb4>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <prvHeapInit+0xb8>)
 8007022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <prvHeapInit+0xbc>)
 800702a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800702c:	4b09      	ldr	r3, [pc, #36]	; (8007054 <prvHeapInit+0xc0>)
 800702e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	20000a78 	.word	0x20000a78
 8007044:	20004678 	.word	0x20004678
 8007048:	20004680 	.word	0x20004680
 800704c:	20004688 	.word	0x20004688
 8007050:	20004684 	.word	0x20004684
 8007054:	2000468c 	.word	0x2000468c

08007058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007060:	4b28      	ldr	r3, [pc, #160]	; (8007104 <prvInsertBlockIntoFreeList+0xac>)
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e002      	b.n	800706c <prvInsertBlockIntoFreeList+0x14>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d8f7      	bhi.n	8007066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d108      	bne.n	800709a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d118      	bne.n	80070e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <prvInsertBlockIntoFreeList+0xb0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d00d      	beq.n	80070d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e008      	b.n	80070e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <prvInsertBlockIntoFreeList+0xb0>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e003      	b.n	80070e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d002      	beq.n	80070f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20004678 	.word	0x20004678
 8007108:	20004680 	.word	0x20004680

0800710c <atoi>:
 800710c:	220a      	movs	r2, #10
 800710e:	2100      	movs	r1, #0
 8007110:	f000 bbb8 	b.w	8007884 <strtol>

08007114 <__errno>:
 8007114:	4b01      	ldr	r3, [pc, #4]	; (800711c <__errno+0x8>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000014 	.word	0x20000014

08007120 <std>:
 8007120:	2300      	movs	r3, #0
 8007122:	b510      	push	{r4, lr}
 8007124:	4604      	mov	r4, r0
 8007126:	e9c0 3300 	strd	r3, r3, [r0]
 800712a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800712e:	6083      	str	r3, [r0, #8]
 8007130:	8181      	strh	r1, [r0, #12]
 8007132:	6643      	str	r3, [r0, #100]	; 0x64
 8007134:	81c2      	strh	r2, [r0, #14]
 8007136:	6183      	str	r3, [r0, #24]
 8007138:	4619      	mov	r1, r3
 800713a:	2208      	movs	r2, #8
 800713c:	305c      	adds	r0, #92	; 0x5c
 800713e:	f000 f91a 	bl	8007376 <memset>
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x38>)
 8007144:	6263      	str	r3, [r4, #36]	; 0x24
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x3c>)
 8007148:	62a3      	str	r3, [r4, #40]	; 0x28
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x40>)
 800714c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x44>)
 8007150:	6224      	str	r4, [r4, #32]
 8007152:	6323      	str	r3, [r4, #48]	; 0x30
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	080076f9 	.word	0x080076f9
 800715c:	0800771b 	.word	0x0800771b
 8007160:	08007753 	.word	0x08007753
 8007164:	08007777 	.word	0x08007777

08007168 <_cleanup_r>:
 8007168:	4901      	ldr	r1, [pc, #4]	; (8007170 <_cleanup_r+0x8>)
 800716a:	f000 b8af 	b.w	80072cc <_fwalk_reent>
 800716e:	bf00      	nop
 8007170:	08007b69 	.word	0x08007b69

08007174 <__sfmoreglue>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	2268      	movs	r2, #104	; 0x68
 8007178:	1e4d      	subs	r5, r1, #1
 800717a:	4355      	muls	r5, r2
 800717c:	460e      	mov	r6, r1
 800717e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007182:	f000 f921 	bl	80073c8 <_malloc_r>
 8007186:	4604      	mov	r4, r0
 8007188:	b140      	cbz	r0, 800719c <__sfmoreglue+0x28>
 800718a:	2100      	movs	r1, #0
 800718c:	e9c0 1600 	strd	r1, r6, [r0]
 8007190:	300c      	adds	r0, #12
 8007192:	60a0      	str	r0, [r4, #8]
 8007194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007198:	f000 f8ed 	bl	8007376 <memset>
 800719c:	4620      	mov	r0, r4
 800719e:	bd70      	pop	{r4, r5, r6, pc}

080071a0 <__sfp_lock_acquire>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__sfp_lock_acquire+0x8>)
 80071a2:	f000 b8d8 	b.w	8007356 <__retarget_lock_acquire_recursive>
 80071a6:	bf00      	nop
 80071a8:	20004691 	.word	0x20004691

080071ac <__sfp_lock_release>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__sfp_lock_release+0x8>)
 80071ae:	f000 b8d3 	b.w	8007358 <__retarget_lock_release_recursive>
 80071b2:	bf00      	nop
 80071b4:	20004691 	.word	0x20004691

080071b8 <__sinit_lock_acquire>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__sinit_lock_acquire+0x8>)
 80071ba:	f000 b8cc 	b.w	8007356 <__retarget_lock_acquire_recursive>
 80071be:	bf00      	nop
 80071c0:	20004692 	.word	0x20004692

080071c4 <__sinit_lock_release>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__sinit_lock_release+0x8>)
 80071c6:	f000 b8c7 	b.w	8007358 <__retarget_lock_release_recursive>
 80071ca:	bf00      	nop
 80071cc:	20004692 	.word	0x20004692

080071d0 <__sinit>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4604      	mov	r4, r0
 80071d4:	f7ff fff0 	bl	80071b8 <__sinit_lock_acquire>
 80071d8:	69a3      	ldr	r3, [r4, #24]
 80071da:	b11b      	cbz	r3, 80071e4 <__sinit+0x14>
 80071dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e0:	f7ff bff0 	b.w	80071c4 <__sinit_lock_release>
 80071e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071e8:	6523      	str	r3, [r4, #80]	; 0x50
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <__sinit+0x68>)
 80071ec:	4a13      	ldr	r2, [pc, #76]	; (800723c <__sinit+0x6c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	bf04      	itt	eq
 80071f6:	2301      	moveq	r3, #1
 80071f8:	61a3      	streq	r3, [r4, #24]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f820 	bl	8007240 <__sfp>
 8007200:	6060      	str	r0, [r4, #4]
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f81c 	bl	8007240 <__sfp>
 8007208:	60a0      	str	r0, [r4, #8]
 800720a:	4620      	mov	r0, r4
 800720c:	f000 f818 	bl	8007240 <__sfp>
 8007210:	2200      	movs	r2, #0
 8007212:	60e0      	str	r0, [r4, #12]
 8007214:	2104      	movs	r1, #4
 8007216:	6860      	ldr	r0, [r4, #4]
 8007218:	f7ff ff82 	bl	8007120 <std>
 800721c:	68a0      	ldr	r0, [r4, #8]
 800721e:	2201      	movs	r2, #1
 8007220:	2109      	movs	r1, #9
 8007222:	f7ff ff7d 	bl	8007120 <std>
 8007226:	68e0      	ldr	r0, [r4, #12]
 8007228:	2202      	movs	r2, #2
 800722a:	2112      	movs	r1, #18
 800722c:	f7ff ff78 	bl	8007120 <std>
 8007230:	2301      	movs	r3, #1
 8007232:	61a3      	str	r3, [r4, #24]
 8007234:	e7d2      	b.n	80071dc <__sinit+0xc>
 8007236:	bf00      	nop
 8007238:	08008728 	.word	0x08008728
 800723c:	08007169 	.word	0x08007169

08007240 <__sfp>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	4607      	mov	r7, r0
 8007244:	f7ff ffac 	bl	80071a0 <__sfp_lock_acquire>
 8007248:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <__sfp+0x84>)
 800724a:	681e      	ldr	r6, [r3, #0]
 800724c:	69b3      	ldr	r3, [r6, #24]
 800724e:	b913      	cbnz	r3, 8007256 <__sfp+0x16>
 8007250:	4630      	mov	r0, r6
 8007252:	f7ff ffbd 	bl	80071d0 <__sinit>
 8007256:	3648      	adds	r6, #72	; 0x48
 8007258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800725c:	3b01      	subs	r3, #1
 800725e:	d503      	bpl.n	8007268 <__sfp+0x28>
 8007260:	6833      	ldr	r3, [r6, #0]
 8007262:	b30b      	cbz	r3, 80072a8 <__sfp+0x68>
 8007264:	6836      	ldr	r6, [r6, #0]
 8007266:	e7f7      	b.n	8007258 <__sfp+0x18>
 8007268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800726c:	b9d5      	cbnz	r5, 80072a4 <__sfp+0x64>
 800726e:	4b16      	ldr	r3, [pc, #88]	; (80072c8 <__sfp+0x88>)
 8007270:	60e3      	str	r3, [r4, #12]
 8007272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007276:	6665      	str	r5, [r4, #100]	; 0x64
 8007278:	f000 f86c 	bl	8007354 <__retarget_lock_init_recursive>
 800727c:	f7ff ff96 	bl	80071ac <__sfp_lock_release>
 8007280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007288:	6025      	str	r5, [r4, #0]
 800728a:	61a5      	str	r5, [r4, #24]
 800728c:	2208      	movs	r2, #8
 800728e:	4629      	mov	r1, r5
 8007290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007294:	f000 f86f 	bl	8007376 <memset>
 8007298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800729c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072a0:	4620      	mov	r0, r4
 80072a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a4:	3468      	adds	r4, #104	; 0x68
 80072a6:	e7d9      	b.n	800725c <__sfp+0x1c>
 80072a8:	2104      	movs	r1, #4
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7ff ff62 	bl	8007174 <__sfmoreglue>
 80072b0:	4604      	mov	r4, r0
 80072b2:	6030      	str	r0, [r6, #0]
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1d5      	bne.n	8007264 <__sfp+0x24>
 80072b8:	f7ff ff78 	bl	80071ac <__sfp_lock_release>
 80072bc:	230c      	movs	r3, #12
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	e7ee      	b.n	80072a0 <__sfp+0x60>
 80072c2:	bf00      	nop
 80072c4:	08008728 	.word	0x08008728
 80072c8:	ffff0001 	.word	0xffff0001

080072cc <_fwalk_reent>:
 80072cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d0:	4606      	mov	r6, r0
 80072d2:	4688      	mov	r8, r1
 80072d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072d8:	2700      	movs	r7, #0
 80072da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072de:	f1b9 0901 	subs.w	r9, r9, #1
 80072e2:	d505      	bpl.n	80072f0 <_fwalk_reent+0x24>
 80072e4:	6824      	ldr	r4, [r4, #0]
 80072e6:	2c00      	cmp	r4, #0
 80072e8:	d1f7      	bne.n	80072da <_fwalk_reent+0xe>
 80072ea:	4638      	mov	r0, r7
 80072ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f0:	89ab      	ldrh	r3, [r5, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d907      	bls.n	8007306 <_fwalk_reent+0x3a>
 80072f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072fa:	3301      	adds	r3, #1
 80072fc:	d003      	beq.n	8007306 <_fwalk_reent+0x3a>
 80072fe:	4629      	mov	r1, r5
 8007300:	4630      	mov	r0, r6
 8007302:	47c0      	blx	r8
 8007304:	4307      	orrs	r7, r0
 8007306:	3568      	adds	r5, #104	; 0x68
 8007308:	e7e9      	b.n	80072de <_fwalk_reent+0x12>
	...

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4d0d      	ldr	r5, [pc, #52]	; (8007344 <__libc_init_array+0x38>)
 8007310:	4c0d      	ldr	r4, [pc, #52]	; (8007348 <__libc_init_array+0x3c>)
 8007312:	1b64      	subs	r4, r4, r5
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2600      	movs	r6, #0
 8007318:	42a6      	cmp	r6, r4
 800731a:	d109      	bne.n	8007330 <__libc_init_array+0x24>
 800731c:	4d0b      	ldr	r5, [pc, #44]	; (800734c <__libc_init_array+0x40>)
 800731e:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <__libc_init_array+0x44>)
 8007320:	f001 f8a4 	bl	800846c <_init>
 8007324:	1b64      	subs	r4, r4, r5
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	2600      	movs	r6, #0
 800732a:	42a6      	cmp	r6, r4
 800732c:	d105      	bne.n	800733a <__libc_init_array+0x2e>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	f855 3b04 	ldr.w	r3, [r5], #4
 8007334:	4798      	blx	r3
 8007336:	3601      	adds	r6, #1
 8007338:	e7ee      	b.n	8007318 <__libc_init_array+0xc>
 800733a:	f855 3b04 	ldr.w	r3, [r5], #4
 800733e:	4798      	blx	r3
 8007340:	3601      	adds	r6, #1
 8007342:	e7f2      	b.n	800732a <__libc_init_array+0x1e>
 8007344:	08008868 	.word	0x08008868
 8007348:	08008868 	.word	0x08008868
 800734c:	08008868 	.word	0x08008868
 8007350:	0800886c 	.word	0x0800886c

08007354 <__retarget_lock_init_recursive>:
 8007354:	4770      	bx	lr

08007356 <__retarget_lock_acquire_recursive>:
 8007356:	4770      	bx	lr

08007358 <__retarget_lock_release_recursive>:
 8007358:	4770      	bx	lr

0800735a <memcpy>:
 800735a:	440a      	add	r2, r1
 800735c:	4291      	cmp	r1, r2
 800735e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007362:	d100      	bne.n	8007366 <memcpy+0xc>
 8007364:	4770      	bx	lr
 8007366:	b510      	push	{r4, lr}
 8007368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800736c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007370:	4291      	cmp	r1, r2
 8007372:	d1f9      	bne.n	8007368 <memcpy+0xe>
 8007374:	bd10      	pop	{r4, pc}

08007376 <memset>:
 8007376:	4402      	add	r2, r0
 8007378:	4603      	mov	r3, r0
 800737a:	4293      	cmp	r3, r2
 800737c:	d100      	bne.n	8007380 <memset+0xa>
 800737e:	4770      	bx	lr
 8007380:	f803 1b01 	strb.w	r1, [r3], #1
 8007384:	e7f9      	b.n	800737a <memset+0x4>
	...

08007388 <sbrk_aligned>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4e0e      	ldr	r6, [pc, #56]	; (80073c4 <sbrk_aligned+0x3c>)
 800738c:	460c      	mov	r4, r1
 800738e:	6831      	ldr	r1, [r6, #0]
 8007390:	4605      	mov	r5, r0
 8007392:	b911      	cbnz	r1, 800739a <sbrk_aligned+0x12>
 8007394:	f000 f96c 	bl	8007670 <_sbrk_r>
 8007398:	6030      	str	r0, [r6, #0]
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	f000 f967 	bl	8007670 <_sbrk_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d00a      	beq.n	80073bc <sbrk_aligned+0x34>
 80073a6:	1cc4      	adds	r4, r0, #3
 80073a8:	f024 0403 	bic.w	r4, r4, #3
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d007      	beq.n	80073c0 <sbrk_aligned+0x38>
 80073b0:	1a21      	subs	r1, r4, r0
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 f95c 	bl	8007670 <_sbrk_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d101      	bne.n	80073c0 <sbrk_aligned+0x38>
 80073bc:	f04f 34ff 	mov.w	r4, #4294967295
 80073c0:	4620      	mov	r0, r4
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	20004698 	.word	0x20004698

080073c8 <_malloc_r>:
 80073c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4607      	mov	r7, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d905      	bls.n	80073f0 <_malloc_r+0x28>
 80073e4:	230c      	movs	r3, #12
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	2600      	movs	r6, #0
 80073ea:	4630      	mov	r0, r6
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	4e2e      	ldr	r6, [pc, #184]	; (80074ac <_malloc_r+0xe4>)
 80073f2:	f000 fc6d 	bl	8007cd0 <__malloc_lock>
 80073f6:	6833      	ldr	r3, [r6, #0]
 80073f8:	461c      	mov	r4, r3
 80073fa:	bb34      	cbnz	r4, 800744a <_malloc_r+0x82>
 80073fc:	4629      	mov	r1, r5
 80073fe:	4638      	mov	r0, r7
 8007400:	f7ff ffc2 	bl	8007388 <sbrk_aligned>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	4604      	mov	r4, r0
 8007408:	d14d      	bne.n	80074a6 <_malloc_r+0xde>
 800740a:	6834      	ldr	r4, [r6, #0]
 800740c:	4626      	mov	r6, r4
 800740e:	2e00      	cmp	r6, #0
 8007410:	d140      	bne.n	8007494 <_malloc_r+0xcc>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	4631      	mov	r1, r6
 8007416:	4638      	mov	r0, r7
 8007418:	eb04 0803 	add.w	r8, r4, r3
 800741c:	f000 f928 	bl	8007670 <_sbrk_r>
 8007420:	4580      	cmp	r8, r0
 8007422:	d13a      	bne.n	800749a <_malloc_r+0xd2>
 8007424:	6821      	ldr	r1, [r4, #0]
 8007426:	3503      	adds	r5, #3
 8007428:	1a6d      	subs	r5, r5, r1
 800742a:	f025 0503 	bic.w	r5, r5, #3
 800742e:	3508      	adds	r5, #8
 8007430:	2d0c      	cmp	r5, #12
 8007432:	bf38      	it	cc
 8007434:	250c      	movcc	r5, #12
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ffa5 	bl	8007388 <sbrk_aligned>
 800743e:	3001      	adds	r0, #1
 8007440:	d02b      	beq.n	800749a <_malloc_r+0xd2>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	442b      	add	r3, r5
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	e00e      	b.n	8007468 <_malloc_r+0xa0>
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	1b52      	subs	r2, r2, r5
 800744e:	d41e      	bmi.n	800748e <_malloc_r+0xc6>
 8007450:	2a0b      	cmp	r2, #11
 8007452:	d916      	bls.n	8007482 <_malloc_r+0xba>
 8007454:	1961      	adds	r1, r4, r5
 8007456:	42a3      	cmp	r3, r4
 8007458:	6025      	str	r5, [r4, #0]
 800745a:	bf18      	it	ne
 800745c:	6059      	strne	r1, [r3, #4]
 800745e:	6863      	ldr	r3, [r4, #4]
 8007460:	bf08      	it	eq
 8007462:	6031      	streq	r1, [r6, #0]
 8007464:	5162      	str	r2, [r4, r5]
 8007466:	604b      	str	r3, [r1, #4]
 8007468:	4638      	mov	r0, r7
 800746a:	f104 060b 	add.w	r6, r4, #11
 800746e:	f000 fc35 	bl	8007cdc <__malloc_unlock>
 8007472:	f026 0607 	bic.w	r6, r6, #7
 8007476:	1d23      	adds	r3, r4, #4
 8007478:	1af2      	subs	r2, r6, r3
 800747a:	d0b6      	beq.n	80073ea <_malloc_r+0x22>
 800747c:	1b9b      	subs	r3, r3, r6
 800747e:	50a3      	str	r3, [r4, r2]
 8007480:	e7b3      	b.n	80073ea <_malloc_r+0x22>
 8007482:	6862      	ldr	r2, [r4, #4]
 8007484:	42a3      	cmp	r3, r4
 8007486:	bf0c      	ite	eq
 8007488:	6032      	streq	r2, [r6, #0]
 800748a:	605a      	strne	r2, [r3, #4]
 800748c:	e7ec      	b.n	8007468 <_malloc_r+0xa0>
 800748e:	4623      	mov	r3, r4
 8007490:	6864      	ldr	r4, [r4, #4]
 8007492:	e7b2      	b.n	80073fa <_malloc_r+0x32>
 8007494:	4634      	mov	r4, r6
 8007496:	6876      	ldr	r6, [r6, #4]
 8007498:	e7b9      	b.n	800740e <_malloc_r+0x46>
 800749a:	230c      	movs	r3, #12
 800749c:	603b      	str	r3, [r7, #0]
 800749e:	4638      	mov	r0, r7
 80074a0:	f000 fc1c 	bl	8007cdc <__malloc_unlock>
 80074a4:	e7a1      	b.n	80073ea <_malloc_r+0x22>
 80074a6:	6025      	str	r5, [r4, #0]
 80074a8:	e7de      	b.n	8007468 <_malloc_r+0xa0>
 80074aa:	bf00      	nop
 80074ac:	20004694 	.word	0x20004694

080074b0 <_puts_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	4605      	mov	r5, r0
 80074b6:	b118      	cbz	r0, 80074c0 <_puts_r+0x10>
 80074b8:	6983      	ldr	r3, [r0, #24]
 80074ba:	b90b      	cbnz	r3, 80074c0 <_puts_r+0x10>
 80074bc:	f7ff fe88 	bl	80071d0 <__sinit>
 80074c0:	69ab      	ldr	r3, [r5, #24]
 80074c2:	68ac      	ldr	r4, [r5, #8]
 80074c4:	b913      	cbnz	r3, 80074cc <_puts_r+0x1c>
 80074c6:	4628      	mov	r0, r5
 80074c8:	f7ff fe82 	bl	80071d0 <__sinit>
 80074cc:	4b2c      	ldr	r3, [pc, #176]	; (8007580 <_puts_r+0xd0>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	d120      	bne.n	8007514 <_puts_r+0x64>
 80074d2:	686c      	ldr	r4, [r5, #4]
 80074d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d6:	07db      	lsls	r3, r3, #31
 80074d8:	d405      	bmi.n	80074e6 <_puts_r+0x36>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	0598      	lsls	r0, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_puts_r+0x36>
 80074e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e2:	f7ff ff38 	bl	8007356 <__retarget_lock_acquire_recursive>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	0719      	lsls	r1, r3, #28
 80074ea:	d51d      	bpl.n	8007528 <_puts_r+0x78>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	b1db      	cbz	r3, 8007528 <_puts_r+0x78>
 80074f0:	3e01      	subs	r6, #1
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074f8:	3b01      	subs	r3, #1
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	bb39      	cbnz	r1, 800754e <_puts_r+0x9e>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da38      	bge.n	8007574 <_puts_r+0xc4>
 8007502:	4622      	mov	r2, r4
 8007504:	210a      	movs	r1, #10
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f9c6 	bl	8007898 <__swbuf_r>
 800750c:	3001      	adds	r0, #1
 800750e:	d011      	beq.n	8007534 <_puts_r+0x84>
 8007510:	250a      	movs	r5, #10
 8007512:	e011      	b.n	8007538 <_puts_r+0x88>
 8007514:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <_puts_r+0xd4>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d101      	bne.n	800751e <_puts_r+0x6e>
 800751a:	68ac      	ldr	r4, [r5, #8]
 800751c:	e7da      	b.n	80074d4 <_puts_r+0x24>
 800751e:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <_puts_r+0xd8>)
 8007520:	429c      	cmp	r4, r3
 8007522:	bf08      	it	eq
 8007524:	68ec      	ldreq	r4, [r5, #12]
 8007526:	e7d5      	b.n	80074d4 <_puts_r+0x24>
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fa18 	bl	8007960 <__swsetup_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	d0dd      	beq.n	80074f0 <_puts_r+0x40>
 8007534:	f04f 35ff 	mov.w	r5, #4294967295
 8007538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753a:	07da      	lsls	r2, r3, #31
 800753c:	d405      	bmi.n	800754a <_puts_r+0x9a>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	059b      	lsls	r3, r3, #22
 8007542:	d402      	bmi.n	800754a <_puts_r+0x9a>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f7ff ff07 	bl	8007358 <__retarget_lock_release_recursive>
 800754a:	4628      	mov	r0, r5
 800754c:	bd70      	pop	{r4, r5, r6, pc}
 800754e:	2b00      	cmp	r3, #0
 8007550:	da04      	bge.n	800755c <_puts_r+0xac>
 8007552:	69a2      	ldr	r2, [r4, #24]
 8007554:	429a      	cmp	r2, r3
 8007556:	dc06      	bgt.n	8007566 <_puts_r+0xb6>
 8007558:	290a      	cmp	r1, #10
 800755a:	d004      	beq.n	8007566 <_puts_r+0xb6>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	7019      	strb	r1, [r3, #0]
 8007564:	e7c5      	b.n	80074f2 <_puts_r+0x42>
 8007566:	4622      	mov	r2, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 f995 	bl	8007898 <__swbuf_r>
 800756e:	3001      	adds	r0, #1
 8007570:	d1bf      	bne.n	80074f2 <_puts_r+0x42>
 8007572:	e7df      	b.n	8007534 <_puts_r+0x84>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	250a      	movs	r5, #10
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	6022      	str	r2, [r4, #0]
 800757c:	701d      	strb	r5, [r3, #0]
 800757e:	e7db      	b.n	8007538 <_puts_r+0x88>
 8007580:	080086e8 	.word	0x080086e8
 8007584:	08008708 	.word	0x08008708
 8007588:	080086c8 	.word	0x080086c8

0800758c <puts>:
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <puts+0xc>)
 800758e:	4601      	mov	r1, r0
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f7ff bf8d 	b.w	80074b0 <_puts_r>
 8007596:	bf00      	nop
 8007598:	20000014 	.word	0x20000014

0800759c <cleanup_glue>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	460c      	mov	r4, r1
 80075a0:	6809      	ldr	r1, [r1, #0]
 80075a2:	4605      	mov	r5, r0
 80075a4:	b109      	cbz	r1, 80075aa <cleanup_glue+0xe>
 80075a6:	f7ff fff9 	bl	800759c <cleanup_glue>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4628      	mov	r0, r5
 80075ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b2:	f000 bb99 	b.w	8007ce8 <_free_r>
	...

080075b8 <_reclaim_reent>:
 80075b8:	4b2c      	ldr	r3, [pc, #176]	; (800766c <_reclaim_reent+0xb4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4283      	cmp	r3, r0
 80075be:	b570      	push	{r4, r5, r6, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	d051      	beq.n	8007668 <_reclaim_reent+0xb0>
 80075c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075c6:	b143      	cbz	r3, 80075da <_reclaim_reent+0x22>
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d14a      	bne.n	8007664 <_reclaim_reent+0xac>
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	b111      	cbz	r1, 80075da <_reclaim_reent+0x22>
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fb87 	bl	8007ce8 <_free_r>
 80075da:	6961      	ldr	r1, [r4, #20]
 80075dc:	b111      	cbz	r1, 80075e4 <_reclaim_reent+0x2c>
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 fb82 	bl	8007ce8 <_free_r>
 80075e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075e6:	b111      	cbz	r1, 80075ee <_reclaim_reent+0x36>
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fb7d 	bl	8007ce8 <_free_r>
 80075ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80075f0:	b111      	cbz	r1, 80075f8 <_reclaim_reent+0x40>
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fb78 	bl	8007ce8 <_free_r>
 80075f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80075fa:	b111      	cbz	r1, 8007602 <_reclaim_reent+0x4a>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 fb73 	bl	8007ce8 <_free_r>
 8007602:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007604:	b111      	cbz	r1, 800760c <_reclaim_reent+0x54>
 8007606:	4620      	mov	r0, r4
 8007608:	f000 fb6e 	bl	8007ce8 <_free_r>
 800760c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800760e:	b111      	cbz	r1, 8007616 <_reclaim_reent+0x5e>
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fb69 	bl	8007ce8 <_free_r>
 8007616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007618:	b111      	cbz	r1, 8007620 <_reclaim_reent+0x68>
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fb64 	bl	8007ce8 <_free_r>
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	b111      	cbz	r1, 800762a <_reclaim_reent+0x72>
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fb5f 	bl	8007ce8 <_free_r>
 800762a:	69a3      	ldr	r3, [r4, #24]
 800762c:	b1e3      	cbz	r3, 8007668 <_reclaim_reent+0xb0>
 800762e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007630:	4620      	mov	r0, r4
 8007632:	4798      	blx	r3
 8007634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007636:	b1b9      	cbz	r1, 8007668 <_reclaim_reent+0xb0>
 8007638:	4620      	mov	r0, r4
 800763a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800763e:	f7ff bfad 	b.w	800759c <cleanup_glue>
 8007642:	5949      	ldr	r1, [r1, r5]
 8007644:	b941      	cbnz	r1, 8007658 <_reclaim_reent+0xa0>
 8007646:	3504      	adds	r5, #4
 8007648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800764a:	2d80      	cmp	r5, #128	; 0x80
 800764c:	68d9      	ldr	r1, [r3, #12]
 800764e:	d1f8      	bne.n	8007642 <_reclaim_reent+0x8a>
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fb49 	bl	8007ce8 <_free_r>
 8007656:	e7ba      	b.n	80075ce <_reclaim_reent+0x16>
 8007658:	680e      	ldr	r6, [r1, #0]
 800765a:	4620      	mov	r0, r4
 800765c:	f000 fb44 	bl	8007ce8 <_free_r>
 8007660:	4631      	mov	r1, r6
 8007662:	e7ef      	b.n	8007644 <_reclaim_reent+0x8c>
 8007664:	2500      	movs	r5, #0
 8007666:	e7ef      	b.n	8007648 <_reclaim_reent+0x90>
 8007668:	bd70      	pop	{r4, r5, r6, pc}
 800766a:	bf00      	nop
 800766c:	20000014 	.word	0x20000014

08007670 <_sbrk_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d06      	ldr	r5, [pc, #24]	; (800768c <_sbrk_r+0x1c>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	f7fa f994 	bl	80019a8 <_sbrk>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_sbrk_r+0x1a>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_sbrk_r+0x1a>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	2000469c 	.word	0x2000469c

08007690 <sniprintf>:
 8007690:	b40c      	push	{r2, r3}
 8007692:	b530      	push	{r4, r5, lr}
 8007694:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <sniprintf+0x64>)
 8007696:	1e0c      	subs	r4, r1, #0
 8007698:	681d      	ldr	r5, [r3, #0]
 800769a:	b09d      	sub	sp, #116	; 0x74
 800769c:	da08      	bge.n	80076b0 <sniprintf+0x20>
 800769e:	238b      	movs	r3, #139	; 0x8b
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	b01d      	add	sp, #116	; 0x74
 80076a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ac:	b002      	add	sp, #8
 80076ae:	4770      	bx	lr
 80076b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076b8:	bf14      	ite	ne
 80076ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076be:	4623      	moveq	r3, r4
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076c8:	9002      	str	r0, [sp, #8]
 80076ca:	9006      	str	r0, [sp, #24]
 80076cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076d2:	ab21      	add	r3, sp, #132	; 0x84
 80076d4:	a902      	add	r1, sp, #8
 80076d6:	4628      	mov	r0, r5
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	f000 fbad 	bl	8007e38 <_svfiprintf_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	bfbc      	itt	lt
 80076e2:	238b      	movlt	r3, #139	; 0x8b
 80076e4:	602b      	strlt	r3, [r5, #0]
 80076e6:	2c00      	cmp	r4, #0
 80076e8:	d0dd      	beq.n	80076a6 <sniprintf+0x16>
 80076ea:	9b02      	ldr	r3, [sp, #8]
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e7d9      	b.n	80076a6 <sniprintf+0x16>
 80076f2:	bf00      	nop
 80076f4:	20000014 	.word	0x20000014

080076f8 <__sread>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 fe2e 	bl	8008360 <_read_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	bfab      	itete	ge
 8007708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800770a:	89a3      	ldrhlt	r3, [r4, #12]
 800770c:	181b      	addge	r3, r3, r0
 800770e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007712:	bfac      	ite	ge
 8007714:	6563      	strge	r3, [r4, #84]	; 0x54
 8007716:	81a3      	strhlt	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__swrite>:
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	05db      	lsls	r3, r3, #23
 8007724:	4605      	mov	r5, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4616      	mov	r6, r2
 800772a:	d505      	bpl.n	8007738 <__swrite+0x1e>
 800772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007730:	2302      	movs	r3, #2
 8007732:	2200      	movs	r2, #0
 8007734:	f000 fa54 	bl	8007be0 <_lseek_r>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	4632      	mov	r2, r6
 8007746:	463b      	mov	r3, r7
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	f000 b8f5 	b.w	800793c <_write_r>

08007752 <__sseek>:
 8007752:	b510      	push	{r4, lr}
 8007754:	460c      	mov	r4, r1
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 fa41 	bl	8007be0 <_lseek_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	bf15      	itete	ne
 8007764:	6560      	strne	r0, [r4, #84]	; 0x54
 8007766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800776a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800776e:	81a3      	strheq	r3, [r4, #12]
 8007770:	bf18      	it	ne
 8007772:	81a3      	strhne	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__sclose>:
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f000 b95f 	b.w	8007a3c <_close_r>
	...

08007780 <_strtol_l.constprop.0>:
 8007780:	2b01      	cmp	r3, #1
 8007782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007786:	d001      	beq.n	800778c <_strtol_l.constprop.0+0xc>
 8007788:	2b24      	cmp	r3, #36	; 0x24
 800778a:	d906      	bls.n	800779a <_strtol_l.constprop.0+0x1a>
 800778c:	f7ff fcc2 	bl	8007114 <__errno>
 8007790:	2316      	movs	r3, #22
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	2000      	movs	r0, #0
 8007796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007880 <_strtol_l.constprop.0+0x100>
 800779e:	460d      	mov	r5, r1
 80077a0:	462e      	mov	r6, r5
 80077a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80077aa:	f017 0708 	ands.w	r7, r7, #8
 80077ae:	d1f7      	bne.n	80077a0 <_strtol_l.constprop.0+0x20>
 80077b0:	2c2d      	cmp	r4, #45	; 0x2d
 80077b2:	d132      	bne.n	800781a <_strtol_l.constprop.0+0x9a>
 80077b4:	782c      	ldrb	r4, [r5, #0]
 80077b6:	2701      	movs	r7, #1
 80077b8:	1cb5      	adds	r5, r6, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d05b      	beq.n	8007876 <_strtol_l.constprop.0+0xf6>
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d109      	bne.n	80077d6 <_strtol_l.constprop.0+0x56>
 80077c2:	2c30      	cmp	r4, #48	; 0x30
 80077c4:	d107      	bne.n	80077d6 <_strtol_l.constprop.0+0x56>
 80077c6:	782c      	ldrb	r4, [r5, #0]
 80077c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077cc:	2c58      	cmp	r4, #88	; 0x58
 80077ce:	d14d      	bne.n	800786c <_strtol_l.constprop.0+0xec>
 80077d0:	786c      	ldrb	r4, [r5, #1]
 80077d2:	2310      	movs	r3, #16
 80077d4:	3502      	adds	r5, #2
 80077d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077da:	f108 38ff 	add.w	r8, r8, #4294967295
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80077e6:	4666      	mov	r6, ip
 80077e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80077ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80077f0:	f1be 0f09 	cmp.w	lr, #9
 80077f4:	d816      	bhi.n	8007824 <_strtol_l.constprop.0+0xa4>
 80077f6:	4674      	mov	r4, lr
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	dd24      	ble.n	8007846 <_strtol_l.constprop.0+0xc6>
 80077fc:	f1bc 0f00 	cmp.w	ip, #0
 8007800:	db1e      	blt.n	8007840 <_strtol_l.constprop.0+0xc0>
 8007802:	45b1      	cmp	r9, r6
 8007804:	d31c      	bcc.n	8007840 <_strtol_l.constprop.0+0xc0>
 8007806:	d101      	bne.n	800780c <_strtol_l.constprop.0+0x8c>
 8007808:	45a2      	cmp	sl, r4
 800780a:	db19      	blt.n	8007840 <_strtol_l.constprop.0+0xc0>
 800780c:	fb06 4603 	mla	r6, r6, r3, r4
 8007810:	f04f 0c01 	mov.w	ip, #1
 8007814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007818:	e7e8      	b.n	80077ec <_strtol_l.constprop.0+0x6c>
 800781a:	2c2b      	cmp	r4, #43	; 0x2b
 800781c:	bf04      	itt	eq
 800781e:	782c      	ldrbeq	r4, [r5, #0]
 8007820:	1cb5      	addeq	r5, r6, #2
 8007822:	e7ca      	b.n	80077ba <_strtol_l.constprop.0+0x3a>
 8007824:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007828:	f1be 0f19 	cmp.w	lr, #25
 800782c:	d801      	bhi.n	8007832 <_strtol_l.constprop.0+0xb2>
 800782e:	3c37      	subs	r4, #55	; 0x37
 8007830:	e7e2      	b.n	80077f8 <_strtol_l.constprop.0+0x78>
 8007832:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007836:	f1be 0f19 	cmp.w	lr, #25
 800783a:	d804      	bhi.n	8007846 <_strtol_l.constprop.0+0xc6>
 800783c:	3c57      	subs	r4, #87	; 0x57
 800783e:	e7db      	b.n	80077f8 <_strtol_l.constprop.0+0x78>
 8007840:	f04f 3cff 	mov.w	ip, #4294967295
 8007844:	e7e6      	b.n	8007814 <_strtol_l.constprop.0+0x94>
 8007846:	f1bc 0f00 	cmp.w	ip, #0
 800784a:	da05      	bge.n	8007858 <_strtol_l.constprop.0+0xd8>
 800784c:	2322      	movs	r3, #34	; 0x22
 800784e:	6003      	str	r3, [r0, #0]
 8007850:	4646      	mov	r6, r8
 8007852:	b942      	cbnz	r2, 8007866 <_strtol_l.constprop.0+0xe6>
 8007854:	4630      	mov	r0, r6
 8007856:	e79e      	b.n	8007796 <_strtol_l.constprop.0+0x16>
 8007858:	b107      	cbz	r7, 800785c <_strtol_l.constprop.0+0xdc>
 800785a:	4276      	negs	r6, r6
 800785c:	2a00      	cmp	r2, #0
 800785e:	d0f9      	beq.n	8007854 <_strtol_l.constprop.0+0xd4>
 8007860:	f1bc 0f00 	cmp.w	ip, #0
 8007864:	d000      	beq.n	8007868 <_strtol_l.constprop.0+0xe8>
 8007866:	1e69      	subs	r1, r5, #1
 8007868:	6011      	str	r1, [r2, #0]
 800786a:	e7f3      	b.n	8007854 <_strtol_l.constprop.0+0xd4>
 800786c:	2430      	movs	r4, #48	; 0x30
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1b1      	bne.n	80077d6 <_strtol_l.constprop.0+0x56>
 8007872:	2308      	movs	r3, #8
 8007874:	e7af      	b.n	80077d6 <_strtol_l.constprop.0+0x56>
 8007876:	2c30      	cmp	r4, #48	; 0x30
 8007878:	d0a5      	beq.n	80077c6 <_strtol_l.constprop.0+0x46>
 800787a:	230a      	movs	r3, #10
 800787c:	e7ab      	b.n	80077d6 <_strtol_l.constprop.0+0x56>
 800787e:	bf00      	nop
 8007880:	0800872d 	.word	0x0800872d

08007884 <strtol>:
 8007884:	4613      	mov	r3, r2
 8007886:	460a      	mov	r2, r1
 8007888:	4601      	mov	r1, r0
 800788a:	4802      	ldr	r0, [pc, #8]	; (8007894 <strtol+0x10>)
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f7ff bf77 	b.w	8007780 <_strtol_l.constprop.0>
 8007892:	bf00      	nop
 8007894:	20000014 	.word	0x20000014

08007898 <__swbuf_r>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	460e      	mov	r6, r1
 800789c:	4614      	mov	r4, r2
 800789e:	4605      	mov	r5, r0
 80078a0:	b118      	cbz	r0, 80078aa <__swbuf_r+0x12>
 80078a2:	6983      	ldr	r3, [r0, #24]
 80078a4:	b90b      	cbnz	r3, 80078aa <__swbuf_r+0x12>
 80078a6:	f7ff fc93 	bl	80071d0 <__sinit>
 80078aa:	4b21      	ldr	r3, [pc, #132]	; (8007930 <__swbuf_r+0x98>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	d12b      	bne.n	8007908 <__swbuf_r+0x70>
 80078b0:	686c      	ldr	r4, [r5, #4]
 80078b2:	69a3      	ldr	r3, [r4, #24]
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	071a      	lsls	r2, r3, #28
 80078ba:	d52f      	bpl.n	800791c <__swbuf_r+0x84>
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	b36b      	cbz	r3, 800791c <__swbuf_r+0x84>
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	1ac0      	subs	r0, r0, r3
 80078c6:	6963      	ldr	r3, [r4, #20]
 80078c8:	b2f6      	uxtb	r6, r6
 80078ca:	4283      	cmp	r3, r0
 80078cc:	4637      	mov	r7, r6
 80078ce:	dc04      	bgt.n	80078da <__swbuf_r+0x42>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f948 	bl	8007b68 <_fflush_r>
 80078d8:	bb30      	cbnz	r0, 8007928 <__swbuf_r+0x90>
 80078da:	68a3      	ldr	r3, [r4, #8]
 80078dc:	3b01      	subs	r3, #1
 80078de:	60a3      	str	r3, [r4, #8]
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	701e      	strb	r6, [r3, #0]
 80078e8:	6963      	ldr	r3, [r4, #20]
 80078ea:	3001      	adds	r0, #1
 80078ec:	4283      	cmp	r3, r0
 80078ee:	d004      	beq.n	80078fa <__swbuf_r+0x62>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d506      	bpl.n	8007904 <__swbuf_r+0x6c>
 80078f6:	2e0a      	cmp	r6, #10
 80078f8:	d104      	bne.n	8007904 <__swbuf_r+0x6c>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f933 	bl	8007b68 <_fflush_r>
 8007902:	b988      	cbnz	r0, 8007928 <__swbuf_r+0x90>
 8007904:	4638      	mov	r0, r7
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <__swbuf_r+0x9c>)
 800790a:	429c      	cmp	r4, r3
 800790c:	d101      	bne.n	8007912 <__swbuf_r+0x7a>
 800790e:	68ac      	ldr	r4, [r5, #8]
 8007910:	e7cf      	b.n	80078b2 <__swbuf_r+0x1a>
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <__swbuf_r+0xa0>)
 8007914:	429c      	cmp	r4, r3
 8007916:	bf08      	it	eq
 8007918:	68ec      	ldreq	r4, [r5, #12]
 800791a:	e7ca      	b.n	80078b2 <__swbuf_r+0x1a>
 800791c:	4621      	mov	r1, r4
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f81e 	bl	8007960 <__swsetup_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	d0cb      	beq.n	80078c0 <__swbuf_r+0x28>
 8007928:	f04f 37ff 	mov.w	r7, #4294967295
 800792c:	e7ea      	b.n	8007904 <__swbuf_r+0x6c>
 800792e:	bf00      	nop
 8007930:	080086e8 	.word	0x080086e8
 8007934:	08008708 	.word	0x08008708
 8007938:	080086c8 	.word	0x080086c8

0800793c <_write_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	; (800795c <_write_r+0x20>)
 8007940:	4604      	mov	r4, r0
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	2200      	movs	r2, #0
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f7f9 ffdb 	bl	8001906 <_write>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_write_r+0x1e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_write_r+0x1e>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	2000469c 	.word	0x2000469c

08007960 <__swsetup_r>:
 8007960:	4b32      	ldr	r3, [pc, #200]	; (8007a2c <__swsetup_r+0xcc>)
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	681d      	ldr	r5, [r3, #0]
 8007966:	4606      	mov	r6, r0
 8007968:	460c      	mov	r4, r1
 800796a:	b125      	cbz	r5, 8007976 <__swsetup_r+0x16>
 800796c:	69ab      	ldr	r3, [r5, #24]
 800796e:	b913      	cbnz	r3, 8007976 <__swsetup_r+0x16>
 8007970:	4628      	mov	r0, r5
 8007972:	f7ff fc2d 	bl	80071d0 <__sinit>
 8007976:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <__swsetup_r+0xd0>)
 8007978:	429c      	cmp	r4, r3
 800797a:	d10f      	bne.n	800799c <__swsetup_r+0x3c>
 800797c:	686c      	ldr	r4, [r5, #4]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007984:	0719      	lsls	r1, r3, #28
 8007986:	d42c      	bmi.n	80079e2 <__swsetup_r+0x82>
 8007988:	06dd      	lsls	r5, r3, #27
 800798a:	d411      	bmi.n	80079b0 <__swsetup_r+0x50>
 800798c:	2309      	movs	r3, #9
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e03e      	b.n	8007a1a <__swsetup_r+0xba>
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <__swsetup_r+0xd4>)
 800799e:	429c      	cmp	r4, r3
 80079a0:	d101      	bne.n	80079a6 <__swsetup_r+0x46>
 80079a2:	68ac      	ldr	r4, [r5, #8]
 80079a4:	e7eb      	b.n	800797e <__swsetup_r+0x1e>
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <__swsetup_r+0xd8>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	bf08      	it	eq
 80079ac:	68ec      	ldreq	r4, [r5, #12]
 80079ae:	e7e6      	b.n	800797e <__swsetup_r+0x1e>
 80079b0:	0758      	lsls	r0, r3, #29
 80079b2:	d512      	bpl.n	80079da <__swsetup_r+0x7a>
 80079b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b6:	b141      	cbz	r1, 80079ca <__swsetup_r+0x6a>
 80079b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079bc:	4299      	cmp	r1, r3
 80079be:	d002      	beq.n	80079c6 <__swsetup_r+0x66>
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 f991 	bl	8007ce8 <_free_r>
 80079c6:	2300      	movs	r3, #0
 80079c8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	2300      	movs	r3, #0
 80079d4:	6063      	str	r3, [r4, #4]
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f043 0308 	orr.w	r3, r3, #8
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	b94b      	cbnz	r3, 80079fa <__swsetup_r+0x9a>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f0:	d003      	beq.n	80079fa <__swsetup_r+0x9a>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f92b 	bl	8007c50 <__smakebuf_r>
 80079fa:	89a0      	ldrh	r0, [r4, #12]
 80079fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a00:	f010 0301 	ands.w	r3, r0, #1
 8007a04:	d00a      	beq.n	8007a1c <__swsetup_r+0xbc>
 8007a06:	2300      	movs	r3, #0
 8007a08:	60a3      	str	r3, [r4, #8]
 8007a0a:	6963      	ldr	r3, [r4, #20]
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	61a3      	str	r3, [r4, #24]
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	b943      	cbnz	r3, 8007a26 <__swsetup_r+0xc6>
 8007a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a18:	d1ba      	bne.n	8007990 <__swsetup_r+0x30>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	0781      	lsls	r1, r0, #30
 8007a1e:	bf58      	it	pl
 8007a20:	6963      	ldrpl	r3, [r4, #20]
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	e7f4      	b.n	8007a10 <__swsetup_r+0xb0>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e7f7      	b.n	8007a1a <__swsetup_r+0xba>
 8007a2a:	bf00      	nop
 8007a2c:	20000014 	.word	0x20000014
 8007a30:	080086e8 	.word	0x080086e8
 8007a34:	08008708 	.word	0x08008708
 8007a38:	080086c8 	.word	0x080086c8

08007a3c <_close_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d06      	ldr	r5, [pc, #24]	; (8007a58 <_close_r+0x1c>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7f9 ff79 	bl	800193e <_close>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_close_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_close_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	2000469c 	.word	0x2000469c

08007a5c <__sflush_r>:
 8007a5c:	898a      	ldrh	r2, [r1, #12]
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	4605      	mov	r5, r0
 8007a64:	0710      	lsls	r0, r2, #28
 8007a66:	460c      	mov	r4, r1
 8007a68:	d458      	bmi.n	8007b1c <__sflush_r+0xc0>
 8007a6a:	684b      	ldr	r3, [r1, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc05      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dc02      	bgt.n	8007a7c <__sflush_r+0x20>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d0f9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a88:	682f      	ldr	r7, [r5, #0]
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	d032      	beq.n	8007af4 <__sflush_r+0x98>
 8007a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	075a      	lsls	r2, r3, #29
 8007a94:	d505      	bpl.n	8007aa2 <__sflush_r+0x46>
 8007a96:	6863      	ldr	r3, [r4, #4]
 8007a98:	1ac0      	subs	r0, r0, r3
 8007a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9c:	b10b      	cbz	r3, 8007aa2 <__sflush_r+0x46>
 8007a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa0:	1ac0      	subs	r0, r0, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa8:	6a21      	ldr	r1, [r4, #32]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b0      	blx	r6
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	d106      	bne.n	8007ac2 <__sflush_r+0x66>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	291d      	cmp	r1, #29
 8007ab8:	d82c      	bhi.n	8007b14 <__sflush_r+0xb8>
 8007aba:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <__sflush_r+0x108>)
 8007abc:	40ca      	lsrs	r2, r1
 8007abe:	07d6      	lsls	r6, r2, #31
 8007ac0:	d528      	bpl.n	8007b14 <__sflush_r+0xb8>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6062      	str	r2, [r4, #4]
 8007ac6:	04d9      	lsls	r1, r3, #19
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	d504      	bpl.n	8007ad8 <__sflush_r+0x7c>
 8007ace:	1c42      	adds	r2, r0, #1
 8007ad0:	d101      	bne.n	8007ad6 <__sflush_r+0x7a>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b903      	cbnz	r3, 8007ad8 <__sflush_r+0x7c>
 8007ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ada:	602f      	str	r7, [r5, #0]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d0ca      	beq.n	8007a76 <__sflush_r+0x1a>
 8007ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d002      	beq.n	8007aee <__sflush_r+0x92>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 f8fd 	bl	8007ce8 <_free_r>
 8007aee:	2000      	movs	r0, #0
 8007af0:	6360      	str	r0, [r4, #52]	; 0x34
 8007af2:	e7c1      	b.n	8007a78 <__sflush_r+0x1c>
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	1c41      	adds	r1, r0, #1
 8007afe:	d1c7      	bne.n	8007a90 <__sflush_r+0x34>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c4      	beq.n	8007a90 <__sflush_r+0x34>
 8007b06:	2b1d      	cmp	r3, #29
 8007b08:	d001      	beq.n	8007b0e <__sflush_r+0xb2>
 8007b0a:	2b16      	cmp	r3, #22
 8007b0c:	d101      	bne.n	8007b12 <__sflush_r+0xb6>
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	e7b1      	b.n	8007a76 <__sflush_r+0x1a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	e7ad      	b.n	8007a78 <__sflush_r+0x1c>
 8007b1c:	690f      	ldr	r7, [r1, #16]
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d0a9      	beq.n	8007a76 <__sflush_r+0x1a>
 8007b22:	0793      	lsls	r3, r2, #30
 8007b24:	680e      	ldr	r6, [r1, #0]
 8007b26:	bf08      	it	eq
 8007b28:	694b      	ldreq	r3, [r1, #20]
 8007b2a:	600f      	str	r7, [r1, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	2300      	movne	r3, #0
 8007b30:	eba6 0807 	sub.w	r8, r6, r7
 8007b34:	608b      	str	r3, [r1, #8]
 8007b36:	f1b8 0f00 	cmp.w	r8, #0
 8007b3a:	dd9c      	ble.n	8007a76 <__sflush_r+0x1a>
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b40:	4643      	mov	r3, r8
 8007b42:	463a      	mov	r2, r7
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b0      	blx	r6
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	dc06      	bgt.n	8007b5a <__sflush_r+0xfe>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e78e      	b.n	8007a78 <__sflush_r+0x1c>
 8007b5a:	4407      	add	r7, r0
 8007b5c:	eba8 0800 	sub.w	r8, r8, r0
 8007b60:	e7e9      	b.n	8007b36 <__sflush_r+0xda>
 8007b62:	bf00      	nop
 8007b64:	20400001 	.word	0x20400001

08007b68 <_fflush_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b913      	cbnz	r3, 8007b78 <_fflush_r+0x10>
 8007b72:	2500      	movs	r5, #0
 8007b74:	4628      	mov	r0, r5
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	b118      	cbz	r0, 8007b82 <_fflush_r+0x1a>
 8007b7a:	6983      	ldr	r3, [r0, #24]
 8007b7c:	b90b      	cbnz	r3, 8007b82 <_fflush_r+0x1a>
 8007b7e:	f7ff fb27 	bl	80071d0 <__sinit>
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <_fflush_r+0x6c>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d11b      	bne.n	8007bc0 <_fflush_r+0x58>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <_fflush_r+0xa>
 8007b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b94:	07d0      	lsls	r0, r2, #31
 8007b96:	d404      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b98:	0599      	lsls	r1, r3, #22
 8007b9a:	d402      	bmi.n	8007ba2 <_fflush_r+0x3a>
 8007b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9e:	f7ff fbda 	bl	8007356 <__retarget_lock_acquire_recursive>
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	f7ff ff59 	bl	8007a5c <__sflush_r>
 8007baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bac:	07da      	lsls	r2, r3, #31
 8007bae:	4605      	mov	r5, r0
 8007bb0:	d4e0      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	059b      	lsls	r3, r3, #22
 8007bb6:	d4dd      	bmi.n	8007b74 <_fflush_r+0xc>
 8007bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bba:	f7ff fbcd 	bl	8007358 <__retarget_lock_release_recursive>
 8007bbe:	e7d9      	b.n	8007b74 <_fflush_r+0xc>
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <_fflush_r+0x70>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d101      	bne.n	8007bca <_fflush_r+0x62>
 8007bc6:	68ac      	ldr	r4, [r5, #8]
 8007bc8:	e7df      	b.n	8007b8a <_fflush_r+0x22>
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <_fflush_r+0x74>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	bf08      	it	eq
 8007bd0:	68ec      	ldreq	r4, [r5, #12]
 8007bd2:	e7da      	b.n	8007b8a <_fflush_r+0x22>
 8007bd4:	080086e8 	.word	0x080086e8
 8007bd8:	08008708 	.word	0x08008708
 8007bdc:	080086c8 	.word	0x080086c8

08007be0 <_lseek_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_lseek_r+0x20>)
 8007be4:	4604      	mov	r4, r0
 8007be6:	4608      	mov	r0, r1
 8007be8:	4611      	mov	r1, r2
 8007bea:	2200      	movs	r2, #0
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7f9 fecc 	bl	800198c <_lseek>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_lseek_r+0x1e>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_lseek_r+0x1e>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	2000469c 	.word	0x2000469c

08007c04 <__swhatbuf_r>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	460e      	mov	r6, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	b096      	sub	sp, #88	; 0x58
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	da08      	bge.n	8007c28 <__swhatbuf_r+0x24>
 8007c16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	602a      	str	r2, [r5, #0]
 8007c1e:	061a      	lsls	r2, r3, #24
 8007c20:	d410      	bmi.n	8007c44 <__swhatbuf_r+0x40>
 8007c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c26:	e00e      	b.n	8007c46 <__swhatbuf_r+0x42>
 8007c28:	466a      	mov	r2, sp
 8007c2a:	f000 fbab 	bl	8008384 <_fstat_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	dbf1      	blt.n	8007c16 <__swhatbuf_r+0x12>
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c3c:	425a      	negs	r2, r3
 8007c3e:	415a      	adcs	r2, r3
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	e7ee      	b.n	8007c22 <__swhatbuf_r+0x1e>
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	2000      	movs	r0, #0
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	b016      	add	sp, #88	; 0x58
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c50 <__smakebuf_r>:
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c54:	079d      	lsls	r5, r3, #30
 8007c56:	4606      	mov	r6, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	d507      	bpl.n	8007c6c <__smakebuf_r+0x1c>
 8007c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	2301      	movs	r3, #1
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	b002      	add	sp, #8
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	ab01      	add	r3, sp, #4
 8007c6e:	466a      	mov	r2, sp
 8007c70:	f7ff ffc8 	bl	8007c04 <__swhatbuf_r>
 8007c74:	9900      	ldr	r1, [sp, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff fba5 	bl	80073c8 <_malloc_r>
 8007c7e:	b948      	cbnz	r0, 8007c94 <__smakebuf_r+0x44>
 8007c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d4ef      	bmi.n	8007c68 <__smakebuf_r+0x18>
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	e7e3      	b.n	8007c5c <__smakebuf_r+0xc>
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <__smakebuf_r+0x7c>)
 8007c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	6020      	str	r0, [r4, #0]
 8007c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	6163      	str	r3, [r4, #20]
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	6120      	str	r0, [r4, #16]
 8007caa:	b15b      	cbz	r3, 8007cc4 <__smakebuf_r+0x74>
 8007cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 fb79 	bl	80083a8 <_isatty_r>
 8007cb6:	b128      	cbz	r0, 8007cc4 <__smakebuf_r+0x74>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	89a0      	ldrh	r0, [r4, #12]
 8007cc6:	4305      	orrs	r5, r0
 8007cc8:	81a5      	strh	r5, [r4, #12]
 8007cca:	e7cd      	b.n	8007c68 <__smakebuf_r+0x18>
 8007ccc:	08007169 	.word	0x08007169

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	; (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f7ff bb40 	b.w	8007356 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	20004690 	.word	0x20004690

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f7ff bb3b 	b.w	8007358 <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	20004690 	.word	0x20004690

08007ce8 <_free_r>:
 8007ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d044      	beq.n	8007d78 <_free_r+0x90>
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	9001      	str	r0, [sp, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cfa:	bfb8      	it	lt
 8007cfc:	18e4      	addlt	r4, r4, r3
 8007cfe:	f7ff ffe7 	bl	8007cd0 <__malloc_lock>
 8007d02:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <_free_r+0x94>)
 8007d04:	9801      	ldr	r0, [sp, #4]
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	b933      	cbnz	r3, 8007d18 <_free_r+0x30>
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6014      	str	r4, [r2, #0]
 8007d0e:	b003      	add	sp, #12
 8007d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d14:	f7ff bfe2 	b.w	8007cdc <__malloc_unlock>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d908      	bls.n	8007d2e <_free_r+0x46>
 8007d1c:	6825      	ldr	r5, [r4, #0]
 8007d1e:	1961      	adds	r1, r4, r5
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf01      	itttt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	1949      	addeq	r1, r1, r5
 8007d2a:	6021      	streq	r1, [r4, #0]
 8007d2c:	e7ed      	b.n	8007d0a <_free_r+0x22>
 8007d2e:	461a      	mov	r2, r3
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	b10b      	cbz	r3, 8007d38 <_free_r+0x50>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d9fa      	bls.n	8007d2e <_free_r+0x46>
 8007d38:	6811      	ldr	r1, [r2, #0]
 8007d3a:	1855      	adds	r5, r2, r1
 8007d3c:	42a5      	cmp	r5, r4
 8007d3e:	d10b      	bne.n	8007d58 <_free_r+0x70>
 8007d40:	6824      	ldr	r4, [r4, #0]
 8007d42:	4421      	add	r1, r4
 8007d44:	1854      	adds	r4, r2, r1
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	d1e0      	bne.n	8007d0e <_free_r+0x26>
 8007d4c:	681c      	ldr	r4, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	6053      	str	r3, [r2, #4]
 8007d52:	4421      	add	r1, r4
 8007d54:	6011      	str	r1, [r2, #0]
 8007d56:	e7da      	b.n	8007d0e <_free_r+0x26>
 8007d58:	d902      	bls.n	8007d60 <_free_r+0x78>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	e7d6      	b.n	8007d0e <_free_r+0x26>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf04      	itt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	bf04      	itt	eq
 8007d70:	1949      	addeq	r1, r1, r5
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	6054      	str	r4, [r2, #4]
 8007d76:	e7ca      	b.n	8007d0e <_free_r+0x26>
 8007d78:	b003      	add	sp, #12
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	20004694 	.word	0x20004694

08007d80 <__ssputs_r>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	688e      	ldr	r6, [r1, #8]
 8007d86:	429e      	cmp	r6, r3
 8007d88:	4682      	mov	sl, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4690      	mov	r8, r2
 8007d8e:	461f      	mov	r7, r3
 8007d90:	d838      	bhi.n	8007e04 <__ssputs_r+0x84>
 8007d92:	898a      	ldrh	r2, [r1, #12]
 8007d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d98:	d032      	beq.n	8007e00 <__ssputs_r+0x80>
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	6909      	ldr	r1, [r1, #16]
 8007d9e:	eba5 0901 	sub.w	r9, r5, r1
 8007da2:	6965      	ldr	r5, [r4, #20]
 8007da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dac:	3301      	adds	r3, #1
 8007dae:	444b      	add	r3, r9
 8007db0:	106d      	asrs	r5, r5, #1
 8007db2:	429d      	cmp	r5, r3
 8007db4:	bf38      	it	cc
 8007db6:	461d      	movcc	r5, r3
 8007db8:	0553      	lsls	r3, r2, #21
 8007dba:	d531      	bpl.n	8007e20 <__ssputs_r+0xa0>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	f7ff fb03 	bl	80073c8 <_malloc_r>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	b950      	cbnz	r0, 8007ddc <__ssputs_r+0x5c>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	f8ca 3000 	str.w	r3, [sl]
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	6921      	ldr	r1, [r4, #16]
 8007dde:	464a      	mov	r2, r9
 8007de0:	f7ff fabb 	bl	800735a <memcpy>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	6126      	str	r6, [r4, #16]
 8007df2:	6165      	str	r5, [r4, #20]
 8007df4:	444e      	add	r6, r9
 8007df6:	eba5 0509 	sub.w	r5, r5, r9
 8007dfa:	6026      	str	r6, [r4, #0]
 8007dfc:	60a5      	str	r5, [r4, #8]
 8007dfe:	463e      	mov	r6, r7
 8007e00:	42be      	cmp	r6, r7
 8007e02:	d900      	bls.n	8007e06 <__ssputs_r+0x86>
 8007e04:	463e      	mov	r6, r7
 8007e06:	6820      	ldr	r0, [r4, #0]
 8007e08:	4632      	mov	r2, r6
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	f000 fadc 	bl	80083c8 <memmove>
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	1b9b      	subs	r3, r3, r6
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	4433      	add	r3, r6
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7db      	b.n	8007dd8 <__ssputs_r+0x58>
 8007e20:	462a      	mov	r2, r5
 8007e22:	f000 faeb 	bl	80083fc <_realloc_r>
 8007e26:	4606      	mov	r6, r0
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1e1      	bne.n	8007df0 <__ssputs_r+0x70>
 8007e2c:	6921      	ldr	r1, [r4, #16]
 8007e2e:	4650      	mov	r0, sl
 8007e30:	f7ff ff5a 	bl	8007ce8 <_free_r>
 8007e34:	e7c7      	b.n	8007dc6 <__ssputs_r+0x46>
	...

08007e38 <_svfiprintf_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	4698      	mov	r8, r3
 8007e3e:	898b      	ldrh	r3, [r1, #12]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	b09d      	sub	sp, #116	; 0x74
 8007e44:	4607      	mov	r7, r0
 8007e46:	460d      	mov	r5, r1
 8007e48:	4614      	mov	r4, r2
 8007e4a:	d50e      	bpl.n	8007e6a <_svfiprintf_r+0x32>
 8007e4c:	690b      	ldr	r3, [r1, #16]
 8007e4e:	b963      	cbnz	r3, 8007e6a <_svfiprintf_r+0x32>
 8007e50:	2140      	movs	r1, #64	; 0x40
 8007e52:	f7ff fab9 	bl	80073c8 <_malloc_r>
 8007e56:	6028      	str	r0, [r5, #0]
 8007e58:	6128      	str	r0, [r5, #16]
 8007e5a:	b920      	cbnz	r0, 8007e66 <_svfiprintf_r+0x2e>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e0d1      	b.n	800800a <_svfiprintf_r+0x1d2>
 8007e66:	2340      	movs	r3, #64	; 0x40
 8007e68:	616b      	str	r3, [r5, #20]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6e:	2320      	movs	r3, #32
 8007e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008024 <_svfiprintf_r+0x1ec>
 8007e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e82:	f04f 0901 	mov.w	r9, #1
 8007e86:	4623      	mov	r3, r4
 8007e88:	469a      	mov	sl, r3
 8007e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e8e:	b10a      	cbz	r2, 8007e94 <_svfiprintf_r+0x5c>
 8007e90:	2a25      	cmp	r2, #37	; 0x25
 8007e92:	d1f9      	bne.n	8007e88 <_svfiprintf_r+0x50>
 8007e94:	ebba 0b04 	subs.w	fp, sl, r4
 8007e98:	d00b      	beq.n	8007eb2 <_svfiprintf_r+0x7a>
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ff6d 	bl	8007d80 <__ssputs_r>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f000 80aa 	beq.w	8008000 <_svfiprintf_r+0x1c8>
 8007eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eae:	445a      	add	r2, fp
 8007eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8007eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80a2 	beq.w	8008000 <_svfiprintf_r+0x1c8>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec6:	f10a 0a01 	add.w	sl, sl, #1
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ed4:	4654      	mov	r4, sl
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	4851      	ldr	r0, [pc, #324]	; (8008024 <_svfiprintf_r+0x1ec>)
 8007ede:	f7f8 f997 	bl	8000210 <memchr>
 8007ee2:	9a04      	ldr	r2, [sp, #16]
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_svfiprintf_r+0xe6>
 8007ee6:	06d0      	lsls	r0, r2, #27
 8007ee8:	bf44      	itt	mi
 8007eea:	2320      	movmi	r3, #32
 8007eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef0:	0711      	lsls	r1, r2, #28
 8007ef2:	bf44      	itt	mi
 8007ef4:	232b      	movmi	r3, #43	; 0x2b
 8007ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007efa:	f89a 3000 	ldrb.w	r3, [sl]
 8007efe:	2b2a      	cmp	r3, #42	; 0x2a
 8007f00:	d015      	beq.n	8007f2e <_svfiprintf_r+0xf6>
 8007f02:	9a07      	ldr	r2, [sp, #28]
 8007f04:	4654      	mov	r4, sl
 8007f06:	2000      	movs	r0, #0
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f12:	3b30      	subs	r3, #48	; 0x30
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d94e      	bls.n	8007fb6 <_svfiprintf_r+0x17e>
 8007f18:	b1b0      	cbz	r0, 8007f48 <_svfiprintf_r+0x110>
 8007f1a:	9207      	str	r2, [sp, #28]
 8007f1c:	e014      	b.n	8007f48 <_svfiprintf_r+0x110>
 8007f1e:	eba0 0308 	sub.w	r3, r0, r8
 8007f22:	fa09 f303 	lsl.w	r3, r9, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	46a2      	mov	sl, r4
 8007f2c:	e7d2      	b.n	8007ed4 <_svfiprintf_r+0x9c>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	1d19      	adds	r1, r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	9103      	str	r1, [sp, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfbb      	ittet	lt
 8007f3a:	425b      	neglt	r3, r3
 8007f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f40:	9307      	strge	r3, [sp, #28]
 8007f42:	9307      	strlt	r3, [sp, #28]
 8007f44:	bfb8      	it	lt
 8007f46:	9204      	strlt	r2, [sp, #16]
 8007f48:	7823      	ldrb	r3, [r4, #0]
 8007f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f4c:	d10c      	bne.n	8007f68 <_svfiprintf_r+0x130>
 8007f4e:	7863      	ldrb	r3, [r4, #1]
 8007f50:	2b2a      	cmp	r3, #42	; 0x2a
 8007f52:	d135      	bne.n	8007fc0 <_svfiprintf_r+0x188>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	9203      	str	r2, [sp, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bfb8      	it	lt
 8007f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f64:	3402      	adds	r4, #2
 8007f66:	9305      	str	r3, [sp, #20]
 8007f68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008034 <_svfiprintf_r+0x1fc>
 8007f6c:	7821      	ldrb	r1, [r4, #0]
 8007f6e:	2203      	movs	r2, #3
 8007f70:	4650      	mov	r0, sl
 8007f72:	f7f8 f94d 	bl	8000210 <memchr>
 8007f76:	b140      	cbz	r0, 8007f8a <_svfiprintf_r+0x152>
 8007f78:	2340      	movs	r3, #64	; 0x40
 8007f7a:	eba0 000a 	sub.w	r0, r0, sl
 8007f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	4303      	orrs	r3, r0
 8007f86:	3401      	adds	r4, #1
 8007f88:	9304      	str	r3, [sp, #16]
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4826      	ldr	r0, [pc, #152]	; (8008028 <_svfiprintf_r+0x1f0>)
 8007f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f94:	2206      	movs	r2, #6
 8007f96:	f7f8 f93b 	bl	8000210 <memchr>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d038      	beq.n	8008010 <_svfiprintf_r+0x1d8>
 8007f9e:	4b23      	ldr	r3, [pc, #140]	; (800802c <_svfiprintf_r+0x1f4>)
 8007fa0:	bb1b      	cbnz	r3, 8007fea <_svfiprintf_r+0x1b2>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	3307      	adds	r3, #7
 8007fa6:	f023 0307 	bic.w	r3, r3, #7
 8007faa:	3308      	adds	r3, #8
 8007fac:	9303      	str	r3, [sp, #12]
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	4433      	add	r3, r6
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	e767      	b.n	8007e86 <_svfiprintf_r+0x4e>
 8007fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fba:	460c      	mov	r4, r1
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	e7a5      	b.n	8007f0c <_svfiprintf_r+0xd4>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	3401      	adds	r4, #1
 8007fc4:	9305      	str	r3, [sp, #20]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	f04f 0c0a 	mov.w	ip, #10
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd2:	3a30      	subs	r2, #48	; 0x30
 8007fd4:	2a09      	cmp	r2, #9
 8007fd6:	d903      	bls.n	8007fe0 <_svfiprintf_r+0x1a8>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0c5      	beq.n	8007f68 <_svfiprintf_r+0x130>
 8007fdc:	9105      	str	r1, [sp, #20]
 8007fde:	e7c3      	b.n	8007f68 <_svfiprintf_r+0x130>
 8007fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e7f0      	b.n	8007fcc <_svfiprintf_r+0x194>
 8007fea:	ab03      	add	r3, sp, #12
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	462a      	mov	r2, r5
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <_svfiprintf_r+0x1f8>)
 8007ff2:	a904      	add	r1, sp, #16
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f3af 8000 	nop.w
 8007ffa:	1c42      	adds	r2, r0, #1
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	d1d6      	bne.n	8007fae <_svfiprintf_r+0x176>
 8008000:	89ab      	ldrh	r3, [r5, #12]
 8008002:	065b      	lsls	r3, r3, #25
 8008004:	f53f af2c 	bmi.w	8007e60 <_svfiprintf_r+0x28>
 8008008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800800a:	b01d      	add	sp, #116	; 0x74
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	ab03      	add	r3, sp, #12
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	462a      	mov	r2, r5
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <_svfiprintf_r+0x1f8>)
 8008018:	a904      	add	r1, sp, #16
 800801a:	4638      	mov	r0, r7
 800801c:	f000 f87a 	bl	8008114 <_printf_i>
 8008020:	e7eb      	b.n	8007ffa <_svfiprintf_r+0x1c2>
 8008022:	bf00      	nop
 8008024:	0800882d 	.word	0x0800882d
 8008028:	08008837 	.word	0x08008837
 800802c:	00000000 	.word	0x00000000
 8008030:	08007d81 	.word	0x08007d81
 8008034:	08008833 	.word	0x08008833

08008038 <_printf_common>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	4699      	mov	r9, r3
 8008040:	688a      	ldr	r2, [r1, #8]
 8008042:	690b      	ldr	r3, [r1, #16]
 8008044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008048:	4293      	cmp	r3, r2
 800804a:	bfb8      	it	lt
 800804c:	4613      	movlt	r3, r2
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008054:	4607      	mov	r7, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b10a      	cbz	r2, 800805e <_printf_common+0x26>
 800805a:	3301      	adds	r3, #1
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	0699      	lsls	r1, r3, #26
 8008062:	bf42      	ittt	mi
 8008064:	6833      	ldrmi	r3, [r6, #0]
 8008066:	3302      	addmi	r3, #2
 8008068:	6033      	strmi	r3, [r6, #0]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d106      	bne.n	8008080 <_printf_common+0x48>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	6832      	ldr	r2, [r6, #0]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	42ab      	cmp	r3, r5
 800807e:	dc26      	bgt.n	80080ce <_printf_common+0x96>
 8008080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008084:	1e13      	subs	r3, r2, #0
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	bf18      	it	ne
 800808a:	2301      	movne	r3, #1
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d42b      	bmi.n	80080e8 <_printf_common+0xb0>
 8008090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008094:	4649      	mov	r1, r9
 8008096:	4638      	mov	r0, r7
 8008098:	47c0      	blx	r8
 800809a:	3001      	adds	r0, #1
 800809c:	d01e      	beq.n	80080dc <_printf_common+0xa4>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	68e5      	ldr	r5, [r4, #12]
 80080a2:	6832      	ldr	r2, [r6, #0]
 80080a4:	f003 0306 	and.w	r3, r3, #6
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	bf08      	it	eq
 80080ac:	1aad      	subeq	r5, r5, r2
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	6922      	ldr	r2, [r4, #16]
 80080b2:	bf0c      	ite	eq
 80080b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b8:	2500      	movne	r5, #0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bfc4      	itt	gt
 80080be:	1a9b      	subgt	r3, r3, r2
 80080c0:	18ed      	addgt	r5, r5, r3
 80080c2:	2600      	movs	r6, #0
 80080c4:	341a      	adds	r4, #26
 80080c6:	42b5      	cmp	r5, r6
 80080c8:	d11a      	bne.n	8008100 <_printf_common+0xc8>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e008      	b.n	80080e0 <_printf_common+0xa8>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4652      	mov	r2, sl
 80080d2:	4649      	mov	r1, r9
 80080d4:	4638      	mov	r0, r7
 80080d6:	47c0      	blx	r8
 80080d8:	3001      	adds	r0, #1
 80080da:	d103      	bne.n	80080e4 <_printf_common+0xac>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7c6      	b.n	8008076 <_printf_common+0x3e>
 80080e8:	18e1      	adds	r1, r4, r3
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	2030      	movs	r0, #48	; 0x30
 80080ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080f2:	4422      	add	r2, r4
 80080f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080fc:	3302      	adds	r3, #2
 80080fe:	e7c7      	b.n	8008090 <_printf_common+0x58>
 8008100:	2301      	movs	r3, #1
 8008102:	4622      	mov	r2, r4
 8008104:	4649      	mov	r1, r9
 8008106:	4638      	mov	r0, r7
 8008108:	47c0      	blx	r8
 800810a:	3001      	adds	r0, #1
 800810c:	d0e6      	beq.n	80080dc <_printf_common+0xa4>
 800810e:	3601      	adds	r6, #1
 8008110:	e7d9      	b.n	80080c6 <_printf_common+0x8e>
	...

08008114 <_printf_i>:
 8008114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	7e0f      	ldrb	r7, [r1, #24]
 800811a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800811c:	2f78      	cmp	r7, #120	; 0x78
 800811e:	4691      	mov	r9, r2
 8008120:	4680      	mov	r8, r0
 8008122:	460c      	mov	r4, r1
 8008124:	469a      	mov	sl, r3
 8008126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800812a:	d807      	bhi.n	800813c <_printf_i+0x28>
 800812c:	2f62      	cmp	r7, #98	; 0x62
 800812e:	d80a      	bhi.n	8008146 <_printf_i+0x32>
 8008130:	2f00      	cmp	r7, #0
 8008132:	f000 80d8 	beq.w	80082e6 <_printf_i+0x1d2>
 8008136:	2f58      	cmp	r7, #88	; 0x58
 8008138:	f000 80a3 	beq.w	8008282 <_printf_i+0x16e>
 800813c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008144:	e03a      	b.n	80081bc <_printf_i+0xa8>
 8008146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800814a:	2b15      	cmp	r3, #21
 800814c:	d8f6      	bhi.n	800813c <_printf_i+0x28>
 800814e:	a101      	add	r1, pc, #4	; (adr r1, 8008154 <_printf_i+0x40>)
 8008150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008154:	080081ad 	.word	0x080081ad
 8008158:	080081c1 	.word	0x080081c1
 800815c:	0800813d 	.word	0x0800813d
 8008160:	0800813d 	.word	0x0800813d
 8008164:	0800813d 	.word	0x0800813d
 8008168:	0800813d 	.word	0x0800813d
 800816c:	080081c1 	.word	0x080081c1
 8008170:	0800813d 	.word	0x0800813d
 8008174:	0800813d 	.word	0x0800813d
 8008178:	0800813d 	.word	0x0800813d
 800817c:	0800813d 	.word	0x0800813d
 8008180:	080082cd 	.word	0x080082cd
 8008184:	080081f1 	.word	0x080081f1
 8008188:	080082af 	.word	0x080082af
 800818c:	0800813d 	.word	0x0800813d
 8008190:	0800813d 	.word	0x0800813d
 8008194:	080082ef 	.word	0x080082ef
 8008198:	0800813d 	.word	0x0800813d
 800819c:	080081f1 	.word	0x080081f1
 80081a0:	0800813d 	.word	0x0800813d
 80081a4:	0800813d 	.word	0x0800813d
 80081a8:	080082b7 	.word	0x080082b7
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	602a      	str	r2, [r5, #0]
 80081b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081bc:	2301      	movs	r3, #1
 80081be:	e0a3      	b.n	8008308 <_printf_i+0x1f4>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	6829      	ldr	r1, [r5, #0]
 80081c4:	0606      	lsls	r6, r0, #24
 80081c6:	f101 0304 	add.w	r3, r1, #4
 80081ca:	d50a      	bpl.n	80081e2 <_printf_i+0xce>
 80081cc:	680e      	ldr	r6, [r1, #0]
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	da03      	bge.n	80081dc <_printf_i+0xc8>
 80081d4:	232d      	movs	r3, #45	; 0x2d
 80081d6:	4276      	negs	r6, r6
 80081d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081dc:	485e      	ldr	r0, [pc, #376]	; (8008358 <_printf_i+0x244>)
 80081de:	230a      	movs	r3, #10
 80081e0:	e019      	b.n	8008216 <_printf_i+0x102>
 80081e2:	680e      	ldr	r6, [r1, #0]
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081ea:	bf18      	it	ne
 80081ec:	b236      	sxthne	r6, r6
 80081ee:	e7ef      	b.n	80081d0 <_printf_i+0xbc>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6820      	ldr	r0, [r4, #0]
 80081f4:	1d19      	adds	r1, r3, #4
 80081f6:	6029      	str	r1, [r5, #0]
 80081f8:	0601      	lsls	r1, r0, #24
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0xec>
 80081fc:	681e      	ldr	r6, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0xf2>
 8008200:	0646      	lsls	r6, r0, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0xe8>
 8008204:	881e      	ldrh	r6, [r3, #0]
 8008206:	4854      	ldr	r0, [pc, #336]	; (8008358 <_printf_i+0x244>)
 8008208:	2f6f      	cmp	r7, #111	; 0x6f
 800820a:	bf0c      	ite	eq
 800820c:	2308      	moveq	r3, #8
 800820e:	230a      	movne	r3, #10
 8008210:	2100      	movs	r1, #0
 8008212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008216:	6865      	ldr	r5, [r4, #4]
 8008218:	60a5      	str	r5, [r4, #8]
 800821a:	2d00      	cmp	r5, #0
 800821c:	bfa2      	ittt	ge
 800821e:	6821      	ldrge	r1, [r4, #0]
 8008220:	f021 0104 	bicge.w	r1, r1, #4
 8008224:	6021      	strge	r1, [r4, #0]
 8008226:	b90e      	cbnz	r6, 800822c <_printf_i+0x118>
 8008228:	2d00      	cmp	r5, #0
 800822a:	d04d      	beq.n	80082c8 <_printf_i+0x1b4>
 800822c:	4615      	mov	r5, r2
 800822e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008232:	fb03 6711 	mls	r7, r3, r1, r6
 8008236:	5dc7      	ldrb	r7, [r0, r7]
 8008238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800823c:	4637      	mov	r7, r6
 800823e:	42bb      	cmp	r3, r7
 8008240:	460e      	mov	r6, r1
 8008242:	d9f4      	bls.n	800822e <_printf_i+0x11a>
 8008244:	2b08      	cmp	r3, #8
 8008246:	d10b      	bne.n	8008260 <_printf_i+0x14c>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07de      	lsls	r6, r3, #31
 800824c:	d508      	bpl.n	8008260 <_printf_i+0x14c>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	4299      	cmp	r1, r3
 8008254:	bfde      	ittt	le
 8008256:	2330      	movle	r3, #48	; 0x30
 8008258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800825c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008260:	1b52      	subs	r2, r2, r5
 8008262:	6122      	str	r2, [r4, #16]
 8008264:	f8cd a000 	str.w	sl, [sp]
 8008268:	464b      	mov	r3, r9
 800826a:	aa03      	add	r2, sp, #12
 800826c:	4621      	mov	r1, r4
 800826e:	4640      	mov	r0, r8
 8008270:	f7ff fee2 	bl	8008038 <_printf_common>
 8008274:	3001      	adds	r0, #1
 8008276:	d14c      	bne.n	8008312 <_printf_i+0x1fe>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	b004      	add	sp, #16
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	4835      	ldr	r0, [pc, #212]	; (8008358 <_printf_i+0x244>)
 8008284:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008288:	6829      	ldr	r1, [r5, #0]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008290:	6029      	str	r1, [r5, #0]
 8008292:	061d      	lsls	r5, r3, #24
 8008294:	d514      	bpl.n	80082c0 <_printf_i+0x1ac>
 8008296:	07df      	lsls	r7, r3, #31
 8008298:	bf44      	itt	mi
 800829a:	f043 0320 	orrmi.w	r3, r3, #32
 800829e:	6023      	strmi	r3, [r4, #0]
 80082a0:	b91e      	cbnz	r6, 80082aa <_printf_i+0x196>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f023 0320 	bic.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	2310      	movs	r3, #16
 80082ac:	e7b0      	b.n	8008210 <_printf_i+0xfc>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f043 0320 	orr.w	r3, r3, #32
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	2378      	movs	r3, #120	; 0x78
 80082b8:	4828      	ldr	r0, [pc, #160]	; (800835c <_printf_i+0x248>)
 80082ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082be:	e7e3      	b.n	8008288 <_printf_i+0x174>
 80082c0:	0659      	lsls	r1, r3, #25
 80082c2:	bf48      	it	mi
 80082c4:	b2b6      	uxthmi	r6, r6
 80082c6:	e7e6      	b.n	8008296 <_printf_i+0x182>
 80082c8:	4615      	mov	r5, r2
 80082ca:	e7bb      	b.n	8008244 <_printf_i+0x130>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	6826      	ldr	r6, [r4, #0]
 80082d0:	6961      	ldr	r1, [r4, #20]
 80082d2:	1d18      	adds	r0, r3, #4
 80082d4:	6028      	str	r0, [r5, #0]
 80082d6:	0635      	lsls	r5, r6, #24
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	d501      	bpl.n	80082e0 <_printf_i+0x1cc>
 80082dc:	6019      	str	r1, [r3, #0]
 80082de:	e002      	b.n	80082e6 <_printf_i+0x1d2>
 80082e0:	0670      	lsls	r0, r6, #25
 80082e2:	d5fb      	bpl.n	80082dc <_printf_i+0x1c8>
 80082e4:	8019      	strh	r1, [r3, #0]
 80082e6:	2300      	movs	r3, #0
 80082e8:	6123      	str	r3, [r4, #16]
 80082ea:	4615      	mov	r5, r2
 80082ec:	e7ba      	b.n	8008264 <_printf_i+0x150>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	602a      	str	r2, [r5, #0]
 80082f4:	681d      	ldr	r5, [r3, #0]
 80082f6:	6862      	ldr	r2, [r4, #4]
 80082f8:	2100      	movs	r1, #0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7f7 ff88 	bl	8000210 <memchr>
 8008300:	b108      	cbz	r0, 8008306 <_printf_i+0x1f2>
 8008302:	1b40      	subs	r0, r0, r5
 8008304:	6060      	str	r0, [r4, #4]
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	2300      	movs	r3, #0
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	e7a8      	b.n	8008264 <_printf_i+0x150>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	462a      	mov	r2, r5
 8008316:	4649      	mov	r1, r9
 8008318:	4640      	mov	r0, r8
 800831a:	47d0      	blx	sl
 800831c:	3001      	adds	r0, #1
 800831e:	d0ab      	beq.n	8008278 <_printf_i+0x164>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	079b      	lsls	r3, r3, #30
 8008324:	d413      	bmi.n	800834e <_printf_i+0x23a>
 8008326:	68e0      	ldr	r0, [r4, #12]
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	4298      	cmp	r0, r3
 800832c:	bfb8      	it	lt
 800832e:	4618      	movlt	r0, r3
 8008330:	e7a4      	b.n	800827c <_printf_i+0x168>
 8008332:	2301      	movs	r3, #1
 8008334:	4632      	mov	r2, r6
 8008336:	4649      	mov	r1, r9
 8008338:	4640      	mov	r0, r8
 800833a:	47d0      	blx	sl
 800833c:	3001      	adds	r0, #1
 800833e:	d09b      	beq.n	8008278 <_printf_i+0x164>
 8008340:	3501      	adds	r5, #1
 8008342:	68e3      	ldr	r3, [r4, #12]
 8008344:	9903      	ldr	r1, [sp, #12]
 8008346:	1a5b      	subs	r3, r3, r1
 8008348:	42ab      	cmp	r3, r5
 800834a:	dcf2      	bgt.n	8008332 <_printf_i+0x21e>
 800834c:	e7eb      	b.n	8008326 <_printf_i+0x212>
 800834e:	2500      	movs	r5, #0
 8008350:	f104 0619 	add.w	r6, r4, #25
 8008354:	e7f5      	b.n	8008342 <_printf_i+0x22e>
 8008356:	bf00      	nop
 8008358:	0800883e 	.word	0x0800883e
 800835c:	0800884f 	.word	0x0800884f

08008360 <_read_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_read_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7f9 faac 	bl	80018cc <_read>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_read_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_read_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	2000469c 	.word	0x2000469c

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	; (80083a4 <_fstat_r+0x20>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7f9 fae0 	bl	8001956 <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	2000469c 	.word	0x2000469c

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_isatty_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 fadf 	bl	8001976 <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	2000469c 	.word	0x2000469c

080083c8 <memmove>:
 80083c8:	4288      	cmp	r0, r1
 80083ca:	b510      	push	{r4, lr}
 80083cc:	eb01 0402 	add.w	r4, r1, r2
 80083d0:	d902      	bls.n	80083d8 <memmove+0x10>
 80083d2:	4284      	cmp	r4, r0
 80083d4:	4623      	mov	r3, r4
 80083d6:	d807      	bhi.n	80083e8 <memmove+0x20>
 80083d8:	1e43      	subs	r3, r0, #1
 80083da:	42a1      	cmp	r1, r4
 80083dc:	d008      	beq.n	80083f0 <memmove+0x28>
 80083de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083e6:	e7f8      	b.n	80083da <memmove+0x12>
 80083e8:	4402      	add	r2, r0
 80083ea:	4601      	mov	r1, r0
 80083ec:	428a      	cmp	r2, r1
 80083ee:	d100      	bne.n	80083f2 <memmove+0x2a>
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fa:	e7f7      	b.n	80083ec <memmove+0x24>

080083fc <_realloc_r>:
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4680      	mov	r8, r0
 8008402:	4614      	mov	r4, r2
 8008404:	460e      	mov	r6, r1
 8008406:	b921      	cbnz	r1, 8008412 <_realloc_r+0x16>
 8008408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	4611      	mov	r1, r2
 800840e:	f7fe bfdb 	b.w	80073c8 <_malloc_r>
 8008412:	b92a      	cbnz	r2, 8008420 <_realloc_r+0x24>
 8008414:	f7ff fc68 	bl	8007ce8 <_free_r>
 8008418:	4625      	mov	r5, r4
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	f000 f81b 	bl	800845a <_malloc_usable_size_r>
 8008424:	4284      	cmp	r4, r0
 8008426:	4607      	mov	r7, r0
 8008428:	d802      	bhi.n	8008430 <_realloc_r+0x34>
 800842a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800842e:	d812      	bhi.n	8008456 <_realloc_r+0x5a>
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7fe ffc8 	bl	80073c8 <_malloc_r>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0ed      	beq.n	800841a <_realloc_r+0x1e>
 800843e:	42bc      	cmp	r4, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4631      	mov	r1, r6
 8008444:	bf28      	it	cs
 8008446:	463a      	movcs	r2, r7
 8008448:	f7fe ff87 	bl	800735a <memcpy>
 800844c:	4631      	mov	r1, r6
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff fc4a 	bl	8007ce8 <_free_r>
 8008454:	e7e1      	b.n	800841a <_realloc_r+0x1e>
 8008456:	4635      	mov	r5, r6
 8008458:	e7df      	b.n	800841a <_realloc_r+0x1e>

0800845a <_malloc_usable_size_r>:
 800845a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845e:	1f18      	subs	r0, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	bfbc      	itt	lt
 8008464:	580b      	ldrlt	r3, [r1, r0]
 8008466:	18c0      	addlt	r0, r0, r3
 8008468:	4770      	bx	lr
	...

0800846c <_init>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr

08008478 <_fini>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr
