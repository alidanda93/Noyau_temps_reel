
Noyau_temps_reel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008224  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800883c  0800883c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008844  08008844  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800884c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  20000080  080088cc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047a0  080088cc  000247a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199df  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7d  00000000  00000000  00039a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0c1  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196c4  00000000  00000000  00069c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc696  00000000  00000000  000832fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  0017f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083dc 	.word	0x080083dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080083dc 	.word	0x080083dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	char c;


	HAL_UART_Receive_IT(&huart1, (uint8_t*)(&c), sizeof(char));
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <uart_read+0x54>)
 80005c2:	f003 fab2 	bl	8003b2a <HAL_UART_Receive_IT>

	printf("Je vais Take semaphori\r\n");
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <uart_read+0x58>)
 80005c8:	f006 ff98 	bl	80074fc <puts>
	xSemaphoreTake(semaphori,HAL_MAX_DELAY);
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <uart_read+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 ff47 	bl	8005468 <xQueueSemaphoreTake>


	if(xSemaphoreTake(semaphori,HAL_MAX_DELAY)==pdTRUE)
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <uart_read+0x5c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f04f 31ff 	mov.w	r1, #4294967295
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 ff40 	bl	8005468 <xQueueSemaphoreTake>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d103      	bne.n	80005f6 <uart_read+0x42>
	{
		printf("Good Take semaphori\r\n");
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <uart_read+0x60>)
 80005f0:	f006 ff84 	bl	80074fc <puts>
 80005f4:	e002      	b.n	80005fc <uart_read+0x48>
	}
	else
	{
		printf("Error Take semaphori\r\n");
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <uart_read+0x64>)
 80005f8:	f006 ff80 	bl	80074fc <puts>
	}


	return c;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200009b8 	.word	0x200009b8
 800060c:	080083f4 	.word	0x080083f4
 8000610:	2000095c 	.word	0x2000095c
 8000614:	0800840c 	.word	0x0800840c
 8000618:	08008424 	.word	0x08008424

0800061c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken;

	if (huart==&huart1){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <HAL_UART_RxCpltCallback+0x6c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d11e      	bne.n	800066a <HAL_UART_RxCpltCallback+0x4e>

		higher_priority_task_woken = pdFALSE;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
		printf("Je vais Give\r\n");
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <HAL_UART_RxCpltCallback+0x70>)
 8000632:	f006 ff63 	bl	80074fc <puts>
		xSemaphoreGiveFromISR(semaphori,&higher_priority_task_woken);
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_UART_RxCpltCallback+0x74>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f107 020c 	add.w	r2, r7, #12
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fe7c 	bl	800533e <xQueueGiveFromISR>


		if(xSemaphoreGiveFromISR(semaphori,&higher_priority_task_woken)==pdTRUE)
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_UART_RxCpltCallback+0x74>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fe74 	bl	800533e <xQueueGiveFromISR>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d103      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x48>
		{
			printf("J ai Give\r\n");
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <HAL_UART_RxCpltCallback+0x78>)
 800065e:	f006 ff4d 	bl	80074fc <puts>
 8000662:	e002      	b.n	800066a <HAL_UART_RxCpltCallback+0x4e>
		}
		else
		{
			printf("Error j ai pas Give\r\n");
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <HAL_UART_RxCpltCallback+0x7c>)
 8000666:	f006 ff49 	bl	80074fc <puts>
		}

	}

	portYIELD_FROM_ISR(higher_priority_task_woken);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d007      	beq.n	8000680 <HAL_UART_RxCpltCallback+0x64>
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_UART_RxCpltCallback+0x80>)
 8000672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	f3bf 8f6f 	isb	sy

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200009b8 	.word	0x200009b8
 800068c:	0800843c 	.word	0x0800843c
 8000690:	2000095c 	.word	0x2000095c
 8000694:	0800844c 	.word	0x0800844c
 8000698:	08008458 	.word	0x08008458
 800069c:	e000ed04 	.word	0xe000ed04

080006a0 <uart_write>:


int uart_write(char * s, uint16_t size) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80006ac:	887a      	ldrh	r2, [r7, #2]
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <uart_write+0x24>)
 80006b6:	f003 f9b5 	bl	8003a24 <HAL_UART_Transmit>
	return size;
 80006ba:	887b      	ldrh	r3, [r7, #2]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200009b8 	.word	0x200009b8

080006c8 <sh_help>:




static int sh_help(int argc, char ** argv) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e023      	b.n	8000720 <sh_help+0x58>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80006d8:	4916      	ldr	r1, [pc, #88]	; (8000734 <sh_help+0x6c>)
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	4912      	ldr	r1, [pc, #72]	; (8000734 <sh_help+0x6c>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	3308      	adds	r3, #8
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	4603      	mov	r3, r0
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <sh_help+0x70>)
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <sh_help+0x74>)
 8000708:	f006 ff7a 	bl	8007600 <sniprintf>
 800070c:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b29b      	uxth	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <sh_help+0x74>)
 8000716:	f7ff ffc3 	bl	80006a0 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <sh_help+0x78>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbd6      	blt.n	80006d8 <sh_help+0x10>
	}

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200001a0 	.word	0x200001a0
 8000738:	08008470 	.word	0x08008470
 800073c:	2000009c 	.word	0x2000009c
 8000740:	2000019c 	.word	0x2000019c

08000744 <shell_init>:

void shell_init() {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	int size = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <shell_init+0x38>)
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <shell_init+0x3c>)
 8000756:	f006 ff53 	bl	8007600 <sniprintf>
 800075a:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29b      	uxth	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <shell_init+0x3c>)
 8000764:	f7ff ff9c 	bl	80006a0 <uart_write>

	shell_add('h', sh_help, "Help");
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <shell_init+0x40>)
 800076a:	4907      	ldr	r1, [pc, #28]	; (8000788 <shell_init+0x44>)
 800076c:	2068      	movs	r0, #104	; 0x68
 800076e:	f000 f80d 	bl	800078c <shell_add>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0800847c 	.word	0x0800847c
 8000780:	2000009c 	.word	0x2000009c
 8000784:	080084a4 	.word	0x080084a4
 8000788:	080006c9 	.word	0x080006c9

0800078c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <shell_add+0x74>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b3f      	cmp	r3, #63	; 0x3f
 80007a0:	dc26      	bgt.n	80007f0 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <shell_add+0x74>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4917      	ldr	r1, [pc, #92]	; (8000804 <shell_add+0x78>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <shell_add+0x74>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4912      	ldr	r1, [pc, #72]	; (8000804 <shell_add+0x78>)
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	3304      	adds	r3, #4
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <shell_add+0x74>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <shell_add+0x78>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	3308      	adds	r3, #8
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <shell_add+0x74>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <shell_add+0x74>)
 80007ea:	6013      	str	r3, [r2, #0]
		return 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	e001      	b.n	80007f4 <shell_add+0x68>
	}

	return -1;
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	2000019c 	.word	0x2000019c
 8000804:	200001a0 	.word	0x200001a0

08000808 <shell_exec>:

static int shell_exec(char * buf) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	; 0x40
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800081c:	e040      	b.n	80008a0 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800081e:	492d      	ldr	r1, [pc, #180]	; (80008d4 <shell_exec+0xcc>)
 8000820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000832:	429a      	cmp	r2, r3
 8000834:	d131      	bne.n	800089a <shell_exec+0x92>
			argc = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
 8000842:	e013      	b.n	800086c <shell_exec+0x64>
				if(*p == ' ') {
 8000844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b20      	cmp	r3, #32
 800084a:	d10c      	bne.n	8000866 <shell_exec+0x5e>
					*p = '\0';
 800084c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	63ba      	str	r2, [r7, #56]	; 0x38
 8000858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085a:	3201      	adds	r2, #1
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	3340      	adds	r3, #64	; 0x40
 8000860:	443b      	add	r3, r7
 8000862:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000868:	3301      	adds	r3, #1
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
 800086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <shell_exec+0x72>
 8000874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000876:	2b07      	cmp	r3, #7
 8000878:	dde4      	ble.n	8000844 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 800087a:	4916      	ldr	r1, [pc, #88]	; (80008d4 <shell_exec+0xcc>)
 800087c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	3304      	adds	r3, #4
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	4611      	mov	r1, r2
 8000892:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000894:	4798      	blx	r3
 8000896:	4603      	mov	r3, r0
 8000898:	e018      	b.n	80008cc <shell_exec+0xc4>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800089a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800089c:	3301      	adds	r3, #1
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <shell_exec+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbb9      	blt.n	800081e <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80008aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <shell_exec+0xd4>)
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <shell_exec+0xd8>)
 80008b6:	f006 fea3 	bl	8007600 <sniprintf>
 80008ba:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 80008bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <shell_exec+0xd8>)
 80008c4:	f7ff feec 	bl	80006a0 <uart_write>
	return -1;
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3740      	adds	r7, #64	; 0x40
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001a0 	.word	0x200001a0
 80008d8:	2000019c 	.word	0x2000019c
 80008dc:	080084ac 	.word	0x080084ac
 80008e0:	2000009c 	.word	0x2000009c

080008e4 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
	int reading = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 80008f2:	2102      	movs	r1, #2
 80008f4:	482b      	ldr	r0, [pc, #172]	; (80009a4 <shell_run+0xc0>)
 80008f6:	f7ff fed3 	bl	80006a0 <uart_write>
		reading = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]

		while(reading) {
 80008fe:	e049      	b.n	8000994 <shell_run+0xb0>
			char c = uart_read();
 8000900:	f7ff fe58 	bl	80005b4 <uart_read>
 8000904:	4603      	mov	r3, r0
 8000906:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b08      	cmp	r3, #8
 800090c:	d027      	beq.n	800095e <shell_run+0x7a>
 800090e:	2b0d      	cmp	r3, #13
 8000910:	d130      	bne.n	8000974 <shell_run+0x90>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <shell_run+0xc4>)
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	4824      	ldr	r0, [pc, #144]	; (80009ac <shell_run+0xc8>)
 800091a:	f006 fe71 	bl	8007600 <sniprintf>
 800091e:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <shell_run+0xc8>)
 8000928:	f7ff feba 	bl	80006a0 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <shell_run+0xcc>)
 8000934:	2100      	movs	r1, #0
 8000936:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <shell_run+0xcc>)
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <shell_run+0xd0>)
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	481a      	ldr	r0, [pc, #104]	; (80009ac <shell_run+0xc8>)
 8000942:	f006 fe5d 	bl	8007600 <sniprintf>
 8000946:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b29b      	uxth	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	4817      	ldr	r0, [pc, #92]	; (80009ac <shell_run+0xc8>)
 8000950:	f7ff fea6 	bl	80006a0 <uart_write>
				reading = 0;        //exit read loop
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
				break;
 800095c:	e01a      	b.n	8000994 <shell_run+0xb0>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd16      	ble.n	8000992 <shell_run+0xae>
					pos--;          //remove it in buffer
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3b01      	subs	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 800096a:	2103      	movs	r1, #3
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <shell_run+0xd4>)
 800096e:	f7ff fe97 	bl	80006a0 <uart_write>
				}
				break;
 8000972:	e00e      	b.n	8000992 <shell_run+0xae>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2bff      	cmp	r3, #255	; 0xff
 8000978:	dc0c      	bgt.n	8000994 <shell_run+0xb0>
					uart_write(&c, 1);
 800097a:	1cfb      	adds	r3, r7, #3
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe8e 	bl	80006a0 <uart_write>
					cmd_buffer[pos++] = c; //store
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	78f9      	ldrb	r1, [r7, #3]
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <shell_run+0xcc>)
 800098e:	54d1      	strb	r1, [r2, r3]
 8000990:	e000      	b.n	8000994 <shell_run+0xb0>
				break;
 8000992:	bf00      	nop
		while(reading) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1b2      	bne.n	8000900 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <shell_run+0xcc>)
 800099c:	f7ff ff34 	bl	8000808 <shell_exec>
		uart_write(prompt, 2);
 80009a0:	e7a7      	b.n	80008f2 <shell_run+0xe>
 80009a2:	bf00      	nop
 80009a4:	20000004 	.word	0x20000004
 80009a8:	080084c4 	.word	0x080084c4
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	200004a0 	.word	0x200004a0
 80009b4:	080084c8 	.word	0x080084c8
 80009b8:	20000000 	.word	0x20000000

080009bc <fonction>:
extern TaskHandle_t xHandleLED;
extern char print_buffer[BUFFER_SIZE];


int fonction(int argc, char ** argv)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	int size = snprintf (print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <fonction+0x30>)
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <fonction+0x34>)
 80009ce:	f006 fe17 	bl	8007600 <sniprintf>
 80009d2:	60f8      	str	r0, [r7, #12]
	uart_write(print_buffer, size);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <fonction+0x34>)
 80009dc:	f7ff fe60 	bl	80006a0 <uart_write>

	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	080084d0 	.word	0x080084d0
 80009f0:	200005a0 	.word	0x200005a0

080009f4 <addition>:


int addition( int argc, char ** argv)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	if(argc !=3)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d00f      	beq.n	8000a24 <addition+0x30>
	{
		int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument pour une somme de deux\r\n");
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <addition+0x80>)
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <addition+0x84>)
 8000a0c:	f006 fdf8 	bl	8007600 <sniprintf>
 8000a10:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <addition+0x84>)
 8000a1a:	f7ff fe41 	bl	80006a0 <uart_write>
		return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e022      	b.n	8000a6a <addition+0x76>
	}
	else
	{
		int a = atoi(argv[1]);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 fb26 	bl	800707c <atoi>
 8000a30:	6178      	str	r0, [r7, #20]
		int b = atoi(argv[2]);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	3308      	adds	r3, #8
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 fb1f 	bl	800707c <atoi>
 8000a3e:	6138      	str	r0, [r7, #16]
		int size = snprintf (print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n\r\n", a, b, a+b);
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4413      	add	r3, r2
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <addition+0x88>)
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <addition+0x84>)
 8000a56:	f006 fdd3 	bl	8007600 <sniprintf>
 8000a5a:	60f8      	str	r0, [r7, #12]
		uart_write(print_buffer, size);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <addition+0x84>)
 8000a64:	f7ff fe1c 	bl	80006a0 <uart_write>

	}
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	080084f0 	.word	0x080084f0
 8000a78:	200005a0 	.word	0x200005a0
 8000a7c:	08008530 	.word	0x08008530

08000a80 <led>:

int led( int argc, char ** argv)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	if(argc != 2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d00f      	beq.n	8000ab0 <led+0x30>
		{
			int size = snprintf (print_buffer, BUFFER_SIZE, "Error y a pas le bon nombre d'argument pour la LED\r\n");
 8000a90:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <led+0x70>)
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	4817      	ldr	r0, [pc, #92]	; (8000af4 <led+0x74>)
 8000a98:	f006 fdb2 	bl	8007600 <sniprintf>
 8000a9c:	60f8      	str	r0, [r7, #12]
			uart_write(print_buffer, size);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <led+0x74>)
 8000aa6:	f7ff fdfb 	bl	80006a0 <uart_write>
			return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e01b      	b.n	8000ae8 <led+0x68>
		}
	else
		{
			LED_DELAY = atoi(argv[1]);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f006 fae0 	bl	800707c <atoi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <led+0x78>)
 8000ac0:	6013      	str	r3, [r2, #0]
			switch(LED_DELAY)
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <led+0x78>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <led+0x54>
			{
				case 0 :

					vTaskSuspend(xHandleLED);
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <led+0x7c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 f846 	bl	8005b60 <vTaskSuspend>


				default :

					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	480a      	ldr	r0, [pc, #40]	; (8000b00 <led+0x80>)
 8000ad8:	f001 fbaf 	bl	800223a <HAL_GPIO_TogglePin>
					vTaskDelay(LED_DELAY);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <led+0x78>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f005 f807 	bl	8005af4 <vTaskDelay>

			}
		}

	return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	08008544 	.word	0x08008544
 8000af4:	200005a0 	.word	0x200005a0
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000960 	.word	0x20000960
 8000b00:	40022000 	.word	0x40022000

08000b04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <vApplicationGetIdleTaskMemory+0x30>)
 8000b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200006a4 	.word	0x200006a4
 8000b34:	20000758 	.word	0x20000758

08000b38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_FREERTOS_Init+0x30>)
 8000b40:	1d3c      	adds	r4, r7, #4
 8000b42:	461d      	mov	r5, r3
 8000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fa12 	bl	8004f7e <osThreadCreate>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <MX_FREERTOS_Init+0x34>)
 8000b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bdb0      	pop	{r4, r5, r7, pc}
 8000b68:	08008588 	.word	0x08008588
 8000b6c:	200006a0 	.word	0x200006a0

08000b70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f004 fa4c 	bl	8005016 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <StartDefaultTask+0x8>

08000b80 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	4bad      	ldr	r3, [pc, #692]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4aac      	ldr	r2, [pc, #688]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4baa      	ldr	r3, [pc, #680]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4ba7      	ldr	r3, [pc, #668]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4aa6      	ldr	r2, [pc, #664]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4ba1      	ldr	r3, [pc, #644]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4aa0      	ldr	r2, [pc, #640]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b9e      	ldr	r3, [pc, #632]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b9b      	ldr	r3, [pc, #620]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a9a      	ldr	r2, [pc, #616]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b98      	ldr	r3, [pc, #608]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a94      	ldr	r2, [pc, #592]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a8e      	ldr	r2, [pc, #568]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c26:	4b89      	ldr	r3, [pc, #548]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a88      	ldr	r2, [pc, #544]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b86      	ldr	r3, [pc, #536]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c3e:	4b83      	ldr	r3, [pc, #524]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a82      	ldr	r2, [pc, #520]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b80      	ldr	r3, [pc, #512]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a7c      	ldr	r2, [pc, #496]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b7a      	ldr	r3, [pc, #488]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b77      	ldr	r3, [pc, #476]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a76      	ldr	r2, [pc, #472]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b74      	ldr	r3, [pc, #464]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a70      	ldr	r2, [pc, #448]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b6e      	ldr	r3, [pc, #440]	; (8000e4c <MX_GPIO_Init+0x2cc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	486b      	ldr	r0, [pc, #428]	; (8000e50 <MX_GPIO_Init+0x2d0>)
 8000ca4:	f001 fab0 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f241 014c 	movw	r1, #4172	; 0x104c
 8000cae:	4869      	ldr	r0, [pc, #420]	; (8000e54 <MX_GPIO_Init+0x2d4>)
 8000cb0:	f001 faaa 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4867      	ldr	r0, [pc, #412]	; (8000e58 <MX_GPIO_Init+0x2d8>)
 8000cba:	f001 faa5 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4865      	ldr	r0, [pc, #404]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000cc6:	f001 fa9f 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	21c8      	movs	r1, #200	; 0xc8
 8000cce:	4864      	ldr	r0, [pc, #400]	; (8000e60 <MX_GPIO_Init+0x2e0>)
 8000cd0:	f001 fa9a 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ce4:	230e      	movs	r3, #14
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	485d      	ldr	r0, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000cf0:	f001 f8de 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4857      	ldr	r0, [pc, #348]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000d08:	f001 f8d2 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d1c:	2309      	movs	r3, #9
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	484f      	ldr	r0, [pc, #316]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000d28:	f001 f8c2 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d2c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	4845      	ldr	r0, [pc, #276]	; (8000e60 <MX_GPIO_Init+0x2e0>)
 8000d4a:	f001 f8b1 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d60:	230c      	movs	r3, #12
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	483e      	ldr	r0, [pc, #248]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000d6c:	f001 f8a0 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d76:	2312      	movs	r3, #18
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d82:	2304      	movs	r3, #4
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4836      	ldr	r0, [pc, #216]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000d8e:	f001 f88f 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000d92:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	482e      	ldr	r0, [pc, #184]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000db0:	f001 f87e 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000db4:	2310      	movs	r3, #16
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4826      	ldr	r0, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000dd0:	f001 f86e 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000de4:	2308      	movs	r3, #8
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4818      	ldr	r0, [pc, #96]	; (8000e50 <MX_GPIO_Init+0x2d0>)
 8000df0:	f001 f85e 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000df4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e06:	230c      	movs	r3, #12
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <MX_GPIO_Init+0x2ec>)
 8000e12:	f001 f84d 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <MX_GPIO_Init+0x2f0>)
 8000e34:	f001 f83c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e38:	2360      	movs	r3, #96	; 0x60
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e48:	230d      	movs	r3, #13
 8000e4a:	e013      	b.n	8000e74 <MX_GPIO_Init+0x2f4>
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40022000 	.word	0x40022000
 8000e58:	40022800 	.word	0x40022800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	48bc      	ldr	r0, [pc, #752]	; (8001170 <MX_GPIO_Init+0x5f0>)
 8000e7e:	f001 f817 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e82:	2340      	movs	r3, #64	; 0x40
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e92:	230a      	movs	r3, #10
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	48b5      	ldr	r0, [pc, #724]	; (8001174 <MX_GPIO_Init+0x5f4>)
 8000e9e:	f001 f807 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ea2:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	48ae      	ldr	r0, [pc, #696]	; (8001178 <MX_GPIO_Init+0x5f8>)
 8000ec0:	f000 fff6 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ec4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	48a6      	ldr	r0, [pc, #664]	; (800117c <MX_GPIO_Init+0x5fc>)
 8000ee2:	f000 ffe5 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	48a0      	ldr	r0, [pc, #640]	; (800117c <MX_GPIO_Init+0x5fc>)
 8000efc:	f000 ffd8 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	489a      	ldr	r0, [pc, #616]	; (8001180 <MX_GPIO_Init+0x600>)
 8000f16:	f000 ffcb 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4892      	ldr	r0, [pc, #584]	; (8001180 <MX_GPIO_Init+0x600>)
 8000f38:	f000 ffba 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	4619      	mov	r1, r3
 8000f58:	488a      	ldr	r0, [pc, #552]	; (8001184 <MX_GPIO_Init+0x604>)
 8000f5a:	f000 ffa9 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin;
 8000f5e:	23b0      	movs	r3, #176	; 0xb0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4883      	ldr	r0, [pc, #524]	; (8001188 <MX_GPIO_Init+0x608>)
 8000f7a:	f000 ff99 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f7e:	23f7      	movs	r3, #247	; 0xf7
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f8e:	230e      	movs	r3, #14
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	487c      	ldr	r0, [pc, #496]	; (800118c <MX_GPIO_Init+0x60c>)
 8000f9a:	f000 ff89 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb8:	4619      	mov	r1, r3
 8000fba:	486f      	ldr	r0, [pc, #444]	; (8001178 <MX_GPIO_Init+0x5f8>)
 8000fbc:	f000 ff78 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4866      	ldr	r0, [pc, #408]	; (8001178 <MX_GPIO_Init+0x5f8>)
 8000fde:	f000 ff67 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4861      	ldr	r0, [pc, #388]	; (8001180 <MX_GPIO_Init+0x600>)
 8000ffa:	f000 ff59 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ffe:	2308      	movs	r3, #8
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800100e:	230d      	movs	r3, #13
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001016:	4619      	mov	r1, r3
 8001018:	4859      	ldr	r0, [pc, #356]	; (8001180 <MX_GPIO_Init+0x600>)
 800101a:	f000 ff49 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 800101e:	f241 034c 	movw	r3, #4172	; 0x104c
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	4854      	ldr	r0, [pc, #336]	; (8001188 <MX_GPIO_Init+0x608>)
 8001038:	f000 ff3a 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104e:	4619      	mov	r1, r3
 8001050:	484f      	ldr	r0, [pc, #316]	; (8001190 <MX_GPIO_Init+0x610>)
 8001052:	f000 ff2d 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001056:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001068:	230c      	movs	r3, #12
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	4848      	ldr	r0, [pc, #288]	; (8001194 <MX_GPIO_Init+0x614>)
 8001074:	f000 ff1c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001078:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	230e      	movs	r3, #14
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	483c      	ldr	r0, [pc, #240]	; (8001188 <MX_GPIO_Init+0x608>)
 8001096:	f000 ff0b 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4836      	ldr	r0, [pc, #216]	; (800118c <MX_GPIO_Init+0x60c>)
 80010b2:	f000 fefd 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010c8:	230d      	movs	r3, #13
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <MX_GPIO_Init+0x5f8>)
 80010d4:	f000 feec 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d8:	2310      	movs	r3, #16
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <MX_GPIO_Init+0x600>)
 80010ec:	f000 fee0 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80010f0:	2304      	movs	r3, #4
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001100:	230c      	movs	r3, #12
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	481d      	ldr	r0, [pc, #116]	; (8001180 <MX_GPIO_Init+0x600>)
 800110c:	f000 fed0 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001110:	f248 0304 	movw	r3, #32772	; 0x8004
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_GPIO_Init+0x618>)
 8001126:	f000 fec3 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800112a:	2302      	movs	r3, #2
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113a:	2305      	movs	r3, #5
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <MX_GPIO_Init+0x608>)
 8001146:	f000 feb3 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800114a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_GPIO_Init+0x618>)
 8001164:	f000 fea4 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001168:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800116c:	e016      	b.n	800119c <MX_GPIO_Init+0x61c>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40022400 	.word	0x40022400
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020000 	.word	0x40020000
 8001188:	40022000 	.word	0x40022000
 800118c:	40022800 	.word	0x40022800
 8001190:	40020800 	.word	0x40020800
 8001194:	40021400 	.word	0x40021400
 8001198:	40021c00 	.word	0x40021c00
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011aa:	230d      	movs	r3, #13
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	48a5      	ldr	r0, [pc, #660]	; (800144c <MX_GPIO_Init+0x8cc>)
 80011b6:	f000 fe7b 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011ca:	2302      	movs	r3, #2
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d2:	4619      	mov	r1, r3
 80011d4:	489e      	ldr	r0, [pc, #632]	; (8001450 <MX_GPIO_Init+0x8d0>)
 80011d6:	f000 fe6b 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4897      	ldr	r0, [pc, #604]	; (8001454 <MX_GPIO_Init+0x8d4>)
 80011f8:	f000 fe5a 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001202:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	4619      	mov	r1, r3
 8001212:	488f      	ldr	r0, [pc, #572]	; (8001450 <MX_GPIO_Init+0x8d0>)
 8001214:	f000 fe4c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001228:	2308      	movs	r3, #8
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001230:	4619      	mov	r1, r3
 8001232:	4889      	ldr	r0, [pc, #548]	; (8001458 <MX_GPIO_Init+0x8d8>)
 8001234:	f000 fe3c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001248:	230a      	movs	r3, #10
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001250:	4619      	mov	r1, r3
 8001252:	487e      	ldr	r0, [pc, #504]	; (800144c <MX_GPIO_Init+0x8cc>)
 8001254:	f000 fe2c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001258:	2328      	movs	r3, #40	; 0x28
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001268:	230c      	movs	r3, #12
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4876      	ldr	r0, [pc, #472]	; (800144c <MX_GPIO_Init+0x8cc>)
 8001274:	f000 fe1c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001278:	23c8      	movs	r3, #200	; 0xc8
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128c:	4619      	mov	r1, r3
 800128e:	4873      	ldr	r0, [pc, #460]	; (800145c <MX_GPIO_Init+0x8dc>)
 8001290:	f000 fe0e 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001294:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a6:	4619      	mov	r1, r3
 80012a8:	486d      	ldr	r0, [pc, #436]	; (8001460 <MX_GPIO_Init+0x8e0>)
 80012aa:	f000 fe01 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012ae:	2308      	movs	r3, #8
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012be:	230c      	movs	r3, #12
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c6:	4619      	mov	r1, r3
 80012c8:	4863      	ldr	r0, [pc, #396]	; (8001458 <MX_GPIO_Init+0x8d8>)
 80012ca:	f000 fdf1 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80012ce:	2305      	movs	r3, #5
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012de:	230a      	movs	r3, #10
 80012e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	485b      	ldr	r0, [pc, #364]	; (8001458 <MX_GPIO_Init+0x8d8>)
 80012ea:	f000 fde1 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012ee:	2332      	movs	r3, #50	; 0x32
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fe:	230b      	movs	r3, #11
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	4619      	mov	r1, r3
 8001308:	4853      	ldr	r0, [pc, #332]	; (8001458 <MX_GPIO_Init+0x8d8>)
 800130a:	f000 fdd1 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130e:	2304      	movs	r3, #4
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131e:	2309      	movs	r3, #9
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001326:	4619      	mov	r1, r3
 8001328:	484e      	ldr	r0, [pc, #312]	; (8001464 <MX_GPIO_Init+0x8e4>)
 800132a:	f000 fdc1 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800132e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001340:	2309      	movs	r3, #9
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	4619      	mov	r1, r3
 800134a:	4847      	ldr	r0, [pc, #284]	; (8001468 <MX_GPIO_Init+0x8e8>)
 800134c:	f000 fdb0 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001350:	2304      	movs	r3, #4
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001360:	4619      	mov	r1, r3
 8001362:	483e      	ldr	r0, [pc, #248]	; (800145c <MX_GPIO_Init+0x8dc>)
 8001364:	f000 fda4 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001368:	2386      	movs	r3, #134	; 0x86
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001378:	230b      	movs	r3, #11
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001380:	4619      	mov	r1, r3
 8001382:	4834      	ldr	r0, [pc, #208]	; (8001454 <MX_GPIO_Init+0x8d4>)
 8001384:	f000 fd94 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001388:	2301      	movs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	482e      	ldr	r0, [pc, #184]	; (8001454 <MX_GPIO_Init+0x8d4>)
 800139c:	f000 fd88 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013a0:	2350      	movs	r3, #80	; 0x50
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013b0:	230d      	movs	r3, #13
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <MX_GPIO_Init+0x8d4>)
 80013bc:	f000 fd78 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80013c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013d2:	2304      	movs	r3, #4
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_GPIO_Init+0x8cc>)
 80013de:	f000 fd67 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013e2:	2328      	movs	r3, #40	; 0x28
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_GPIO_Init+0x8d4>)
 80013fe:	f000 fd57 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001412:	2309      	movs	r3, #9
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <MX_GPIO_Init+0x8cc>)
 800141e:	f000 fd47 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001434:	2305      	movs	r3, #5
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	4619      	mov	r1, r3
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <MX_GPIO_Init+0x8e4>)
 8001440:	f000 fd36 	bl	8001eb0 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40022000 	.word	0x40022000
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800
 800145c:	40021800 	.word	0x40021800
 8001460:	40021400 	.word	0x40021400
 8001464:	40020400 	.word	0x40020400
 8001468:	40020c00 	.word	0x40020c00

0800146c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001474:	1d39      	adds	r1, r7, #4
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	2201      	movs	r2, #1
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <__io_putchar+0x20>)
 800147e:	f002 fad1 	bl	8003a24 <HAL_UART_Transmit>

	return ch;
 8001482:	687b      	ldr	r3, [r7, #4]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200009b8 	.word	0x200009b8

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f000 fb6a 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f883 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f7ff fb6f 	bl	8000b80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014a2:	f000 fa81 	bl	80019a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Init\r\n");
 80014a6:	482c      	ldr	r0, [pc, #176]	; (8001558 <main+0xc8>)
 80014a8:	f006 f828 	bl	80074fc <puts>
  semaphori = xSemaphoreCreateBinary();
 80014ac:	2203      	movs	r2, #3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2001      	movs	r0, #1
 80014b2:	f003 fee3 	bl	800527c <xQueueGenericCreate>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <main+0xcc>)
 80014ba:	6013      	str	r3, [r2, #0]


  xReturned = xTaskCreate(
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <main+0xd0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <main+0xd4>)
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	2304      	movs	r3, #4
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4613      	mov	r3, r2
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	4925      	ldr	r1, [pc, #148]	; (8001568 <main+0xd8>)
 80014d2:	4826      	ldr	r0, [pc, #152]	; (800156c <main+0xdc>)
 80014d4:	f004 f9bf 	bl	8005856 <xTaskCreate>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <main+0xe0>)
 80014dc:	6013      	str	r3, [r2, #0]
    		STACK_SIZE, /* Stack size in words, not bytes. */
    		(void *) LED_DELAY, /* Parameter passed into the task. */
    		LED_PRIORITY,/* Priority at which the task is created. */
    		&xHandleLED ); /* Used to pass out the created task's handle. */

  if(xReturned == pdTRUE)
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <main+0xe0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d103      	bne.n	80014ee <main+0x5e>
  {
	  printf("Led task created \r\n");
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <main+0xe4>)
 80014e8:	f006 f808 	bl	80074fc <puts>
 80014ec:	e002      	b.n	80014f4 <main+0x64>
  }
  else
  {
	  printf("Error Led task not created \r\n");
 80014ee:	4822      	ldr	r0, [pc, #136]	; (8001578 <main+0xe8>)
 80014f0:	f006 f804 	bl	80074fc <puts>
  }




  xReturned = xTaskCreate(
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <main+0xec>)
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	2305      	movs	r3, #5
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	491f      	ldr	r1, [pc, #124]	; (8001580 <main+0xf0>)
 8001504:	481f      	ldr	r0, [pc, #124]	; (8001584 <main+0xf4>)
 8001506:	f004 f9a6 	bl	8005856 <xTaskCreate>
 800150a:	4603      	mov	r3, r0
 800150c:	4a18      	ldr	r2, [pc, #96]	; (8001570 <main+0xe0>)
 800150e:	6013      	str	r3, [r2, #0]
      		(void *) pdTRUE, /* Parameter passed into the task. */
      		SHELL_PRIORITY,/* Priority at which the task is created. */
      		&xHandleSHELL ); /* Used to pass out the created task's handle. */


  if(xReturned == pdTRUE)
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <main+0xe0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d103      	bne.n	8001520 <main+0x90>
  {
	  printf("Shell task created \r\n");
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <main+0xf8>)
 800151a:	f005 ffef 	bl	80074fc <puts>
 800151e:	e002      	b.n	8001526 <main+0x96>
  }
  else
  {
	  printf("Error Shell task not created \r\n");
 8001520:	481a      	ldr	r0, [pc, #104]	; (800158c <main+0xfc>)
 8001522:	f005 ffeb 	bl	80074fc <puts>
  }


	shell_init();
 8001526:	f7ff f90d 	bl	8000744 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <main+0x100>)
 800152c:	4919      	ldr	r1, [pc, #100]	; (8001594 <main+0x104>)
 800152e:	2066      	movs	r0, #102	; 0x66
 8001530:	f7ff f92c 	bl	800078c <shell_add>
	shell_add('a', addition, "addition de deux entiers");
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <main+0x108>)
 8001536:	4919      	ldr	r1, [pc, #100]	; (800159c <main+0x10c>)
 8001538:	2061      	movs	r0, #97	; 0x61
 800153a:	f7ff f927 	bl	800078c <shell_add>
	shell_add('l', led, "faire clignoter la led a la frequence 1/p");
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <main+0x110>)
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <main+0xdc>)
 8001542:	206c      	movs	r0, #108	; 0x6c
 8001544:	f7ff f922 	bl	800078c <shell_add>

	vTaskStartScheduler();
 8001548:	f004 fb9e 	bl	8005c88 <vTaskStartScheduler>

	//shell_run(&h_shell); <-- plus besoin car appelée a la creation de la task
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800154c:	f7ff faf4 	bl	8000b38 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001550:	f003 fd0e 	bl	8004f70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001554:	e7fe      	b.n	8001554 <main+0xc4>
 8001556:	bf00      	nop
 8001558:	080085a4 	.word	0x080085a4
 800155c:	2000095c 	.word	0x2000095c
 8001560:	20000008 	.word	0x20000008
 8001564:	20000960 	.word	0x20000960
 8001568:	080085ac 	.word	0x080085ac
 800156c:	08000a81 	.word	0x08000a81
 8001570:	20000958 	.word	0x20000958
 8001574:	080085b0 	.word	0x080085b0
 8001578:	080085c4 	.word	0x080085c4
 800157c:	20000964 	.word	0x20000964
 8001580:	080085e4 	.word	0x080085e4
 8001584:	080008e5 	.word	0x080008e5
 8001588:	080085ec 	.word	0x080085ec
 800158c:	08008604 	.word	0x08008604
 8001590:	08008624 	.word	0x08008624
 8001594:	080009bd 	.word	0x080009bd
 8001598:	0800863c 	.word	0x0800863c
 800159c:	080009f5 	.word	0x080009f5
 80015a0:	08008658 	.word	0x08008658

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fe97 	bl	80072e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <SystemClock_Config+0xc8>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <SystemClock_Config+0xc8>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <SystemClock_Config+0xc8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <SystemClock_Config+0xcc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e8:	4a21      	ldr	r2, [pc, #132]	; (8001670 <SystemClock_Config+0xcc>)
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <SystemClock_Config+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001610:	230a      	movs	r3, #10
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001614:	23d2      	movs	r3, #210	; 0xd2
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800161c:	2302      	movs	r3, #2
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fe23 	bl	8002270 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001630:	f000 f832 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2105      	movs	r1, #5
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f8b0 	bl	80027b8 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800165e:	f000 f81b 	bl	8001698 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3750      	adds	r7, #80	; 0x50
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001686:	f000 fa7f 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40001000 	.word	0x40001000

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>
	...

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	210f      	movs	r1, #15
 80016de:	f06f 0001 	mvn.w	r0, #1
 80016e2:	f000 fb29 	bl	8001d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_InitTick+0xe0>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <HAL_InitTick+0xe0>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6413      	str	r3, [r2, #64]	; 0x40
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_InitTick+0xe0>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800171c:	f107 0210 	add.w	r2, r7, #16
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fa2c 	bl	8002b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001736:	f001 f9fd 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 800173a:	6378      	str	r0, [r7, #52]	; 0x34
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800173e:	f001 f9f9 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8001742:	4603      	mov	r3, r0
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_InitTick+0xe4>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	3b01      	subs	r3, #1
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_InitTick+0xe8>)
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_InitTick+0xec>)
 800175a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_InitTick+0xe8>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_InitTick+0xe8>)
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_InitTick+0xe8>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_InitTick+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_InitTick+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_InitTick+0xe8>)
 800177e:	f001 fe23 	bl	80033c8 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800178c:	2b00      	cmp	r3, #0
 800178e:	d11b      	bne.n	80017c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <HAL_InitTick+0xe8>)
 8001792:	f001 fe7b 	bl	800348c <HAL_TIM_Base_Start_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800179c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d111      	bne.n	80017c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a4:	2036      	movs	r0, #54	; 0x36
 80017a6:	f000 fae3 	bl	8001d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d808      	bhi.n	80017c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2036      	movs	r0, #54	; 0x36
 80017b6:	f000 fabf 	bl	8001d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0xf0>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e002      	b.n	80017c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3738      	adds	r7, #56	; 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	20000968 	.word	0x20000968
 80017e0:	40001000 	.word	0x40001000
 80017e4:	20000010 	.word	0x20000010

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART1_IRQHandler+0x10>)
 800181a:	f002 f9cb 	bl	8003bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200009b8 	.word	0x200009b8

08001828 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM6_DAC_IRQHandler+0x10>)
 800182e:	f001 fea5 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000968 	.word	0x20000968

0800183c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fdeb 	bl	800146c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf1      	blt.n	8001888 <_write+0x12>
  }
  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_close>:

int _close(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f005 fb9c 	bl	8007084 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20050000 	.word	0x20050000
 8001978:	00000400 	.word	0x00000400
 800197c:	200009b4 	.word	0x200009b4
 8001980:	200047a0 	.word	0x200047a0

08001984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <MX_USART1_UART_Init+0x5c>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART1_UART_Init+0x58>)
 80019ec:	f001 ffcc 	bl	8003988 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019f6:	f7ff fe4f 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200009b8 	.word	0x200009b8
 8001a04:	40011000 	.word	0x40011000

08001a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ac      	sub	sp, #176	; 0xb0
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	2284      	movs	r2, #132	; 0x84
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fc5c 	bl	80072e6 <memset>
  if(uartHandle->Instance==USART1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_UART_MspInit+0x104>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d164      	bne.n	8001b02 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 f8cf 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a50:	f7ff fe22 	bl	8001698 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ac2:	f000 f9f5 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <HAL_UART_MspInit+0x110>)
 8001aee:	f000 f9df 	bl	8001eb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2108      	movs	r1, #8
 8001af6:	2025      	movs	r0, #37	; 0x25
 8001af8:	f000 f91e 	bl	8001d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001afc:	2025      	movs	r0, #37	; 0x25
 8001afe:	f000 f937 	bl	8001d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	37b0      	adds	r7, #176	; 0xb0
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020000 	.word	0x40020000

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ff1d 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f005 fb97 	bl	800727c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fc9f 	bl	8001490 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b60:	0800884c 	.word	0x0800884c
  ldr r2, =_sbss
 8001b64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b68:	200047a0 	.word	0x200047a0

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f8d5 	bl	8001d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f7ff fdbb 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fd91 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	20000a40 	.word	0x20000a40

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000a40 	.word	0x20000a40

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <__NVIC_SetPriorityGrouping+0x40>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x40>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00
 8001c0c:	05fa0000 	.word	0x05fa0000

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff4c 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4a:	f7ff ff61 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f7ff ffb1 	bl	8001cbc <NVIC_EncodePriority>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff80 	bl	8001c68 <__NVIC_SetPriority>
}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff54 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d9a:	f7ff ff09 	bl	8001bb0 <HAL_GetTick>
 8001d9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d008      	beq.n	8001dbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e052      	b.n	8001e64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0216 	bic.w	r2, r2, #22
 8001dcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ddc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <HAL_DMA_Abort+0x62>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0208 	bic.w	r2, r2, #8
 8001dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	e013      	b.n	8001e38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e10:	f7ff fece 	bl	8001bb0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d90c      	bls.n	8001e38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e015      	b.n	8001e64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e4      	bne.n	8001e10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	223f      	movs	r2, #63	; 0x3f
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00c      	b.n	8001ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e175      	b.n	80021bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 8164 	bne.w	80021b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d005      	beq.n	8001f06 <HAL_GPIO_Init+0x56>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d130      	bne.n	8001f68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80be 	beq.w	80021b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_GPIO_Init+0x324>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_GPIO_Init+0x324>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_GPIO_Init+0x324>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002052:	4a61      	ldr	r2, [pc, #388]	; (80021d8 <HAL_GPIO_Init+0x328>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_GPIO_Init+0x32c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d037      	beq.n	80020ee <HAL_GPIO_Init+0x23e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_GPIO_Init+0x330>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d031      	beq.n	80020ea <HAL_GPIO_Init+0x23a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02b      	beq.n	80020e6 <HAL_GPIO_Init+0x236>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <HAL_GPIO_Init+0x338>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x232>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_GPIO_Init+0x33c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_GPIO_Init+0x340>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x22a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_GPIO_Init+0x344>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_GPIO_Init+0x348>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a50      	ldr	r2, [pc, #320]	; (80021fc <HAL_GPIO_Init+0x34c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_GPIO_Init+0x350>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x21a>
 80020c6:	2309      	movs	r3, #9
 80020c8:	e012      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ca:	230a      	movs	r3, #10
 80020cc:	e010      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ce:	2308      	movs	r3, #8
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x240>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x328>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_GPIO_Init+0x354>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_GPIO_Init+0x354>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_GPIO_Init+0x354>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_GPIO_Init+0x354>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_GPIO_Init+0x354>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae86 	bls.w	8001ed0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40022000 	.word	0x40022000
 8002200:	40022400 	.word	0x40022400
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43d9      	mvns	r1, r3
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e291      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8087 	beq.w	80023a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002294:	4b96      	ldr	r3, [pc, #600]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00c      	beq.n	80022ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a0:	4b93      	ldr	r3, [pc, #588]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62>
 80022ac:	4b90      	ldr	r3, [pc, #576]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d06c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x130>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d168      	bne.n	80023a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e26b      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x7a>
 80022dc:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a83      	ldr	r2, [pc, #524]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e02e      	b.n	8002348 <HAL_RCC_OscConfig+0xd8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x9c>
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b7c      	ldr	r3, [pc, #496]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7b      	ldr	r2, [pc, #492]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xd8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xc0>
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a72      	ldr	r2, [pc, #456]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xd8>
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff fc2e 	bl	8001bb0 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fc2a 	bl	8001bb0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e21f      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xe8>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff fc1a 	bl	8001bb0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fc16 	bl	8001bb0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e20b      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x110>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d069      	beq.n	8002482 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x190>
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x17a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1df      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	493d      	ldr	r1, [pc, #244]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e040      	b.n	8002482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7ff fbcc 	bl	8001bb0 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7ff fbc8 	bl	8001bb0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1bd      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4929      	ldr	r1, [pc, #164]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
 800244e:	e018      	b.n	8002482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff fba8 	bl	8001bb0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff fba4 	bl	8001bb0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e199      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d038      	beq.n	8002500 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7ff fb85 	bl	8001bb0 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7ff fb81 	bl	8001bb0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e176      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x23a>
 80024c8:	e01a      	b.n	8002500 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_RCC_OscConfig+0x280>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7ff fb6b 	bl	8001bb0 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff fb67 	bl	8001bb0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d903      	bls.n	80024f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e15c      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
 80024f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a4 	beq.w	8002656 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a87      	ldr	r2, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002542:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7e      	ldr	r2, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7ff fb2f 	bl	8001bb0 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7ff fb2b 	bl	8001bb0 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e120      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002568:	4b75      	ldr	r3, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x31a>
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_OscConfig+0x376>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x33c>
 8002592:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a66      	ldr	r2, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	e01c      	b.n	80025e6 <HAL_RCC_OscConfig+0x376>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x35e>
 80025b4:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e00b      	b.n	80025e6 <HAL_RCC_OscConfig+0x376>
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d015      	beq.n	800261a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fadf 	bl	8001bb0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fadb 	bl	8001bb0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0ce      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCC_OscConfig+0x386>
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff fac9 	bl	8001bb0 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff fac5 	bl	8001bb0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0b8      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a3b      	ldr	r2, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a4 	beq.w	80027a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d06b      	beq.n	8002744 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d149      	bne.n	8002708 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a30      	ldr	r2, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff fa96 	bl	8001bb0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fa92 	bl	8001bb0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e087      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	4313      	orrs	r3, r2
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7ff fa66 	bl	8001bb0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7ff fa62 	bl	8001bb0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e057      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x478>
 8002706:	e04f      	b.n	80027a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 800270e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fa4c 	bl	8001bb0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff fa48 	bl	8001bb0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e03d      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_OscConfig+0x4cc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x4ac>
 800273a:	e035      	b.n	80027a8 <HAL_RCC_OscConfig+0x538>
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x544>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d028      	beq.n	80027a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d121      	bne.n	80027a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d11a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0d0      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d910      	bls.n	8002800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b67      	ldr	r3, [pc, #412]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 020f 	bic.w	r2, r3, #15
 80027e6:	4965      	ldr	r1, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d040      	beq.n	80028dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d115      	bne.n	800289a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e073      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e06b      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4936      	ldr	r1, [pc, #216]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7ff f980 	bl	8001bb0 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7ff f97c 	bl	8001bb0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e053      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d210      	bcs.n	800290c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 020f 	bic.w	r2, r3, #15
 80028f2:	4922      	ldr	r1, [pc, #136]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490a      	ldr	r1, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1cc>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1d0>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1d4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fec2 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	0800868c 	.word	0x0800868c
 8002988:	2000000c 	.word	0x2000000c
 800298c:	20000010 	.word	0x20000010

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b090      	sub	sp, #64	; 0x40
 8002996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x40>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x3a>
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029c8:	e09b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ce:	e098      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	627a      	str	r2, [r7, #36]	; 0x24
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	460a      	mov	r2, r1
 8002a12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	4413      	add	r3, r2
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a2a:	f7fd fc41 	bl	80002b0 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a36:	e053      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4a:	f04f 0b00 	mov.w	fp, #0
 8002a4e:	4652      	mov	r2, sl
 8002a50:	465b      	mov	r3, fp
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	0159      	lsls	r1, r3, #5
 8002a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a60:	0150      	lsls	r0, r2, #5
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a82:	ebb2 0408 	subs.w	r4, r2, r8
 8002a86:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	00eb      	lsls	r3, r5, #3
 8002a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a98:	00e2      	lsls	r2, r4, #3
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	eb14 030a 	adds.w	r3, r4, sl
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	eb45 030b 	adc.w	r3, r5, fp
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	028b      	lsls	r3, r1, #10
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	028a      	lsls	r2, r1, #10
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	2200      	movs	r2, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	f7fd fbec 	bl	80002b0 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3740      	adds	r7, #64	; 0x40
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	017d7840 	.word	0x017d7840

08002b1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	2000000c 	.word	0x2000000c

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	0800869c 	.word	0x0800869c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffdc 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0800869c 	.word	0x0800869c

08002b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c10:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a68      	ldr	r2, [pc, #416]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	4964      	ldr	r1, [pc, #400]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	4959      	ldr	r1, [pc, #356]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d017      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	494a      	ldr	r1, [pc, #296]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 808b 	beq.w	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe ff5e 	bl	8001bb0 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fe ff5a 	bl	8001bb0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e357      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d035      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d02e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d114      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe ff22 	bl	8001bb0 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe ff1e 	bl	8001bb0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e319      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ee      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dae:	400b      	ands	r3, r1
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	0ffffcff 	.word	0x0ffffcff
 8002dc4:	4baa      	ldr	r3, [pc, #680]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4aa9      	ldr	r2, [pc, #676]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	49a4      	ldr	r1, [pc, #656]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dee:	4ba0      	ldr	r3, [pc, #640]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df4:	4a9e      	ldr	r2, [pc, #632]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dfe:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	4999      	ldr	r1, [pc, #612]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e2a:	4991      	ldr	r1, [pc, #580]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e4c:	4988      	ldr	r1, [pc, #544]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6e:	4980      	ldr	r1, [pc, #512]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e82:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4977      	ldr	r1, [pc, #476]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea4:	4b72      	ldr	r3, [pc, #456]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	496f      	ldr	r1, [pc, #444]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f023 020c 	bic.w	r2, r3, #12
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	4966      	ldr	r1, [pc, #408]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	495e      	ldr	r1, [pc, #376]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f0a:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	4955      	ldr	r1, [pc, #340]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4944      	ldr	r1, [pc, #272]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	493c      	ldr	r1, [pc, #240]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	492b      	ldr	r1, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d011      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe4:	4922      	ldr	r1, [pc, #136]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d006      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80d9 	beq.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a01      	ldr	r2, [pc, #4]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003070:	40023800 	.word	0x40023800
 8003074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003076:	f7fe fd9b 	bl	8001bb0 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800307e:	f7fe fd97 	bl	8001bb0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e194      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	019a      	lsls	r2, r3, #6
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	071b      	lsls	r3, r3, #28
 80030e4:	4957      	ldr	r1, [pc, #348]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003116:	d129      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003118:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	019a      	lsls	r2, r3, #6
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	071b      	lsls	r3, r3, #28
 800314c:	493d      	ldr	r1, [pc, #244]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f023 021f 	bic.w	r2, r3, #31
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	4937      	ldr	r1, [pc, #220]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01d      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	0e1b      	lsrs	r3, r3, #24
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	019a      	lsls	r2, r3, #6
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	071b      	lsls	r3, r3, #28
 80031ac:	4925      	ldr	r1, [pc, #148]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d011      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	019a      	lsls	r2, r3, #6
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	071b      	lsls	r3, r3, #28
 80031dc:	4919      	ldr	r1, [pc, #100]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fe fcde 	bl	8001bb0 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031f8:	f7fe fcda 	bl	8001bb0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0d7      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 80cd 	bne.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322a:	f7fe fcc1 	bl	8001bb0 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003232:	f7fe fcbd 	bl	8001bb0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d903      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0ba      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003244:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d0ed      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02e      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	0f1b      	lsrs	r3, r3, #28
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	4944      	ldr	r1, [pc, #272]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032ba:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	493d      	ldr	r1, [pc, #244]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d022      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e8:	d11d      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	019a      	lsls	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	4929      	ldr	r1, [pc, #164]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4917      	ldr	r1, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4911      	ldr	r1, [pc, #68]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003390:	f7fe fc0e 	bl	8001bb0 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003398:	f7fe fc0a 	bl	8001bb0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e007      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b6:	d1ef      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e049      	b.n	800346e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f841 	bl	8003476 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fa00 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e054      	b.n	800354e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_TIM_Base_Start_IT+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d01d      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_TIM_Base_Start_IT+0xd4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_TIM_Base_Start_IT+0xd8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_TIM_Base_Start_IT+0xdc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_TIM_Base_Start_IT+0xe0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_TIM_Base_Start_IT+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_TIM_Base_Start_IT+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d115      	bne.n	8003538 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_TIM_Base_Start_IT+0xec>)
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d015      	beq.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d011      	beq.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	e008      	b.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e000      	b.n	800354c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800
 8003578:	00010007 	.word	0x00010007

0800357c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0202 	mvn.w	r2, #2
 80035a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f905 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8f7 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f908 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8db 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8cd 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8de 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8b1 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8a3 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8b4 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f887 	bl	80037ce <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f879 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f88a 	bl	80037e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0201 	mvn.w	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd ffba 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f91a 	bl	8003960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f90d 	bl	8003974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d10e      	bne.n	8003786 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d107      	bne.n	8003786 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800377e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f838 	bl	80037f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d10e      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0220 	mvn.w	r2, #32
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8cd 	bl	800394c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a40      	ldr	r2, [pc, #256]	; (8003920 <TIM_Base_SetConfig+0x114>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3d      	ldr	r2, [pc, #244]	; (8003924 <TIM_Base_SetConfig+0x118>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <TIM_Base_SetConfig+0x11c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3b      	ldr	r2, [pc, #236]	; (800392c <TIM_Base_SetConfig+0x120>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <TIM_Base_SetConfig+0x124>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <TIM_Base_SetConfig+0x114>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d02b      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d027      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <TIM_Base_SetConfig+0x118>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d023      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <TIM_Base_SetConfig+0x11c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01f      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <TIM_Base_SetConfig+0x120>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01b      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a29      	ldr	r2, [pc, #164]	; (8003930 <TIM_Base_SetConfig+0x124>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d017      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a28      	ldr	r2, [pc, #160]	; (8003934 <TIM_Base_SetConfig+0x128>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <TIM_Base_SetConfig+0x12c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00f      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a26      	ldr	r2, [pc, #152]	; (800393c <TIM_Base_SetConfig+0x130>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <TIM_Base_SetConfig+0x134>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a24      	ldr	r2, [pc, #144]	; (8003944 <TIM_Base_SetConfig+0x138>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a23      	ldr	r2, [pc, #140]	; (8003948 <TIM_Base_SetConfig+0x13c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <TIM_Base_SetConfig+0x114>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_Base_SetConfig+0xf8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <TIM_Base_SetConfig+0x124>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d103      	bne.n	800390c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	615a      	str	r2, [r3, #20]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800
 8003940:	40001800 	.word	0x40001800
 8003944:	40001c00 	.word	0x40001c00
 8003948:	40002000 	.word	0x40002000

0800394c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e040      	b.n	8003a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f82c 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fbe6 	bl	8004198 <UART_SetConfig>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e022      	b.n	8003a1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fe3e 	bl	8004660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fec5 	bl	80047a4 <UART_CheckIdleState>
 8003a1a:	4603      	mov	r3, r0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d171      	bne.n	8003b20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Transmit+0x24>
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e06a      	b.n	8003b22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2221      	movs	r2, #33	; 0x21
 8003a58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fe f8a9 	bl	8001bb0 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d108      	bne.n	8003a8c <HAL_UART_Transmit+0x68>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e003      	b.n	8003a94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a94:	e02c      	b.n	8003af0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 feb6 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e038      	b.n	8003b22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e007      	b.n	8003ade <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1cc      	bne.n	8003a96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fe83 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e005      	b.n	8003b22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b08a      	sub	sp, #40	; 0x28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d132      	bne.n	8003ba8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_UART_Receive_IT+0x24>
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02b      	b.n	8003baa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	613b      	str	r3, [r7, #16]
   return(result);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fefe 	bl	80049a0 <UART_Start_Receive_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b0ba      	sub	sp, #232	; 0xe8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bde:	f640 030f 	movw	r3, #2063	; 0x80f
 8003be2:	4013      	ands	r3, r2
 8003be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d115      	bne.n	8003c1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00f      	beq.n	8003c1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8297 	beq.w	8004140 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
      }
      return;
 8003c1a:	e291      	b.n	8004140 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8117 	beq.w	8003e54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c36:	4b85      	ldr	r3, [pc, #532]	; (8003e4c <HAL_UART_IRQHandler+0x298>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 810a 	beq.w	8003e54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d011      	beq.n	8003c70 <HAL_UART_IRQHandler+0xbc>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d011      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xec>
 8003c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d011      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
 8003cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d012      	beq.n	8003d3e <HAL_UART_IRQHandler+0x18a>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00c      	beq.n	8003d3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 81fd 	beq.w	8004144 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04f      	beq.n	8003e36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fec8 	bl	8004b2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d141      	bne.n	8003e2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1d9      	bne.n	8003daa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d013      	beq.n	8003e26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <HAL_UART_IRQHandler+0x29c>)
 8003e04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe f82e 	bl	8001e6c <HAL_DMA_Abort_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d017      	beq.n	8003e46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e20:	4610      	mov	r0, r2
 8003e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	e00f      	b.n	8003e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9a0 	bl	800416c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	e00b      	b.n	8003e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f99c 	bl	800416c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e007      	b.n	8003e46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f998 	bl	800416c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e44:	e17e      	b.n	8004144 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e46:	bf00      	nop
    return;
 8003e48:	e17c      	b.n	8004144 <HAL_UART_IRQHandler+0x590>
 8003e4a:	bf00      	nop
 8003e4c:	04000120 	.word	0x04000120
 8003e50:	08004bf5 	.word	0x08004bf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 814c 	bne.w	80040f6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8145 	beq.w	80040f6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 813e 	beq.w	80040f6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	f040 80b6 	bne.w	8003ffe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8150 	beq.w	8004148 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	f080 8148 	bcs.w	8004148 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	f000 8086 	beq.w	8003fdc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003efe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1da      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e1      	bne.n	8003f1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e3      	bne.n	8003f56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e4      	bne.n	8003f9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fed8 	bl	8001d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8c2 	bl	8004180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ffc:	e0a4      	b.n	8004148 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800400a:	b29b      	uxth	r3, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8096 	beq.w	800414c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8091 	beq.w	800414c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800403e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
 800404e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e4      	bne.n	800402a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	623b      	str	r3, [r7, #32]
   return(result);
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004084:	633a      	str	r2, [r7, #48]	; 0x30
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	69b9      	ldr	r1, [r7, #24]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	617b      	str	r3, [r7, #20]
   return(result);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e4      	bne.n	80040ac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f846 	bl	8004180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040f4:	e02a      	b.n	800414c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00e      	beq.n	8004120 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01c      	beq.n	8004150 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
    }
    return;
 800411e:	e017      	b.n	8004150 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_UART_IRQHandler+0x59e>
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00c      	beq.n	8004152 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fd71 	bl	8004c20 <UART_EndTransmit_IT>
    return;
 800413e:	e008      	b.n	8004152 <HAL_UART_IRQHandler+0x59e>
      return;
 8004140:	bf00      	nop
 8004142:	e006      	b.n	8004152 <HAL_UART_IRQHandler+0x59e>
    return;
 8004144:	bf00      	nop
 8004146:	e004      	b.n	8004152 <HAL_UART_IRQHandler+0x59e>
      return;
 8004148:	bf00      	nop
 800414a:	e002      	b.n	8004152 <HAL_UART_IRQHandler+0x59e>
      return;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_UART_IRQHandler+0x59e>
    return;
 8004150:	bf00      	nop
  }

}
 8004152:	37e8      	adds	r7, #232	; 0xe8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4ba6      	ldr	r3, [pc, #664]	; (800445c <UART_SetConfig+0x2c4>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a94      	ldr	r2, [pc, #592]	; (8004460 <UART_SetConfig+0x2c8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d120      	bne.n	8004256 <UART_SetConfig+0xbe>
 8004214:	4b93      	ldr	r3, [pc, #588]	; (8004464 <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d816      	bhi.n	8004250 <UART_SetConfig+0xb8>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x90>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004245 	.word	0x08004245
 8004230:	0800423f 	.word	0x0800423f
 8004234:	0800424b 	.word	0x0800424b
 8004238:	2301      	movs	r3, #1
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e150      	b.n	80044e0 <UART_SetConfig+0x348>
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e14d      	b.n	80044e0 <UART_SetConfig+0x348>
 8004244:	2304      	movs	r3, #4
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e14a      	b.n	80044e0 <UART_SetConfig+0x348>
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e147      	b.n	80044e0 <UART_SetConfig+0x348>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e144      	b.n	80044e0 <UART_SetConfig+0x348>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a83      	ldr	r2, [pc, #524]	; (8004468 <UART_SetConfig+0x2d0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d132      	bne.n	80042c6 <UART_SetConfig+0x12e>
 8004260:	4b80      	ldr	r3, [pc, #512]	; (8004464 <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d828      	bhi.n	80042c0 <UART_SetConfig+0x128>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0xdc>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042c1 	.word	0x080042c1
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042c1 	.word	0x080042c1
 8004284:	080042b5 	.word	0x080042b5
 8004288:	080042c1 	.word	0x080042c1
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042c1 	.word	0x080042c1
 8004294:	080042af 	.word	0x080042af
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c1 	.word	0x080042c1
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e118      	b.n	80044e0 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e115      	b.n	80044e0 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e112      	b.n	80044e0 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e10f      	b.n	80044e0 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e10c      	b.n	80044e0 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a68      	ldr	r2, [pc, #416]	; (800446c <UART_SetConfig+0x2d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d120      	bne.n	8004312 <UART_SetConfig+0x17a>
 80042d0:	4b64      	ldr	r3, [pc, #400]	; (8004464 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042da:	2b30      	cmp	r3, #48	; 0x30
 80042dc:	d013      	beq.n	8004306 <UART_SetConfig+0x16e>
 80042de:	2b30      	cmp	r3, #48	; 0x30
 80042e0:	d814      	bhi.n	800430c <UART_SetConfig+0x174>
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d009      	beq.n	80042fa <UART_SetConfig+0x162>
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d810      	bhi.n	800430c <UART_SetConfig+0x174>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <UART_SetConfig+0x15c>
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d006      	beq.n	8004300 <UART_SetConfig+0x168>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x174>
 80042f4:	2300      	movs	r3, #0
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e0f2      	b.n	80044e0 <UART_SetConfig+0x348>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e0ef      	b.n	80044e0 <UART_SetConfig+0x348>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e0ec      	b.n	80044e0 <UART_SetConfig+0x348>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e0e9      	b.n	80044e0 <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e0e6      	b.n	80044e0 <UART_SetConfig+0x348>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a56      	ldr	r2, [pc, #344]	; (8004470 <UART_SetConfig+0x2d8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d120      	bne.n	800435e <UART_SetConfig+0x1c6>
 800431c:	4b51      	ldr	r3, [pc, #324]	; (8004464 <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004326:	2bc0      	cmp	r3, #192	; 0xc0
 8004328:	d013      	beq.n	8004352 <UART_SetConfig+0x1ba>
 800432a:	2bc0      	cmp	r3, #192	; 0xc0
 800432c:	d814      	bhi.n	8004358 <UART_SetConfig+0x1c0>
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d009      	beq.n	8004346 <UART_SetConfig+0x1ae>
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d810      	bhi.n	8004358 <UART_SetConfig+0x1c0>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <UART_SetConfig+0x1a8>
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d006      	beq.n	800434c <UART_SetConfig+0x1b4>
 800433e:	e00b      	b.n	8004358 <UART_SetConfig+0x1c0>
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e0cc      	b.n	80044e0 <UART_SetConfig+0x348>
 8004346:	2302      	movs	r3, #2
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e0c9      	b.n	80044e0 <UART_SetConfig+0x348>
 800434c:	2304      	movs	r3, #4
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e0c6      	b.n	80044e0 <UART_SetConfig+0x348>
 8004352:	2308      	movs	r3, #8
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e0c3      	b.n	80044e0 <UART_SetConfig+0x348>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e0c0      	b.n	80044e0 <UART_SetConfig+0x348>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a44      	ldr	r2, [pc, #272]	; (8004474 <UART_SetConfig+0x2dc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d125      	bne.n	80043b4 <UART_SetConfig+0x21c>
 8004368:	4b3e      	ldr	r3, [pc, #248]	; (8004464 <UART_SetConfig+0x2cc>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d017      	beq.n	80043a8 <UART_SetConfig+0x210>
 8004378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437c:	d817      	bhi.n	80043ae <UART_SetConfig+0x216>
 800437e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004382:	d00b      	beq.n	800439c <UART_SetConfig+0x204>
 8004384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004388:	d811      	bhi.n	80043ae <UART_SetConfig+0x216>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <UART_SetConfig+0x1fe>
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d006      	beq.n	80043a2 <UART_SetConfig+0x20a>
 8004394:	e00b      	b.n	80043ae <UART_SetConfig+0x216>
 8004396:	2300      	movs	r3, #0
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0a1      	b.n	80044e0 <UART_SetConfig+0x348>
 800439c:	2302      	movs	r3, #2
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e09e      	b.n	80044e0 <UART_SetConfig+0x348>
 80043a2:	2304      	movs	r3, #4
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e09b      	b.n	80044e0 <UART_SetConfig+0x348>
 80043a8:	2308      	movs	r3, #8
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e098      	b.n	80044e0 <UART_SetConfig+0x348>
 80043ae:	2310      	movs	r3, #16
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e095      	b.n	80044e0 <UART_SetConfig+0x348>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <UART_SetConfig+0x2e0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d125      	bne.n	800440a <UART_SetConfig+0x272>
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <UART_SetConfig+0x2cc>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043cc:	d017      	beq.n	80043fe <UART_SetConfig+0x266>
 80043ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d2:	d817      	bhi.n	8004404 <UART_SetConfig+0x26c>
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d00b      	beq.n	80043f2 <UART_SetConfig+0x25a>
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d811      	bhi.n	8004404 <UART_SetConfig+0x26c>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <UART_SetConfig+0x254>
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	d006      	beq.n	80043f8 <UART_SetConfig+0x260>
 80043ea:	e00b      	b.n	8004404 <UART_SetConfig+0x26c>
 80043ec:	2301      	movs	r3, #1
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e076      	b.n	80044e0 <UART_SetConfig+0x348>
 80043f2:	2302      	movs	r3, #2
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e073      	b.n	80044e0 <UART_SetConfig+0x348>
 80043f8:	2304      	movs	r3, #4
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e070      	b.n	80044e0 <UART_SetConfig+0x348>
 80043fe:	2308      	movs	r3, #8
 8004400:	77fb      	strb	r3, [r7, #31]
 8004402:	e06d      	b.n	80044e0 <UART_SetConfig+0x348>
 8004404:	2310      	movs	r3, #16
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e06a      	b.n	80044e0 <UART_SetConfig+0x348>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1b      	ldr	r2, [pc, #108]	; (800447c <UART_SetConfig+0x2e4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d138      	bne.n	8004486 <UART_SetConfig+0x2ee>
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <UART_SetConfig+0x2cc>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800441e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004422:	d017      	beq.n	8004454 <UART_SetConfig+0x2bc>
 8004424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004428:	d82a      	bhi.n	8004480 <UART_SetConfig+0x2e8>
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442e:	d00b      	beq.n	8004448 <UART_SetConfig+0x2b0>
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d824      	bhi.n	8004480 <UART_SetConfig+0x2e8>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <UART_SetConfig+0x2aa>
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443e:	d006      	beq.n	800444e <UART_SetConfig+0x2b6>
 8004440:	e01e      	b.n	8004480 <UART_SetConfig+0x2e8>
 8004442:	2300      	movs	r3, #0
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e04b      	b.n	80044e0 <UART_SetConfig+0x348>
 8004448:	2302      	movs	r3, #2
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e048      	b.n	80044e0 <UART_SetConfig+0x348>
 800444e:	2304      	movs	r3, #4
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e045      	b.n	80044e0 <UART_SetConfig+0x348>
 8004454:	2308      	movs	r3, #8
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e042      	b.n	80044e0 <UART_SetConfig+0x348>
 800445a:	bf00      	nop
 800445c:	efff69f3 	.word	0xefff69f3
 8004460:	40011000 	.word	0x40011000
 8004464:	40023800 	.word	0x40023800
 8004468:	40004400 	.word	0x40004400
 800446c:	40004800 	.word	0x40004800
 8004470:	40004c00 	.word	0x40004c00
 8004474:	40005000 	.word	0x40005000
 8004478:	40011400 	.word	0x40011400
 800447c:	40007800 	.word	0x40007800
 8004480:	2310      	movs	r3, #16
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e02c      	b.n	80044e0 <UART_SetConfig+0x348>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a72      	ldr	r2, [pc, #456]	; (8004654 <UART_SetConfig+0x4bc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d125      	bne.n	80044dc <UART_SetConfig+0x344>
 8004490:	4b71      	ldr	r3, [pc, #452]	; (8004658 <UART_SetConfig+0x4c0>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800449a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800449e:	d017      	beq.n	80044d0 <UART_SetConfig+0x338>
 80044a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044a4:	d817      	bhi.n	80044d6 <UART_SetConfig+0x33e>
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044aa:	d00b      	beq.n	80044c4 <UART_SetConfig+0x32c>
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d811      	bhi.n	80044d6 <UART_SetConfig+0x33e>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <UART_SetConfig+0x326>
 80044b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ba:	d006      	beq.n	80044ca <UART_SetConfig+0x332>
 80044bc:	e00b      	b.n	80044d6 <UART_SetConfig+0x33e>
 80044be:	2300      	movs	r3, #0
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e00d      	b.n	80044e0 <UART_SetConfig+0x348>
 80044c4:	2302      	movs	r3, #2
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e00a      	b.n	80044e0 <UART_SetConfig+0x348>
 80044ca:	2304      	movs	r3, #4
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e007      	b.n	80044e0 <UART_SetConfig+0x348>
 80044d0:	2308      	movs	r3, #8
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e004      	b.n	80044e0 <UART_SetConfig+0x348>
 80044d6:	2310      	movs	r3, #16
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e001      	b.n	80044e0 <UART_SetConfig+0x348>
 80044dc:	2310      	movs	r3, #16
 80044de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e8:	d15b      	bne.n	80045a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d828      	bhi.n	8004542 <UART_SetConfig+0x3aa>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x360>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004525 	.word	0x08004525
 8004500:	0800452d 	.word	0x0800452d
 8004504:	08004543 	.word	0x08004543
 8004508:	08004533 	.word	0x08004533
 800450c:	08004543 	.word	0x08004543
 8004510:	08004543 	.word	0x08004543
 8004514:	08004543 	.word	0x08004543
 8004518:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fb0a 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004520:	61b8      	str	r0, [r7, #24]
        break;
 8004522:	e013      	b.n	800454c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004524:	f7fe fb1a 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004528:	61b8      	str	r0, [r7, #24]
        break;
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <UART_SetConfig+0x4c4>)
 800452e:	61bb      	str	r3, [r7, #24]
        break;
 8004530:	e00c      	b.n	800454c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fa2d 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8004536:	61b8      	str	r0, [r7, #24]
        break;
 8004538:	e008      	b.n	800454c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	61bb      	str	r3, [r7, #24]
        break;
 8004540:	e004      	b.n	800454c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	77bb      	strb	r3, [r7, #30]
        break;
 800454a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d074      	beq.n	800463c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	005a      	lsls	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d916      	bls.n	800459c <UART_SetConfig+0x404>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d212      	bcs.n	800459c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b29a      	uxth	r2, r3
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	4313      	orrs	r3, r2
 8004590:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	89fa      	ldrh	r2, [r7, #14]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e04f      	b.n	800463c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	77bb      	strb	r3, [r7, #30]
 80045a0:	e04c      	b.n	800463c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d828      	bhi.n	80045fa <UART_SetConfig+0x462>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x418>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe faae 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 80045d8:	61b8      	str	r0, [r7, #24]
        break;
 80045da:	e013      	b.n	8004604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe fabe 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 80045e0:	61b8      	str	r0, [r7, #24]
        break;
 80045e2:	e00f      	b.n	8004604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <UART_SetConfig+0x4c4>)
 80045e6:	61bb      	str	r3, [r7, #24]
        break;
 80045e8:	e00c      	b.n	8004604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe f9d1 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 80045ee:	61b8      	str	r0, [r7, #24]
        break;
 80045f0:	e008      	b.n	8004604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f6:	61bb      	str	r3, [r7, #24]
        break;
 80045f8:	e004      	b.n	8004604 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	77bb      	strb	r3, [r7, #30]
        break;
 8004602:	bf00      	nop
    }

    if (pclk != 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d018      	beq.n	800463c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	085a      	lsrs	r2, r3, #1
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	441a      	add	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d909      	bls.n	8004638 <UART_SetConfig+0x4a0>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462a:	d205      	bcs.n	8004638 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	e001      	b.n	800463c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004648:	7fbb      	ldrb	r3, [r7, #30]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40007c00 	.word	0x40007c00
 8004658:	40023800 	.word	0x40023800
 800465c:	00f42400 	.word	0x00f42400

08004660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01a      	beq.n	8004776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d10a      	bne.n	8004776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b4:	f7fd f9fc 	bl	8001bb0 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10e      	bne.n	80047e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f81b 	bl	8004812 <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e011      	b.n	800480a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b09c      	sub	sp, #112	; 0x70
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004822:	e0a7      	b.n	8004974 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	f000 80a3 	beq.w	8004974 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7fd f9bf 	bl	8001bb0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <UART_WaitOnFlagUntilTimeout+0x32>
 800483e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004840:	2b00      	cmp	r3, #0
 8004842:	d13f      	bne.n	80048c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004858:	667b      	str	r3, [r7, #100]	; 0x64
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004864:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e6      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	663b      	str	r3, [r7, #96]	; 0x60
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004896:	64ba      	str	r2, [r7, #72]	; 0x48
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800489c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e068      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d050      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d148      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
 800490c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e6      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	613b      	str	r3, [r7, #16]
   return(result);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3308      	adds	r3, #8
 800493c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800493e:	623a      	str	r2, [r7, #32]
 8004940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	61bb      	str	r3, [r7, #24]
   return(result);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e5      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e010      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	f43f af48 	beq.w	8004824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3770      	adds	r7, #112	; 0x70
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b097      	sub	sp, #92	; 0x5c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d10e      	bne.n	80049f2 <UART_Start_Receive_IT+0x52>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <UART_Start_Receive_IT+0x48>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049e6:	e02d      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	22ff      	movs	r2, #255	; 0xff
 80049ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f0:	e028      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <UART_Start_Receive_IT+0x76>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <UART_Start_Receive_IT+0x6c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a0a:	e01b      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a14:	e016      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1e:	d10d      	bne.n	8004a3c <UART_Start_Receive_IT+0x9c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <UART_Start_Receive_IT+0x92>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	227f      	movs	r2, #127	; 0x7f
 8004a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a30:	e008      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a3a:	e003      	b.n	8004a44 <UART_Start_Receive_IT+0xa4>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2222      	movs	r2, #34	; 0x22
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a74:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d107      	bne.n	8004aa2 <UART_Start_Receive_IT+0x102>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <UART_Start_Receive_IT+0x184>)
 8004a9e:	669a      	str	r2, [r3, #104]	; 0x68
 8004aa0:	e002      	b.n	8004aa8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <UART_Start_Receive_IT+0x188>)
 8004aa6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d019      	beq.n	8004ae4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <UART_Start_Receive_IT+0x110>
 8004ae2:	e018      	b.n	8004b16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	613b      	str	r3, [r7, #16]
   return(result);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f043 0320 	orr.w	r3, r3, #32
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	69f9      	ldr	r1, [r7, #28]
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	375c      	adds	r7, #92	; 0x5c
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	08004ddb 	.word	0x08004ddb
 8004b28:	08004c75 	.word	0x08004c75

08004b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b095      	sub	sp, #84	; 0x54
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40
 8004b54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e6      	bne.n	8004b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d118      	bne.n	8004bd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6979      	ldr	r1, [r7, #20]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e6      	bne.n	8004ba2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004be8:	bf00      	nop
 8004bea:	3754      	adds	r7, #84	; 0x54
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff faaa 	bl	800416c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	613b      	str	r3, [r7, #16]
   return(result);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fa76 	bl	8004158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6c:	bf00      	nop
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b096      	sub	sp, #88	; 0x58
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8c:	2b22      	cmp	r3, #34	; 0x22
 8004c8e:	f040 8098 	bne.w	8004dc2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004ca0:	b2d9      	uxtb	r1, r3
 8004ca2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	400a      	ands	r2, r1
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d17b      	bne.n	8004dd2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e6      	bne.n	8004cda <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3308      	adds	r3, #8
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d12e      	bne.n	8004dba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e6      	bne.n	8004d62 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d103      	bne.n	8004daa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2210      	movs	r2, #16
 8004da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff f9e4 	bl	8004180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004db8:	e00b      	b.n	8004dd2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fb fc2e 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8004dc0:	e007      	b.n	8004dd2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0208 	orr.w	r2, r2, #8
 8004dd0:	619a      	str	r2, [r3, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	3758      	adds	r7, #88	; 0x58
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b096      	sub	sp, #88	; 0x58
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004de8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df2:	2b22      	cmp	r3, #34	; 0x22
 8004df4:	f040 8098 	bne.w	8004f28 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004e0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d17b      	bne.n	8004f38 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3308      	adds	r3, #8
 8004e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d12e      	bne.n	8004f20 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e6      	bne.n	8004ec8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d103      	bne.n	8004f10 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f931 	bl	8004180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f1e:	e00b      	b.n	8004f38 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fb fb7b 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8004f26:	e007      	b.n	8004f38 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	619a      	str	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	3758      	adds	r7, #88	; 0x58
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f52:	2b84      	cmp	r3, #132	; 0x84
 8004f54:	d005      	beq.n	8004f62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3303      	adds	r3, #3
 8004f60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f74:	f000 fe88 	bl	8005c88 <vTaskStartScheduler>
  
  return osOK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f80:	b089      	sub	sp, #36	; 0x24
 8004f82:	af04      	add	r7, sp, #16
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <osThreadCreate+0x54>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01c      	beq.n	8004fd2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685c      	ldr	r4, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681d      	ldr	r5, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691e      	ldr	r6, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff ffc8 	bl	8004f40 <makeFreeRtosPriority>
 8004fb0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fba:	9202      	str	r2, [sp, #8]
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	9100      	str	r1, [sp, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 fbe2 	bl	8005790 <xTaskCreateStatic>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e01c      	b.n	800500c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685c      	ldr	r4, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fde:	b29e      	uxth	r6, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff ffaa 	bl	8004f40 <makeFreeRtosPriority>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f107 030c 	add.w	r3, r7, #12
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	9200      	str	r2, [sp, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 fc2a 	bl	8005856 <xTaskCreate>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800500c:	68fb      	ldr	r3, [r7, #12]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005016 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <osDelay+0x16>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	e000      	b.n	800502e <osDelay+0x18>
 800502c:	2301      	movs	r3, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fd60 	bl	8005af4 <vTaskDelay>
  
  return osOK;
 8005034:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f103 0208 	add.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f103 0208 	add.w	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d103      	bne.n	8005100 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e00c      	b.n	800511a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3308      	adds	r3, #8
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e002      	b.n	800510e <vListInsert+0x2e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d2f6      	bcs.n	8005108 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6892      	ldr	r2, [r2, #8]
 8005168:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6852      	ldr	r2, [r2, #4]
 8005172:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d103      	bne.n	8005186 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10c      	bne.n	80051d6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80051c0:	b672      	cpsid	i
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	b662      	cpsie	i
 80051d0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80051d6:	f001 fc41 	bl	8006a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	3b01      	subs	r3, #1
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	441a      	add	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	22ff      	movs	r2, #255	; 0xff
 8005222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d114      	bne.n	8005256 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ff83 	bl	8006144 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <xQueueGenericReset+0xd0>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	e009      	b.n	800526a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3310      	adds	r3, #16
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff feef 	bl	800503e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3324      	adds	r3, #36	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff feea 	bl	800503e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800526a:	f001 fc2b 	bl	8006ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800526e:	2301      	movs	r3, #1
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8005290:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005294:	b672      	cpsid	i
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	b662      	cpsie	i
 80052a4:	613b      	str	r3, [r7, #16]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e004      	b.n	80052c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3348      	adds	r3, #72	; 0x48
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 fcf5 	bl	8006cb4 <pvPortMalloc>
 80052ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	3348      	adds	r3, #72	; 0x48
 80052da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052e4:	79fa      	ldrb	r2, [r7, #7]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4613      	mov	r3, r2
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f805 	bl	8005300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052f6:	69bb      	ldr	r3, [r7, #24]
	}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e002      	b.n	8005322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800532e:	2101      	movs	r1, #1
 8005330:	69b8      	ldr	r0, [r7, #24]
 8005332:	f7ff ff39 	bl	80051a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08e      	sub	sp, #56	; 0x38
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005352:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005356:	b672      	cpsid	i
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	b662      	cpsie	i
 8005366:	623b      	str	r3, [r7, #32]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <xQueueGiveFromISR+0x50>
	__asm volatile
 8005374:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005378:	b672      	cpsid	i
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	b662      	cpsie	i
 8005388:	61fb      	str	r3, [r7, #28]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <xQueueGiveFromISR+0x60>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <xQueueGiveFromISR+0x64>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGiveFromISR+0x66>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10c      	bne.n	80053c2 <xQueueGiveFromISR+0x84>
	__asm volatile
 80053a8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053ac:	b672      	cpsid	i
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	b662      	cpsie	i
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053c2:	f001 fc33 	bl	8006c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053c6:	f3ef 8211 	mrs	r2, BASEPRI
 80053ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	617a      	str	r2, [r7, #20]
 80053e0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d22b      	bcs.n	800544e <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d112      	bne.n	8005438 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	3324      	adds	r3, #36	; 0x24
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fe90 	bl	8006144 <xTaskRemoveFromEventList>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e007      	b.n	8005448 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800543c:	3301      	adds	r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	b25a      	sxtb	r2, r3
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005448:	2301      	movs	r3, #1
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
 800544c:	e001      	b.n	8005452 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800544e:	2300      	movs	r3, #0
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800545c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005460:	4618      	mov	r0, r3
 8005462:	3738      	adds	r7, #56	; 0x38
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005484:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	623b      	str	r3, [r7, #32]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80054a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054aa:	b672      	cpsid	i
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	b662      	cpsie	i
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054c0:	f001 f808 	bl	80064d4 <xTaskGetSchedulerState>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <xQueueSemaphoreTake+0x68>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <xQueueSemaphoreTake+0x6c>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <xQueueSemaphoreTake+0x6e>
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10c      	bne.n	80054f4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80054da:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054de:	b672      	cpsid	i
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	b662      	cpsie	i
 80054ee:	61bb      	str	r3, [r7, #24]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054f4:	f001 fab2 	bl	8006a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d024      	beq.n	800554e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005514:	f001 f91a 	bl	800674c <pvTaskIncrementMutexHeldCount>
 8005518:	4602      	mov	r2, r0
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00f      	beq.n	8005546 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	3310      	adds	r3, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fe0a 	bl	8006144 <xTaskRemoveFromEventList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005536:	4b55      	ldr	r3, [pc, #340]	; (800568c <xQueueSemaphoreTake+0x224>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005546:	f001 fabd 	bl	8006ac4 <vPortExitCritical>
				return pdPASS;
 800554a:	2301      	movs	r3, #1
 800554c:	e099      	b.n	8005682 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d113      	bne.n	800557c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800555a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800555e:	b672      	cpsid	i
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	b662      	cpsie	i
 800556e:	617b      	str	r3, [r7, #20]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005574:	f001 faa6 	bl	8006ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005578:	2300      	movs	r3, #0
 800557a:	e082      	b.n	8005682 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fe40 	bl	800620c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005590:	f001 fa98 	bl	8006ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005594:	f000 fbe6 	bl	8005d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005598:	f001 fa60 	bl	8006a5c <vPortEnterCritical>
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <xQueueSemaphoreTake+0x14a>
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <xQueueSemaphoreTake+0x160>
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c8:	f001 fa7c 	bl	8006ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055cc:	463a      	mov	r2, r7
 80055ce:	f107 030c 	add.w	r3, r7, #12
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fe2f 	bl	8006238 <xTaskCheckForTimeOut>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d132      	bne.n	8005646 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055e2:	f000 f8bf 	bl	8005764 <prvIsQueueEmpty>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d026      	beq.n	800563a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80055f4:	f001 fa32 	bl	8006a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 ff87 	bl	8006510 <xTaskPriorityInherit>
 8005602:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005604:	f001 fa5e 	bl	8006ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fd71 	bl	80060f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005618:	f000 f852 	bl	80056c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800561c:	f000 fbb0 	bl	8005d80 <xTaskResumeAll>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f af66 	bne.w	80054f4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <xQueueSemaphoreTake+0x224>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	e75c      	b.n	80054f4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800563a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800563c:	f000 f840 	bl	80056c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005640:	f000 fb9e 	bl	8005d80 <xTaskResumeAll>
 8005644:	e756      	b.n	80054f4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005648:	f000 f83a 	bl	80056c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564c:	f000 fb98 	bl	8005d80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005652:	f000 f887 	bl	8005764 <prvIsQueueEmpty>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	f43f af4b 	beq.w	80054f4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005664:	f001 f9fa 	bl	8006a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800566a:	f000 f811 	bl	8005690 <prvGetDisinheritPriorityAfterTimeout>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f000 ffca 	bl	8006610 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800567c:	f001 fa22 	bl	8006ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005682:	4618      	mov	r0, r3
 8005684:	3738      	adds	r7, #56	; 0x38
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1c3 0307 	rsb	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e001      	b.n	80056b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056b2:	68fb      	ldr	r3, [r7, #12]
	}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056c8:	f001 f9c8 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d4:	e011      	b.n	80056fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d012      	beq.n	8005704 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3324      	adds	r3, #36	; 0x24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fd2e 	bl	8006144 <xTaskRemoveFromEventList>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ee:	f000 fe09 	bl	8006304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dce9      	bgt.n	80056d6 <prvUnlockQueue+0x16>
 8005702:	e000      	b.n	8005706 <prvUnlockQueue+0x46>
					break;
 8005704:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	22ff      	movs	r2, #255	; 0xff
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800570e:	f001 f9d9 	bl	8006ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005712:	f001 f9a3 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800571c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571e:	e011      	b.n	8005744 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d012      	beq.n	800574e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3310      	adds	r3, #16
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd09 	bl	8006144 <xTaskRemoveFromEventList>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005738:	f000 fde4 	bl	8006304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800573c:	7bbb      	ldrb	r3, [r7, #14]
 800573e:	3b01      	subs	r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dce9      	bgt.n	8005720 <prvUnlockQueue+0x60>
 800574c:	e000      	b.n	8005750 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800574e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005758:	f001 f9b4 	bl	8006ac4 <vPortExitCritical>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800576c:	f001 f976 	bl	8006a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e001      	b.n	8005782 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005782:	f001 f99f 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af04      	add	r7, sp, #16
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10c      	bne.n	80057be <xTaskCreateStatic+0x2e>
	__asm volatile
 80057a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057a8:	b672      	cpsid	i
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	b662      	cpsie	i
 80057b8:	623b      	str	r3, [r7, #32]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10c      	bne.n	80057de <xTaskCreateStatic+0x4e>
	__asm volatile
 80057c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057c8:	b672      	cpsid	i
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	b662      	cpsie	i
 80057d8:	61fb      	str	r3, [r7, #28]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057de:	23b4      	movs	r3, #180	; 0xb4
 80057e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2bb4      	cmp	r3, #180	; 0xb4
 80057e6:	d00c      	beq.n	8005802 <xTaskCreateStatic+0x72>
	__asm volatile
 80057e8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057ec:	b672      	cpsid	i
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	b662      	cpsie	i
 80057fc:	61bb      	str	r3, [r7, #24]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005802:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01e      	beq.n	8005848 <xTaskCreateStatic+0xb8>
 800580a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005818:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	2202      	movs	r2, #2
 800581e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005822:	2300      	movs	r3, #0
 8005824:	9303      	str	r3, [sp, #12]
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	9302      	str	r3, [sp, #8]
 800582a:	f107 0314 	add.w	r3, r7, #20
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f850 	bl	80058e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005842:	f000 f8ed 	bl	8005a20 <prvAddNewTaskToReadyList>
 8005846:	e001      	b.n	800584c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800584c:	697b      	ldr	r3, [r7, #20]
	}
 800584e:	4618      	mov	r0, r3
 8005850:	3728      	adds	r7, #40	; 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08c      	sub	sp, #48	; 0x30
 800585a:	af04      	add	r7, sp, #16
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fa22 	bl	8006cb4 <pvPortMalloc>
 8005870:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005878:	20b4      	movs	r0, #180	; 0xb4
 800587a:	f001 fa1b 	bl	8006cb4 <pvPortMalloc>
 800587e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
 800588c:	e005      	b.n	800589a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800588e:	6978      	ldr	r0, [r7, #20]
 8005890:	f001 fada 	bl	8006e48 <vPortFree>
 8005894:	e001      	b.n	800589a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9303      	str	r3, [sp, #12]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f80e 	bl	80058e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c4:	69f8      	ldr	r0, [r7, #28]
 80058c6:	f000 f8ab 	bl	8005a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058ca:	2301      	movs	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e002      	b.n	80058d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058d6:	69bb      	ldr	r3, [r7, #24]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058f8:	440b      	add	r3, r1
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005912:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005916:	b672      	cpsid	i
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	b662      	cpsie	i
 8005926:	617b      	str	r3, [r7, #20]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01f      	beq.n	8005972 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005932:	2300      	movs	r3, #0
 8005934:	61fb      	str	r3, [r7, #28]
 8005936:	e012      	b.n	800595e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	7819      	ldrb	r1, [r3, #0]
 8005940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	3334      	adds	r3, #52	; 0x34
 8005948:	460a      	mov	r2, r1
 800594a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d006      	beq.n	8005966 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d9e9      	bls.n	8005938 <prvInitialiseNewTask+0x58>
 8005964:	e000      	b.n	8005968 <prvInitialiseNewTask+0x88>
			{
				break;
 8005966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005970:	e003      	b.n	800597a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	2b06      	cmp	r3, #6
 800597e:	d901      	bls.n	8005984 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005980:	2306      	movs	r3, #6
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	2200      	movs	r2, #0
 8005994:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fb6f 	bl	800507e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	3318      	adds	r3, #24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fb6a 	bl	800507e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	f1c3 0207 	rsb	r2, r3, #7
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	334c      	adds	r3, #76	; 0x4c
 80059d4:	2260      	movs	r2, #96	; 0x60
 80059d6:	2100      	movs	r1, #0
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 fc84 	bl	80072e6 <memset>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	4a0c      	ldr	r2, [pc, #48]	; (8005a14 <prvInitialiseNewTask+0x134>)
 80059e2:	651a      	str	r2, [r3, #80]	; 0x50
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <prvInitialiseNewTask+0x138>)
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	4a0b      	ldr	r2, [pc, #44]	; (8005a1c <prvInitialiseNewTask+0x13c>)
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	69b8      	ldr	r0, [r7, #24]
 80059f6:	f000 ff23 	bl	8006840 <pxPortInitialiseStack>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a0c:	bf00      	nop
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	080086c4 	.word	0x080086c4
 8005a18:	080086e4 	.word	0x080086e4
 8005a1c:	080086a4 	.word	0x080086a4

08005a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a28:	f001 f818 	bl	8006a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ad8 <prvAddNewTaskToReadyList+0xb8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <prvAddNewTaskToReadyList+0xb8>)
 8005a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a36:	4b29      	ldr	r3, [pc, #164]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a3e:	4a27      	ldr	r2, [pc, #156]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a44:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <prvAddNewTaskToReadyList+0xb8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d110      	bne.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a4c:	f000 fc7e 	bl	800634c <prvInitialiseTaskLists>
 8005a50:	e00d      	b.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <prvAddNewTaskToReadyList+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d802      	bhi.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a68:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <prvAddNewTaskToReadyList+0xc4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3301      	adds	r3, #1
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <prvAddNewTaskToReadyList+0xc4>)
 8005a76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <prvAddNewTaskToReadyList+0xc8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <prvAddNewTaskToReadyList+0xc8>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <prvAddNewTaskToReadyList+0xcc>)
 8005a98:	441a      	add	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7ff faf9 	bl	8005098 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa6:	f001 f80d 	bl	8006ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <prvAddNewTaskToReadyList+0xc0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d207      	bcs.n	8005ad0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <prvAddNewTaskToReadyList+0xd0>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000b44 	.word	0x20000b44
 8005adc:	20000a44 	.word	0x20000a44
 8005ae0:	20000b50 	.word	0x20000b50
 8005ae4:	20000b60 	.word	0x20000b60
 8005ae8:	20000b4c 	.word	0x20000b4c
 8005aec:	20000a48 	.word	0x20000a48
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <vTaskDelay+0x64>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <vTaskDelay+0x34>
	__asm volatile
 8005b0e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005b12:	b672      	cpsid	i
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	b662      	cpsie	i
 8005b22:	60bb      	str	r3, [r7, #8]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b28:	f000 f91c 	bl	8005d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fe20 	bl	8006774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b34:	f000 f924 	bl	8005d80 <xTaskResumeAll>
 8005b38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <vTaskDelay+0x68>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000b6c 	.word	0x20000b6c
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005b68:	f000 ff78 	bl	8006a5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <vTaskSuspend+0x18>
 8005b72:	4b3d      	ldr	r3, [pc, #244]	; (8005c68 <vTaskSuspend+0x108>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	e000      	b.n	8005b7a <vTaskSuspend+0x1a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fae6 	bl	8005152 <uxListRemove>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d115      	bne.n	8005bb8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4936      	ldr	r1, [pc, #216]	; (8005c6c <vTaskSuspend+0x10c>)
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <vTaskSuspend+0x58>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43da      	mvns	r2, r3
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <vTaskSuspend+0x110>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	4a2e      	ldr	r2, [pc, #184]	; (8005c70 <vTaskSuspend+0x110>)
 8005bb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fac4 	bl	8005152 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4828      	ldr	r0, [pc, #160]	; (8005c74 <vTaskSuspend+0x114>)
 8005bd2:	f7ff fa61 	bl	8005098 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d103      	bne.n	8005bea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005bea:	f000 ff6b 	bl	8006ac4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005bee:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <vTaskSuspend+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005bf6:	f000 ff31 	bl	8006a5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005bfa:	f000 fc4b 	bl	8006494 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005bfe:	f000 ff61 	bl	8006ac4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005c02:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <vTaskSuspend+0x108>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d129      	bne.n	8005c60 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <vTaskSuspend+0x118>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d019      	beq.n	8005c48 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <vTaskSuspend+0x11c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00c      	beq.n	8005c36 <vTaskSuspend+0xd6>
	__asm volatile
 8005c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c20:	b672      	cpsid	i
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	b662      	cpsie	i
 8005c30:	60bb      	str	r3, [r7, #8]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <vTaskSuspend+0x120>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c46:	e00b      	b.n	8005c60 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <vTaskSuspend+0x114>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <vTaskSuspend+0x124>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d103      	bne.n	8005c5c <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <vTaskSuspend+0x108>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
	}
 8005c5a:	e001      	b.n	8005c60 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8005c5c:	f000 f9e8 	bl	8006030 <vTaskSwitchContext>
	}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000a44 	.word	0x20000a44
 8005c6c:	20000a48 	.word	0x20000a48
 8005c70:	20000b4c 	.word	0x20000b4c
 8005c74:	20000b30 	.word	0x20000b30
 8005c78:	20000b50 	.word	0x20000b50
 8005c7c:	20000b6c 	.word	0x20000b6c
 8005c80:	e000ed04 	.word	0xe000ed04
 8005c84:	20000b44 	.word	0x20000b44

08005c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c96:	463a      	mov	r2, r7
 8005c98:	1d39      	adds	r1, r7, #4
 8005c9a:	f107 0308 	add.w	r3, r7, #8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa ff30 	bl	8000b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	9202      	str	r2, [sp, #8]
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	460a      	mov	r2, r1
 8005cb6:	4923      	ldr	r1, [pc, #140]	; (8005d44 <vTaskStartScheduler+0xbc>)
 8005cb8:	4823      	ldr	r0, [pc, #140]	; (8005d48 <vTaskStartScheduler+0xc0>)
 8005cba:	f7ff fd69 	bl	8005790 <xTaskCreateStatic>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <vTaskStartScheduler+0xc4>)
 8005cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <vTaskStartScheduler+0xc4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e001      	b.n	8005cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11d      	bne.n	8005d18 <vTaskStartScheduler+0x90>
	__asm volatile
 8005cdc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ce0:	b672      	cpsid	i
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	b662      	cpsie	i
 8005cf0:	613b      	str	r3, [r7, #16]
}
 8005cf2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cf4:	4b16      	ldr	r3, [pc, #88]	; (8005d50 <vTaskStartScheduler+0xc8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	334c      	adds	r3, #76	; 0x4c
 8005cfa:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <vTaskStartScheduler+0xcc>)
 8005cfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <vTaskStartScheduler+0xd0>)
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295
 8005d04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <vTaskStartScheduler+0xd4>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <vTaskStartScheduler+0xd8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d12:	f000 fe25 	bl	8006960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d16:	e010      	b.n	8005d3a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d10c      	bne.n	8005d3a <vTaskStartScheduler+0xb2>
	__asm volatile
 8005d20:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d24:	b672      	cpsid	i
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	b662      	cpsie	i
 8005d34:	60fb      	str	r3, [r7, #12]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <vTaskStartScheduler+0xb0>
}
 8005d3a:	bf00      	nop
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	08008684 	.word	0x08008684
 8005d48:	0800631d 	.word	0x0800631d
 8005d4c:	20000b68 	.word	0x20000b68
 8005d50:	20000a44 	.word	0x20000a44
 8005d54:	2000001c 	.word	0x2000001c
 8005d58:	20000b64 	.word	0x20000b64
 8005d5c:	20000b50 	.word	0x20000b50
 8005d60:	20000b48 	.word	0x20000b48

08005d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <vTaskSuspendAll+0x18>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	4a03      	ldr	r2, [pc, #12]	; (8005d7c <vTaskSuspendAll+0x18>)
 8005d70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000b6c 	.word	0x20000b6c

08005d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d8e:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <xTaskResumeAll+0x118>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <xTaskResumeAll+0x30>
	__asm volatile
 8005d96:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	603b      	str	r3, [r7, #0]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005db0:	f000 fe54 	bl	8006a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005db4:	4b38      	ldr	r3, [pc, #224]	; (8005e98 <xTaskResumeAll+0x118>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <xTaskResumeAll+0x118>)
 8005dbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dbe:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <xTaskResumeAll+0x118>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d161      	bne.n	8005e8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dc6:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <xTaskResumeAll+0x11c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d05d      	beq.n	8005e8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dce:	e02e      	b.n	8005e2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd0:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <xTaskResumeAll+0x120>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3318      	adds	r3, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff f9b8 	bl	8005152 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff f9b3 	bl	8005152 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	409a      	lsls	r2, r3
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <xTaskResumeAll+0x124>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <xTaskResumeAll+0x124>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a27      	ldr	r2, [pc, #156]	; (8005ea8 <xTaskResumeAll+0x128>)
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7ff f93f 	bl	8005098 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <xTaskResumeAll+0x12c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e28:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <xTaskResumeAll+0x130>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <xTaskResumeAll+0x120>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1cc      	bne.n	8005dd0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e3c:	f000 fb2a 	bl	8006494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e40:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <xTaskResumeAll+0x134>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e4c:	f000 f836 	bl	8005ebc <xTaskIncrementTick>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e56:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <xTaskResumeAll+0x130>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f1      	bne.n	8005e4c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <xTaskResumeAll+0x134>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <xTaskResumeAll+0x130>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e76:	2301      	movs	r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <xTaskResumeAll+0x138>)
 8005e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e8a:	f000 fe1b 	bl	8006ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000b6c 	.word	0x20000b6c
 8005e9c:	20000b44 	.word	0x20000b44
 8005ea0:	20000b04 	.word	0x20000b04
 8005ea4:	20000b4c 	.word	0x20000b4c
 8005ea8:	20000a48 	.word	0x20000a48
 8005eac:	20000a44 	.word	0x20000a44
 8005eb0:	20000b58 	.word	0x20000b58
 8005eb4:	20000b54 	.word	0x20000b54
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec6:	4b4f      	ldr	r3, [pc, #316]	; (8006004 <xTaskIncrementTick+0x148>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 808a 	bne.w	8005fe4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ed0:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <xTaskIncrementTick+0x14c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ed8:	4a4b      	ldr	r2, [pc, #300]	; (8006008 <xTaskIncrementTick+0x14c>)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d122      	bne.n	8005f2a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ee4:	4b49      	ldr	r3, [pc, #292]	; (800600c <xTaskIncrementTick+0x150>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005eee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ef2:	b672      	cpsid	i
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	b662      	cpsie	i
 8005f02:	603b      	str	r3, [r7, #0]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xTaskIncrementTick+0x4a>
 8005f08:	4b40      	ldr	r3, [pc, #256]	; (800600c <xTaskIncrementTick+0x150>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <xTaskIncrementTick+0x154>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a3e      	ldr	r2, [pc, #248]	; (800600c <xTaskIncrementTick+0x150>)
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4a3e      	ldr	r2, [pc, #248]	; (8006010 <xTaskIncrementTick+0x154>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	; (8006014 <xTaskIncrementTick+0x158>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <xTaskIncrementTick+0x158>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	f000 fab5 	bl	8006494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <xTaskIncrementTick+0x15c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d348      	bcc.n	8005fc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f34:	4b35      	ldr	r3, [pc, #212]	; (800600c <xTaskIncrementTick+0x150>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3e:	4b36      	ldr	r3, [pc, #216]	; (8006018 <xTaskIncrementTick+0x15c>)
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	601a      	str	r2, [r3, #0]
					break;
 8005f46:	e03e      	b.n	8005fc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f48:	4b30      	ldr	r3, [pc, #192]	; (800600c <xTaskIncrementTick+0x150>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d203      	bcs.n	8005f68 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f60:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <xTaskIncrementTick+0x15c>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f66:	e02e      	b.n	8005fc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f8f0 	bl	8005152 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff f8e7 	bl	8005152 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	4b23      	ldr	r3, [pc, #140]	; (800601c <xTaskIncrementTick+0x160>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	4a22      	ldr	r2, [pc, #136]	; (800601c <xTaskIncrementTick+0x160>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <xTaskIncrementTick+0x164>)
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7ff f873 	bl	8005098 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <xTaskIncrementTick+0x168>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d3b9      	bcc.n	8005f34 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc4:	e7b6      	b.n	8005f34 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <xTaskIncrementTick+0x168>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4914      	ldr	r1, [pc, #80]	; (8006020 <xTaskIncrementTick+0x164>)
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d907      	bls.n	8005fee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e004      	b.n	8005fee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <xTaskIncrementTick+0x16c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <xTaskIncrementTick+0x16c>)
 8005fec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTaskIncrementTick+0x170>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ffa:	697b      	ldr	r3, [r7, #20]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000b6c 	.word	0x20000b6c
 8006008:	20000b48 	.word	0x20000b48
 800600c:	20000afc 	.word	0x20000afc
 8006010:	20000b00 	.word	0x20000b00
 8006014:	20000b5c 	.word	0x20000b5c
 8006018:	20000b64 	.word	0x20000b64
 800601c:	20000b4c 	.word	0x20000b4c
 8006020:	20000a48 	.word	0x20000a48
 8006024:	20000a44 	.word	0x20000a44
 8006028:	20000b54 	.word	0x20000b54
 800602c:	20000b58 	.word	0x20000b58

08006030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <vTaskSwitchContext+0xb0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <vTaskSwitchContext+0xb4>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006044:	e046      	b.n	80060d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <vTaskSwitchContext+0xb4>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604c:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <vTaskSwitchContext+0xb8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	fab3 f383 	clz	r3, r3
 8006058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800605a:	7afb      	ldrb	r3, [r7, #11]
 800605c:	f1c3 031f 	rsb	r3, r3, #31
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	4922      	ldr	r1, [pc, #136]	; (80060ec <vTaskSwitchContext+0xbc>)
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10c      	bne.n	8006090 <vTaskSwitchContext+0x60>
	__asm volatile
 8006076:	f04f 0380 	mov.w	r3, #128	; 0x80
 800607a:	b672      	cpsid	i
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	b662      	cpsie	i
 800608a:	607b      	str	r3, [r7, #4]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <vTaskSwitchContext+0x5e>
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4a14      	ldr	r2, [pc, #80]	; (80060ec <vTaskSwitchContext+0xbc>)
 800609c:	4413      	add	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3308      	adds	r3, #8
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d104      	bne.n	80060c0 <vTaskSwitchContext+0x90>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <vTaskSwitchContext+0xc0>)
 80060c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <vTaskSwitchContext+0xc0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	334c      	adds	r3, #76	; 0x4c
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <vTaskSwitchContext+0xc4>)
 80060d2:	6013      	str	r3, [r2, #0]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000b6c 	.word	0x20000b6c
 80060e4:	20000b58 	.word	0x20000b58
 80060e8:	20000b4c 	.word	0x20000b4c
 80060ec:	20000a48 	.word	0x20000a48
 80060f0:	20000a44 	.word	0x20000a44
 80060f4:	2000001c 	.word	0x2000001c

080060f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10c      	bne.n	8006122 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006108:	f04f 0380 	mov.w	r3, #128	; 0x80
 800610c:	b672      	cpsid	i
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	b662      	cpsie	i
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <vTaskPlaceOnEventList+0x48>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3318      	adds	r3, #24
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fe ffd8 	bl	80050e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006130:	2101      	movs	r1, #1
 8006132:	6838      	ldr	r0, [r7, #0]
 8006134:	f000 fb1e 	bl	8006774 <prvAddCurrentTaskToDelayedList>
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000a44 	.word	0x20000a44

08006144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10c      	bne.n	8006174 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800615a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800615e:	b672      	cpsid	i
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	b662      	cpsie	i
 800616e:	60fb      	str	r3, [r7, #12]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3318      	adds	r3, #24
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe ffea 	bl	8005152 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617e:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <xTaskRemoveFromEventList+0xb0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11c      	bne.n	80061c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3304      	adds	r3, #4
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe ffe1 	bl	8005152 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	2201      	movs	r2, #1
 8006196:	409a      	lsls	r2, r3
 8006198:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <xTaskRemoveFromEventList+0xb4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <xTaskRemoveFromEventList+0xb4>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4a13      	ldr	r2, [pc, #76]	; (80061fc <xTaskRemoveFromEventList+0xb8>)
 80061b0:	441a      	add	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7fe ff6d 	bl	8005098 <vListInsertEnd>
 80061be:	e005      	b.n	80061cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	3318      	adds	r3, #24
 80061c4:	4619      	mov	r1, r3
 80061c6:	480e      	ldr	r0, [pc, #56]	; (8006200 <xTaskRemoveFromEventList+0xbc>)
 80061c8:	f7fe ff66 	bl	8005098 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <xTaskRemoveFromEventList+0xc0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d905      	bls.n	80061e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <xTaskRemoveFromEventList+0xc4>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e001      	b.n	80061ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000b6c 	.word	0x20000b6c
 80061f8:	20000b4c 	.word	0x20000b4c
 80061fc:	20000a48 	.word	0x20000a48
 8006200:	20000b04 	.word	0x20000b04
 8006204:	20000a44 	.word	0x20000a44
 8006208:	20000b58 	.word	0x20000b58

0800620c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <vTaskInternalSetTimeOutState+0x24>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <vTaskInternalSetTimeOutState+0x28>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000b5c 	.word	0x20000b5c
 8006234:	20000b48 	.word	0x20000b48

08006238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10c      	bne.n	8006262 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006248:	f04f 0380 	mov.w	r3, #128	; 0x80
 800624c:	b672      	cpsid	i
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	b662      	cpsie	i
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006268:	f04f 0380 	mov.w	r3, #128	; 0x80
 800626c:	b672      	cpsid	i
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	b662      	cpsie	i
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006282:	f000 fbeb 	bl	8006a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <xTaskCheckForTimeOut+0xc4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d102      	bne.n	80062a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e023      	b.n	80062ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <xTaskCheckForTimeOut+0xc8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d007      	beq.n	80062c2 <xTaskCheckForTimeOut+0x8a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e015      	b.n	80062ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d20b      	bcs.n	80062e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff97 	bl	800620c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e004      	b.n	80062ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062ee:	f000 fbe9 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 80062f2:	69fb      	ldr	r3, [r7, #28]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000b48 	.word	0x20000b48
 8006300:	20000b5c 	.word	0x20000b5c

08006304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006308:	4b03      	ldr	r3, [pc, #12]	; (8006318 <vTaskMissedYield+0x14>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
}
 800630e:	bf00      	nop
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	20000b58 	.word	0x20000b58

0800631c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006324:	f000 f852 	bl	80063cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <prvIdleTask+0x28>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d9f9      	bls.n	8006324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <prvIdleTask+0x2c>)
 8006332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006340:	e7f0      	b.n	8006324 <prvIdleTask+0x8>
 8006342:	bf00      	nop
 8006344:	20000a48 	.word	0x20000a48
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	e00c      	b.n	8006372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4a12      	ldr	r2, [pc, #72]	; (80063ac <prvInitialiseTaskLists+0x60>)
 8006364:	4413      	add	r3, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fe69 	bl	800503e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3301      	adds	r3, #1
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b06      	cmp	r3, #6
 8006376:	d9ef      	bls.n	8006358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006378:	480d      	ldr	r0, [pc, #52]	; (80063b0 <prvInitialiseTaskLists+0x64>)
 800637a:	f7fe fe60 	bl	800503e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800637e:	480d      	ldr	r0, [pc, #52]	; (80063b4 <prvInitialiseTaskLists+0x68>)
 8006380:	f7fe fe5d 	bl	800503e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006384:	480c      	ldr	r0, [pc, #48]	; (80063b8 <prvInitialiseTaskLists+0x6c>)
 8006386:	f7fe fe5a 	bl	800503e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800638a:	480c      	ldr	r0, [pc, #48]	; (80063bc <prvInitialiseTaskLists+0x70>)
 800638c:	f7fe fe57 	bl	800503e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006390:	480b      	ldr	r0, [pc, #44]	; (80063c0 <prvInitialiseTaskLists+0x74>)
 8006392:	f7fe fe54 	bl	800503e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <prvInitialiseTaskLists+0x78>)
 8006398:	4a05      	ldr	r2, [pc, #20]	; (80063b0 <prvInitialiseTaskLists+0x64>)
 800639a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvInitialiseTaskLists+0x7c>)
 800639e:	4a05      	ldr	r2, [pc, #20]	; (80063b4 <prvInitialiseTaskLists+0x68>)
 80063a0:	601a      	str	r2, [r3, #0]
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000a48 	.word	0x20000a48
 80063b0:	20000ad4 	.word	0x20000ad4
 80063b4:	20000ae8 	.word	0x20000ae8
 80063b8:	20000b04 	.word	0x20000b04
 80063bc:	20000b18 	.word	0x20000b18
 80063c0:	20000b30 	.word	0x20000b30
 80063c4:	20000afc 	.word	0x20000afc
 80063c8:	20000b00 	.word	0x20000b00

080063cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063d2:	e019      	b.n	8006408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063d4:	f000 fb42 	bl	8006a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <prvCheckTasksWaitingTermination+0x50>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe feb4 	bl	8005152 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <prvCheckTasksWaitingTermination+0x54>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	4a0b      	ldr	r2, [pc, #44]	; (8006420 <prvCheckTasksWaitingTermination+0x54>)
 80063f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <prvCheckTasksWaitingTermination+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	4a0a      	ldr	r2, [pc, #40]	; (8006424 <prvCheckTasksWaitingTermination+0x58>)
 80063fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063fe:	f000 fb61 	bl	8006ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f810 	bl	8006428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <prvCheckTasksWaitingTermination+0x58>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e1      	bne.n	80063d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000b18 	.word	0x20000b18
 8006420:	20000b44 	.word	0x20000b44
 8006424:	20000b2c 	.word	0x20000b2c

08006428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	334c      	adds	r3, #76	; 0x4c
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f877 	bl	8007528 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fcfd 	bl	8006e48 <vPortFree>
				vPortFree( pxTCB );
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fcfa 	bl	8006e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006454:	e01a      	b.n	800648c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d103      	bne.n	8006468 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fcf1 	bl	8006e48 <vPortFree>
	}
 8006466:	e011      	b.n	800648c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800646e:	2b02      	cmp	r3, #2
 8006470:	d00c      	beq.n	800648c <prvDeleteTCB+0x64>
	__asm volatile
 8006472:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	60fb      	str	r3, [r7, #12]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <prvDeleteTCB+0x62>
	}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <prvResetNextTaskUnblockTime+0x38>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <prvResetNextTaskUnblockTime+0x3c>)
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064ac:	e008      	b.n	80064c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <prvResetNextTaskUnblockTime+0x38>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <prvResetNextTaskUnblockTime+0x3c>)
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000afc 	.word	0x20000afc
 80064d0:	20000b64 	.word	0x20000b64

080064d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <xTaskGetSchedulerState+0x34>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064e2:	2301      	movs	r3, #1
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	e008      	b.n	80064fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e8:	4b08      	ldr	r3, [pc, #32]	; (800650c <xTaskGetSchedulerState+0x38>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064f0:	2302      	movs	r3, #2
 80064f2:	607b      	str	r3, [r7, #4]
 80064f4:	e001      	b.n	80064fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064f6:	2300      	movs	r3, #0
 80064f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064fa:	687b      	ldr	r3, [r7, #4]
	}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	20000b50 	.word	0x20000b50
 800650c:	20000b6c 	.word	0x20000b6c

08006510 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d069      	beq.n	80065fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	4b36      	ldr	r3, [pc, #216]	; (8006604 <xTaskPriorityInherit+0xf4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d259      	bcs.n	80065e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	db06      	blt.n	800654a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653c:	4b31      	ldr	r3, [pc, #196]	; (8006604 <xTaskPriorityInherit+0xf4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	f1c3 0207 	rsb	r2, r3, #7
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4a2b      	ldr	r2, [pc, #172]	; (8006608 <xTaskPriorityInherit+0xf8>)
 800655c:	4413      	add	r3, r2
 800655e:	4299      	cmp	r1, r3
 8006560:	d13a      	bne.n	80065d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fdf3 	bl	8005152 <uxListRemove>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4924      	ldr	r1, [pc, #144]	; (8006608 <xTaskPriorityInherit+0xf8>)
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xTaskPriorityInherit+0x8e>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43da      	mvns	r2, r3
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <xTaskPriorityInherit+0xfc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4013      	ands	r3, r2
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <xTaskPriorityInherit+0xfc>)
 800659c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800659e:	4b19      	ldr	r3, [pc, #100]	; (8006604 <xTaskPriorityInherit+0xf4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	4b16      	ldr	r3, [pc, #88]	; (800660c <xTaskPriorityInherit+0xfc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	4a15      	ldr	r2, [pc, #84]	; (800660c <xTaskPriorityInherit+0xfc>)
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <xTaskPriorityInherit+0xf8>)
 80065c8:	441a      	add	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f7fe fd61 	bl	8005098 <vListInsertEnd>
 80065d6:	e004      	b.n	80065e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <xTaskPriorityInherit+0xf4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80065e2:	2301      	movs	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e008      	b.n	80065fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <xTaskPriorityInherit+0xf4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d201      	bcs.n	80065fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065fa:	68fb      	ldr	r3, [r7, #12]
	}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000a44 	.word	0x20000a44
 8006608:	20000a48 	.word	0x20000a48
 800660c:	20000b4c 	.word	0x20000b4c

08006610 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8087 	beq.w	8006738 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10c      	bne.n	800664c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006632:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006636:	b672      	cpsid	i
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	b662      	cpsie	i
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d902      	bls.n	800665c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	e002      	b.n	8006662 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	429a      	cmp	r2, r3
 800666a:	d065      	beq.n	8006738 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	429a      	cmp	r2, r3
 8006674:	d160      	bne.n	8006738 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006676:	4b32      	ldr	r3, [pc, #200]	; (8006740 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d10c      	bne.n	800669a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006680:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	60bb      	str	r3, [r7, #8]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	db04      	blt.n	80066b8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f1c3 0207 	rsb	r2, r3, #7
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	6959      	ldr	r1, [r3, #20]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80066c8:	4413      	add	r3, r2
 80066ca:	4299      	cmp	r1, r3
 80066cc:	d134      	bne.n	8006738 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fd3d 	bl	8005152 <uxListRemove>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d115      	bne.n	800670a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	4918      	ldr	r1, [pc, #96]	; (8006744 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	2201      	movs	r2, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43da      	mvns	r2, r3
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4013      	ands	r3, r2
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006708:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	2201      	movs	r2, #1
 8006710:	409a      	lsls	r2, r3
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4313      	orrs	r3, r2
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a06      	ldr	r2, [pc, #24]	; (8006744 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800672a:	441a      	add	r2, r3
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe fcb0 	bl	8005098 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006738:	bf00      	nop
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000a44 	.word	0x20000a44
 8006744:	20000a48 	.word	0x20000a48
 8006748:	20000b4c 	.word	0x20000b4c

0800674c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <pvTaskIncrementMutexHeldCount+0x24>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <pvTaskIncrementMutexHeldCount+0x24>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800675e:	3201      	adds	r2, #1
 8006760:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <pvTaskIncrementMutexHeldCount+0x24>)
 8006764:	681b      	ldr	r3, [r3, #0]
	}
 8006766:	4618      	mov	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000a44 	.word	0x20000a44

08006774 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fce1 	bl	8005152 <uxListRemove>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006796:	4b24      	ldr	r3, [pc, #144]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	43da      	mvns	r2, r3
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4013      	ands	r3, r2
 80067aa:	4a20      	ldr	r2, [pc, #128]	; (800682c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d10a      	bne.n	80067cc <prvAddCurrentTaskToDelayedList+0x58>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	481a      	ldr	r0, [pc, #104]	; (8006830 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067c6:	f7fe fc67 	bl	8005098 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ca:	e026      	b.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d209      	bcs.n	80067f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fe fc75 	bl	80050e0 <vListInsert>
}
 80067f6:	e010      	b.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe fc6b 	bl	80050e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <prvAddCurrentTaskToDelayedList+0xc8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d202      	bcs.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006814:	4a09      	ldr	r2, [pc, #36]	; (800683c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6013      	str	r3, [r2, #0]
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000b48 	.word	0x20000b48
 8006828:	20000a44 	.word	0x20000a44
 800682c:	20000b4c 	.word	0x20000b4c
 8006830:	20000b30 	.word	0x20000b30
 8006834:	20000b00 	.word	0x20000b00
 8006838:	20000afc 	.word	0x20000afc
 800683c:	20000b64 	.word	0x20000b64

08006840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b04      	subs	r3, #4
 8006850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b04      	subs	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b04      	subs	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006870:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <pxPortInitialiseStack+0x64>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b14      	subs	r3, #20
 800687a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b04      	subs	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f06f 0202 	mvn.w	r2, #2
 800688e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3b20      	subs	r3, #32
 8006894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	080068a9 	.word	0x080068a9

080068a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <prvTaskExitError+0x5c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d00c      	beq.n	80068d6 <prvTaskExitError+0x2e>
	__asm volatile
 80068bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068c0:	b672      	cpsid	i
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	b662      	cpsie	i
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <prvTaskExitError+0x2c>
	__asm volatile
 80068d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	60bb      	str	r3, [r7, #8]
}
 80068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068ee:	bf00      	nop
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0fc      	beq.n	80068f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20000018 	.word	0x20000018
	...

08006910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <pxCurrentTCBConst2>)
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6808      	ldr	r0, [r1, #0]
 8006916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	f380 8809 	msr	PSP, r0
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	4770      	bx	lr
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst2>:
 8006930:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006938:	4808      	ldr	r0, [pc, #32]	; (800695c <prvPortStartFirstTask+0x24>)
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f380 8808 	msr	MSP, r0
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8814 	msr	CONTROL, r0
 800694a:	b662      	cpsie	i
 800694c:	b661      	cpsie	f
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	df00      	svc	0
 8006958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800695a:	bf00      	nop
 800695c:	e000ed08 	.word	0xe000ed08

08006960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <xPortStartScheduler+0xe4>)
 8006968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <xPortStartScheduler+0xe8>)
 800698c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <xPortStartScheduler+0xec>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006994:	e009      	b.n	80069aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006996:	4b2d      	ldr	r3, [pc, #180]	; (8006a4c <xPortStartScheduler+0xec>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <xPortStartScheduler+0xec>)
 800699e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d0ef      	beq.n	8006996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069b6:	4b25      	ldr	r3, [pc, #148]	; (8006a4c <xPortStartScheduler+0xec>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1c3 0307 	rsb	r3, r3, #7
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d00c      	beq.n	80069dc <xPortStartScheduler+0x7c>
	__asm volatile
 80069c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <xPortStartScheduler+0xec>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <xPortStartScheduler+0xec>)
 80069e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069e6:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <xPortStartScheduler+0xec>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <xPortStartScheduler+0xec>)
 80069f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069fa:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <xPortStartScheduler+0xf0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a14      	ldr	r2, [pc, #80]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a06:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <xPortStartScheduler+0xf0>)
 8006a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a12:	f000 f8dd 	bl	8006bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <xPortStartScheduler+0xf4>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a1c:	f000 f8fc 	bl	8006c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <xPortStartScheduler+0xf8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <xPortStartScheduler+0xf8>)
 8006a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a2c:	f7ff ff84 	bl	8006938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a30:	f7ff fafe 	bl	8006030 <vTaskSwitchContext>
	prvTaskExitError();
 8006a34:	f7ff ff38 	bl	80068a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000e400 	.word	0xe000e400
 8006a48:	20000b70 	.word	0x20000b70
 8006a4c:	20000b74 	.word	0x20000b74
 8006a50:	e000ed20 	.word	0xe000ed20
 8006a54:	20000018 	.word	0x20000018
 8006a58:	e000ef34 	.word	0xe000ef34

08006a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
	__asm volatile
 8006a62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <vPortEnterCritical+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <vPortEnterCritical+0x60>)
 8006a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <vPortEnterCritical+0x60>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d111      	bne.n	8006ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <vPortEnterCritical+0x64>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8006a96:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a9a:	b672      	cpsid	i
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	b662      	cpsie	i
 8006aaa:	603b      	str	r3, [r7, #0]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <vPortEnterCritical+0x52>
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000018 	.word	0x20000018
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vPortExitCritical+0x54>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <vPortExitCritical+0x28>
	__asm volatile
 8006ad2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ad6:	b672      	cpsid	i
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	b662      	cpsie	i
 8006ae6:	607b      	str	r3, [r7, #4]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <vPortExitCritical+0x54>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <vPortExitCritical+0x54>)
 8006af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <vPortExitCritical+0x54>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <vPortExitCritical+0x46>
 8006afe:	2300      	movs	r3, #0
 8006b00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f383 8811 	msr	BASEPRI, r3
}
 8006b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000018 	.word	0x20000018
 8006b1c:	00000000 	.word	0x00000000

08006b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b20:	f3ef 8009 	mrs	r0, PSP
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <pxCurrentTCBConst>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f01e 0f10 	tst.w	lr, #16
 8006b30:	bf08      	it	eq
 8006b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b40:	f04f 0080 	mov.w	r0, #128	; 0x80
 8006b44:	b672      	cpsid	i
 8006b46:	f380 8811 	msr	BASEPRI, r0
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	b662      	cpsie	i
 8006b54:	f7ff fa6c 	bl	8006030 <vTaskSwitchContext>
 8006b58:	f04f 0000 	mov.w	r0, #0
 8006b5c:	f380 8811 	msr	BASEPRI, r0
 8006b60:	bc09      	pop	{r0, r3}
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f01e 0f10 	tst.w	lr, #16
 8006b6e:	bf08      	it	eq
 8006b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b74:	f380 8809 	msr	PSP, r0
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop

08006b80 <pxCurrentTCBConst>:
 8006b80:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	607b      	str	r3, [r7, #4]
}
 8006ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba6:	f7ff f989 	bl	8005ebc <xTaskIncrementTick>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <SysTick_Handler+0x44>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f383 8811 	msr	BASEPRI, r3
}
 8006bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <vPortSetupTimerInterrupt+0x34>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <vPortSetupTimerInterrupt+0x38>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vPortSetupTimerInterrupt+0x3c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <vPortSetupTimerInterrupt+0x40>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <vPortSetupTimerInterrupt+0x44>)
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <vPortSetupTimerInterrupt+0x34>)
 8006bf4:	2207      	movs	r2, #7
 8006bf6:	601a      	str	r2, [r3, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	e000e010 	.word	0xe000e010
 8006c08:	e000e018 	.word	0xe000e018
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	10624dd3 	.word	0x10624dd3
 8006c14:	e000e014 	.word	0xe000e014

08006c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c28 <vPortEnableVFP+0x10>
 8006c1c:	6801      	ldr	r1, [r0, #0]
 8006c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c22:	6001      	str	r1, [r0, #0]
 8006c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c26:	bf00      	nop
 8006c28:	e000ed88 	.word	0xe000ed88

08006c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c32:	f3ef 8305 	mrs	r3, IPSR
 8006c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d916      	bls.n	8006c6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c3e:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <vPortValidateInterruptPriority+0x78>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c48:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <vPortValidateInterruptPriority+0x7c>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	7afa      	ldrb	r2, [r7, #11]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20c      	bcs.n	8006c6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006c52:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	607b      	str	r3, [r7, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <vPortValidateInterruptPriority+0x80>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <vPortValidateInterruptPriority+0x84>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d90c      	bls.n	8006c96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c7c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c80:	b672      	cpsid	i
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	b662      	cpsie	i
 8006c90:	603b      	str	r3, [r7, #0]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <vPortValidateInterruptPriority+0x68>
	}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e3f0 	.word	0xe000e3f0
 8006ca8:	20000b70 	.word	0x20000b70
 8006cac:	e000ed0c 	.word	0xe000ed0c
 8006cb0:	20000b74 	.word	0x20000b74

08006cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08a      	sub	sp, #40	; 0x28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc0:	f7ff f850 	bl	8005d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cc4:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <pvPortMalloc+0x180>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ccc:	f000 f91a 	bl	8006f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd0:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <pvPortMalloc+0x184>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8092 	bne.w	8006e02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01f      	beq.n	8006d24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f023 0307 	bic.w	r3, r3, #7
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <pvPortMalloc+0x70>
	__asm volatile
 8006d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d0e:	b672      	cpsid	i
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	b662      	cpsie	i
 8006d1e:	617b      	str	r3, [r7, #20]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06b      	beq.n	8006e02 <pvPortMalloc+0x14e>
 8006d2a:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <pvPortMalloc+0x188>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d866      	bhi.n	8006e02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d34:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <pvPortMalloc+0x18c>)
 8006d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d38:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <pvPortMalloc+0x18c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3e:	e004      	b.n	8006d4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <pvPortMalloc+0xa8>
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <pvPortMalloc+0x180>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d04d      	beq.n	8006e02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	2308      	movs	r3, #8
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d921      	bls.n	8006dcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <pvPortMalloc+0x100>
	__asm volatile
 8006d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d9e:	b672      	cpsid	i
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	b662      	cpsie	i
 8006dae:	613b      	str	r3, [r7, #16]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dc6:	69b8      	ldr	r0, [r7, #24]
 8006dc8:	f000 f8fe 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <pvPortMalloc+0x188>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	4a19      	ldr	r2, [pc, #100]	; (8006e3c <pvPortMalloc+0x188>)
 8006dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dda:	4b18      	ldr	r3, [pc, #96]	; (8006e3c <pvPortMalloc+0x188>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <pvPortMalloc+0x190>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d203      	bcs.n	8006dee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de6:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <pvPortMalloc+0x188>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <pvPortMalloc+0x190>)
 8006dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <pvPortMalloc+0x184>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e02:	f7fe ffbd 	bl	8005d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00c      	beq.n	8006e2a <pvPortMalloc+0x176>
	__asm volatile
 8006e10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e14:	b672      	cpsid	i
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <pvPortMalloc+0x174>
	return pvReturn;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3728      	adds	r7, #40	; 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20004780 	.word	0x20004780
 8006e38:	2000478c 	.word	0x2000478c
 8006e3c:	20004784 	.word	0x20004784
 8006e40:	20004778 	.word	0x20004778
 8006e44:	20004788 	.word	0x20004788

08006e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d04c      	beq.n	8006ef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4b23      	ldr	r3, [pc, #140]	; (8006efc <vPortFree+0xb4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <vPortFree+0x48>
	__asm volatile
 8006e76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	60fb      	str	r3, [r7, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <vPortFree+0x6a>
	__asm volatile
 8006e98:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e9c:	b672      	cpsid	i
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	b662      	cpsie	i
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <vPortFree+0xb4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d019      	beq.n	8006ef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d115      	bne.n	8006ef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <vPortFree+0xb4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ed8:	f7fe ff44 	bl	8005d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <vPortFree+0xb8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <vPortFree+0xb8>)
 8006ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 f86c 	bl	8006fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ef0:	f7fe ff46 	bl	8005d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000478c 	.word	0x2000478c
 8006f00:	20004784 	.word	0x20004784

08006f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <prvHeapInit+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0307 	bic.w	r3, r3, #7
 8006f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <prvHeapInit+0xac>)
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f42:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f50:	2208      	movs	r2, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <prvHeapInit+0xb8>)
 8006f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <prvHeapInit+0xbc>)
 8006f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <prvHeapInit+0xc0>)
 8006f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fa2:	601a      	str	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000b78 	.word	0x20000b78
 8006fb4:	20004778 	.word	0x20004778
 8006fb8:	20004780 	.word	0x20004780
 8006fbc:	20004788 	.word	0x20004788
 8006fc0:	20004784 	.word	0x20004784
 8006fc4:	2000478c 	.word	0x2000478c

08006fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fd0:	4b28      	ldr	r3, [pc, #160]	; (8007074 <prvInsertBlockIntoFreeList+0xac>)
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <prvInsertBlockIntoFreeList+0x14>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d8f7      	bhi.n	8006fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d108      	bne.n	800700a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	441a      	add	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d118      	bne.n	8007050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d00d      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e008      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e003      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20004778 	.word	0x20004778
 8007078:	20004780 	.word	0x20004780

0800707c <atoi>:
 800707c:	220a      	movs	r2, #10
 800707e:	2100      	movs	r1, #0
 8007080:	f000 bbb8 	b.w	80077f4 <strtol>

08007084 <__errno>:
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <__errno+0x8>)
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	2000001c 	.word	0x2000001c

08007090 <std>:
 8007090:	2300      	movs	r3, #0
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
 8007096:	e9c0 3300 	strd	r3, r3, [r0]
 800709a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709e:	6083      	str	r3, [r0, #8]
 80070a0:	8181      	strh	r1, [r0, #12]
 80070a2:	6643      	str	r3, [r0, #100]	; 0x64
 80070a4:	81c2      	strh	r2, [r0, #14]
 80070a6:	6183      	str	r3, [r0, #24]
 80070a8:	4619      	mov	r1, r3
 80070aa:	2208      	movs	r2, #8
 80070ac:	305c      	adds	r0, #92	; 0x5c
 80070ae:	f000 f91a 	bl	80072e6 <memset>
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <std+0x38>)
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <std+0x3c>)
 80070b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <std+0x40>)
 80070bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <std+0x44>)
 80070c0:	6224      	str	r4, [r4, #32]
 80070c2:	6323      	str	r3, [r4, #48]	; 0x30
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	bf00      	nop
 80070c8:	08007669 	.word	0x08007669
 80070cc:	0800768b 	.word	0x0800768b
 80070d0:	080076c3 	.word	0x080076c3
 80070d4:	080076e7 	.word	0x080076e7

080070d8 <_cleanup_r>:
 80070d8:	4901      	ldr	r1, [pc, #4]	; (80070e0 <_cleanup_r+0x8>)
 80070da:	f000 b8af 	b.w	800723c <_fwalk_reent>
 80070de:	bf00      	nop
 80070e0:	08007ad9 	.word	0x08007ad9

080070e4 <__sfmoreglue>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	2268      	movs	r2, #104	; 0x68
 80070e8:	1e4d      	subs	r5, r1, #1
 80070ea:	4355      	muls	r5, r2
 80070ec:	460e      	mov	r6, r1
 80070ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070f2:	f000 f921 	bl	8007338 <_malloc_r>
 80070f6:	4604      	mov	r4, r0
 80070f8:	b140      	cbz	r0, 800710c <__sfmoreglue+0x28>
 80070fa:	2100      	movs	r1, #0
 80070fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007100:	300c      	adds	r0, #12
 8007102:	60a0      	str	r0, [r4, #8]
 8007104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007108:	f000 f8ed 	bl	80072e6 <memset>
 800710c:	4620      	mov	r0, r4
 800710e:	bd70      	pop	{r4, r5, r6, pc}

08007110 <__sfp_lock_acquire>:
 8007110:	4801      	ldr	r0, [pc, #4]	; (8007118 <__sfp_lock_acquire+0x8>)
 8007112:	f000 b8d8 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 8007116:	bf00      	nop
 8007118:	20004791 	.word	0x20004791

0800711c <__sfp_lock_release>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__sfp_lock_release+0x8>)
 800711e:	f000 b8d3 	b.w	80072c8 <__retarget_lock_release_recursive>
 8007122:	bf00      	nop
 8007124:	20004791 	.word	0x20004791

08007128 <__sinit_lock_acquire>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__sinit_lock_acquire+0x8>)
 800712a:	f000 b8cc 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	20004792 	.word	0x20004792

08007134 <__sinit_lock_release>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__sinit_lock_release+0x8>)
 8007136:	f000 b8c7 	b.w	80072c8 <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	20004792 	.word	0x20004792

08007140 <__sinit>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	f7ff fff0 	bl	8007128 <__sinit_lock_acquire>
 8007148:	69a3      	ldr	r3, [r4, #24]
 800714a:	b11b      	cbz	r3, 8007154 <__sinit+0x14>
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f7ff bff0 	b.w	8007134 <__sinit_lock_release>
 8007154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007158:	6523      	str	r3, [r4, #80]	; 0x50
 800715a:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <__sinit+0x68>)
 800715c:	4a13      	ldr	r2, [pc, #76]	; (80071ac <__sinit+0x6c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	62a2      	str	r2, [r4, #40]	; 0x28
 8007162:	42a3      	cmp	r3, r4
 8007164:	bf04      	itt	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	61a3      	streq	r3, [r4, #24]
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f820 	bl	80071b0 <__sfp>
 8007170:	6060      	str	r0, [r4, #4]
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f81c 	bl	80071b0 <__sfp>
 8007178:	60a0      	str	r0, [r4, #8]
 800717a:	4620      	mov	r0, r4
 800717c:	f000 f818 	bl	80071b0 <__sfp>
 8007180:	2200      	movs	r2, #0
 8007182:	60e0      	str	r0, [r4, #12]
 8007184:	2104      	movs	r1, #4
 8007186:	6860      	ldr	r0, [r4, #4]
 8007188:	f7ff ff82 	bl	8007090 <std>
 800718c:	68a0      	ldr	r0, [r4, #8]
 800718e:	2201      	movs	r2, #1
 8007190:	2109      	movs	r1, #9
 8007192:	f7ff ff7d 	bl	8007090 <std>
 8007196:	68e0      	ldr	r0, [r4, #12]
 8007198:	2202      	movs	r2, #2
 800719a:	2112      	movs	r1, #18
 800719c:	f7ff ff78 	bl	8007090 <std>
 80071a0:	2301      	movs	r3, #1
 80071a2:	61a3      	str	r3, [r4, #24]
 80071a4:	e7d2      	b.n	800714c <__sinit+0xc>
 80071a6:	bf00      	nop
 80071a8:	08008704 	.word	0x08008704
 80071ac:	080070d9 	.word	0x080070d9

080071b0 <__sfp>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	4607      	mov	r7, r0
 80071b4:	f7ff ffac 	bl	8007110 <__sfp_lock_acquire>
 80071b8:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <__sfp+0x84>)
 80071ba:	681e      	ldr	r6, [r3, #0]
 80071bc:	69b3      	ldr	r3, [r6, #24]
 80071be:	b913      	cbnz	r3, 80071c6 <__sfp+0x16>
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7ff ffbd 	bl	8007140 <__sinit>
 80071c6:	3648      	adds	r6, #72	; 0x48
 80071c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	d503      	bpl.n	80071d8 <__sfp+0x28>
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	b30b      	cbz	r3, 8007218 <__sfp+0x68>
 80071d4:	6836      	ldr	r6, [r6, #0]
 80071d6:	e7f7      	b.n	80071c8 <__sfp+0x18>
 80071d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071dc:	b9d5      	cbnz	r5, 8007214 <__sfp+0x64>
 80071de:	4b16      	ldr	r3, [pc, #88]	; (8007238 <__sfp+0x88>)
 80071e0:	60e3      	str	r3, [r4, #12]
 80071e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071e6:	6665      	str	r5, [r4, #100]	; 0x64
 80071e8:	f000 f86c 	bl	80072c4 <__retarget_lock_init_recursive>
 80071ec:	f7ff ff96 	bl	800711c <__sfp_lock_release>
 80071f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071f8:	6025      	str	r5, [r4, #0]
 80071fa:	61a5      	str	r5, [r4, #24]
 80071fc:	2208      	movs	r2, #8
 80071fe:	4629      	mov	r1, r5
 8007200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007204:	f000 f86f 	bl	80072e6 <memset>
 8007208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800720c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007210:	4620      	mov	r0, r4
 8007212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007214:	3468      	adds	r4, #104	; 0x68
 8007216:	e7d9      	b.n	80071cc <__sfp+0x1c>
 8007218:	2104      	movs	r1, #4
 800721a:	4638      	mov	r0, r7
 800721c:	f7ff ff62 	bl	80070e4 <__sfmoreglue>
 8007220:	4604      	mov	r4, r0
 8007222:	6030      	str	r0, [r6, #0]
 8007224:	2800      	cmp	r0, #0
 8007226:	d1d5      	bne.n	80071d4 <__sfp+0x24>
 8007228:	f7ff ff78 	bl	800711c <__sfp_lock_release>
 800722c:	230c      	movs	r3, #12
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	e7ee      	b.n	8007210 <__sfp+0x60>
 8007232:	bf00      	nop
 8007234:	08008704 	.word	0x08008704
 8007238:	ffff0001 	.word	0xffff0001

0800723c <_fwalk_reent>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	4606      	mov	r6, r0
 8007242:	4688      	mov	r8, r1
 8007244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007248:	2700      	movs	r7, #0
 800724a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800724e:	f1b9 0901 	subs.w	r9, r9, #1
 8007252:	d505      	bpl.n	8007260 <_fwalk_reent+0x24>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	2c00      	cmp	r4, #0
 8007258:	d1f7      	bne.n	800724a <_fwalk_reent+0xe>
 800725a:	4638      	mov	r0, r7
 800725c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007260:	89ab      	ldrh	r3, [r5, #12]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d907      	bls.n	8007276 <_fwalk_reent+0x3a>
 8007266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800726a:	3301      	adds	r3, #1
 800726c:	d003      	beq.n	8007276 <_fwalk_reent+0x3a>
 800726e:	4629      	mov	r1, r5
 8007270:	4630      	mov	r0, r6
 8007272:	47c0      	blx	r8
 8007274:	4307      	orrs	r7, r0
 8007276:	3568      	adds	r5, #104	; 0x68
 8007278:	e7e9      	b.n	800724e <_fwalk_reent+0x12>
	...

0800727c <__libc_init_array>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4d0d      	ldr	r5, [pc, #52]	; (80072b4 <__libc_init_array+0x38>)
 8007280:	4c0d      	ldr	r4, [pc, #52]	; (80072b8 <__libc_init_array+0x3c>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	2600      	movs	r6, #0
 8007288:	42a6      	cmp	r6, r4
 800728a:	d109      	bne.n	80072a0 <__libc_init_array+0x24>
 800728c:	4d0b      	ldr	r5, [pc, #44]	; (80072bc <__libc_init_array+0x40>)
 800728e:	4c0c      	ldr	r4, [pc, #48]	; (80072c0 <__libc_init_array+0x44>)
 8007290:	f001 f8a4 	bl	80083dc <_init>
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	2600      	movs	r6, #0
 800729a:	42a6      	cmp	r6, r4
 800729c:	d105      	bne.n	80072aa <__libc_init_array+0x2e>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a4:	4798      	blx	r3
 80072a6:	3601      	adds	r6, #1
 80072a8:	e7ee      	b.n	8007288 <__libc_init_array+0xc>
 80072aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ae:	4798      	blx	r3
 80072b0:	3601      	adds	r6, #1
 80072b2:	e7f2      	b.n	800729a <__libc_init_array+0x1e>
 80072b4:	08008844 	.word	0x08008844
 80072b8:	08008844 	.word	0x08008844
 80072bc:	08008844 	.word	0x08008844
 80072c0:	08008848 	.word	0x08008848

080072c4 <__retarget_lock_init_recursive>:
 80072c4:	4770      	bx	lr

080072c6 <__retarget_lock_acquire_recursive>:
 80072c6:	4770      	bx	lr

080072c8 <__retarget_lock_release_recursive>:
 80072c8:	4770      	bx	lr

080072ca <memcpy>:
 80072ca:	440a      	add	r2, r1
 80072cc:	4291      	cmp	r1, r2
 80072ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d2:	d100      	bne.n	80072d6 <memcpy+0xc>
 80072d4:	4770      	bx	lr
 80072d6:	b510      	push	{r4, lr}
 80072d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e0:	4291      	cmp	r1, r2
 80072e2:	d1f9      	bne.n	80072d8 <memcpy+0xe>
 80072e4:	bd10      	pop	{r4, pc}

080072e6 <memset>:
 80072e6:	4402      	add	r2, r0
 80072e8:	4603      	mov	r3, r0
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d100      	bne.n	80072f0 <memset+0xa>
 80072ee:	4770      	bx	lr
 80072f0:	f803 1b01 	strb.w	r1, [r3], #1
 80072f4:	e7f9      	b.n	80072ea <memset+0x4>
	...

080072f8 <sbrk_aligned>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4e0e      	ldr	r6, [pc, #56]	; (8007334 <sbrk_aligned+0x3c>)
 80072fc:	460c      	mov	r4, r1
 80072fe:	6831      	ldr	r1, [r6, #0]
 8007300:	4605      	mov	r5, r0
 8007302:	b911      	cbnz	r1, 800730a <sbrk_aligned+0x12>
 8007304:	f000 f96c 	bl	80075e0 <_sbrk_r>
 8007308:	6030      	str	r0, [r6, #0]
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f967 	bl	80075e0 <_sbrk_r>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d00a      	beq.n	800732c <sbrk_aligned+0x34>
 8007316:	1cc4      	adds	r4, r0, #3
 8007318:	f024 0403 	bic.w	r4, r4, #3
 800731c:	42a0      	cmp	r0, r4
 800731e:	d007      	beq.n	8007330 <sbrk_aligned+0x38>
 8007320:	1a21      	subs	r1, r4, r0
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f95c 	bl	80075e0 <_sbrk_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d101      	bne.n	8007330 <sbrk_aligned+0x38>
 800732c:	f04f 34ff 	mov.w	r4, #4294967295
 8007330:	4620      	mov	r0, r4
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	20004798 	.word	0x20004798

08007338 <_malloc_r>:
 8007338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733c:	1ccd      	adds	r5, r1, #3
 800733e:	f025 0503 	bic.w	r5, r5, #3
 8007342:	3508      	adds	r5, #8
 8007344:	2d0c      	cmp	r5, #12
 8007346:	bf38      	it	cc
 8007348:	250c      	movcc	r5, #12
 800734a:	2d00      	cmp	r5, #0
 800734c:	4607      	mov	r7, r0
 800734e:	db01      	blt.n	8007354 <_malloc_r+0x1c>
 8007350:	42a9      	cmp	r1, r5
 8007352:	d905      	bls.n	8007360 <_malloc_r+0x28>
 8007354:	230c      	movs	r3, #12
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	2600      	movs	r6, #0
 800735a:	4630      	mov	r0, r6
 800735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007360:	4e2e      	ldr	r6, [pc, #184]	; (800741c <_malloc_r+0xe4>)
 8007362:	f000 fc6d 	bl	8007c40 <__malloc_lock>
 8007366:	6833      	ldr	r3, [r6, #0]
 8007368:	461c      	mov	r4, r3
 800736a:	bb34      	cbnz	r4, 80073ba <_malloc_r+0x82>
 800736c:	4629      	mov	r1, r5
 800736e:	4638      	mov	r0, r7
 8007370:	f7ff ffc2 	bl	80072f8 <sbrk_aligned>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	4604      	mov	r4, r0
 8007378:	d14d      	bne.n	8007416 <_malloc_r+0xde>
 800737a:	6834      	ldr	r4, [r6, #0]
 800737c:	4626      	mov	r6, r4
 800737e:	2e00      	cmp	r6, #0
 8007380:	d140      	bne.n	8007404 <_malloc_r+0xcc>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	4631      	mov	r1, r6
 8007386:	4638      	mov	r0, r7
 8007388:	eb04 0803 	add.w	r8, r4, r3
 800738c:	f000 f928 	bl	80075e0 <_sbrk_r>
 8007390:	4580      	cmp	r8, r0
 8007392:	d13a      	bne.n	800740a <_malloc_r+0xd2>
 8007394:	6821      	ldr	r1, [r4, #0]
 8007396:	3503      	adds	r5, #3
 8007398:	1a6d      	subs	r5, r5, r1
 800739a:	f025 0503 	bic.w	r5, r5, #3
 800739e:	3508      	adds	r5, #8
 80073a0:	2d0c      	cmp	r5, #12
 80073a2:	bf38      	it	cc
 80073a4:	250c      	movcc	r5, #12
 80073a6:	4629      	mov	r1, r5
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff ffa5 	bl	80072f8 <sbrk_aligned>
 80073ae:	3001      	adds	r0, #1
 80073b0:	d02b      	beq.n	800740a <_malloc_r+0xd2>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	442b      	add	r3, r5
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	e00e      	b.n	80073d8 <_malloc_r+0xa0>
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	1b52      	subs	r2, r2, r5
 80073be:	d41e      	bmi.n	80073fe <_malloc_r+0xc6>
 80073c0:	2a0b      	cmp	r2, #11
 80073c2:	d916      	bls.n	80073f2 <_malloc_r+0xba>
 80073c4:	1961      	adds	r1, r4, r5
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	6025      	str	r5, [r4, #0]
 80073ca:	bf18      	it	ne
 80073cc:	6059      	strne	r1, [r3, #4]
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	bf08      	it	eq
 80073d2:	6031      	streq	r1, [r6, #0]
 80073d4:	5162      	str	r2, [r4, r5]
 80073d6:	604b      	str	r3, [r1, #4]
 80073d8:	4638      	mov	r0, r7
 80073da:	f104 060b 	add.w	r6, r4, #11
 80073de:	f000 fc35 	bl	8007c4c <__malloc_unlock>
 80073e2:	f026 0607 	bic.w	r6, r6, #7
 80073e6:	1d23      	adds	r3, r4, #4
 80073e8:	1af2      	subs	r2, r6, r3
 80073ea:	d0b6      	beq.n	800735a <_malloc_r+0x22>
 80073ec:	1b9b      	subs	r3, r3, r6
 80073ee:	50a3      	str	r3, [r4, r2]
 80073f0:	e7b3      	b.n	800735a <_malloc_r+0x22>
 80073f2:	6862      	ldr	r2, [r4, #4]
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	bf0c      	ite	eq
 80073f8:	6032      	streq	r2, [r6, #0]
 80073fa:	605a      	strne	r2, [r3, #4]
 80073fc:	e7ec      	b.n	80073d8 <_malloc_r+0xa0>
 80073fe:	4623      	mov	r3, r4
 8007400:	6864      	ldr	r4, [r4, #4]
 8007402:	e7b2      	b.n	800736a <_malloc_r+0x32>
 8007404:	4634      	mov	r4, r6
 8007406:	6876      	ldr	r6, [r6, #4]
 8007408:	e7b9      	b.n	800737e <_malloc_r+0x46>
 800740a:	230c      	movs	r3, #12
 800740c:	603b      	str	r3, [r7, #0]
 800740e:	4638      	mov	r0, r7
 8007410:	f000 fc1c 	bl	8007c4c <__malloc_unlock>
 8007414:	e7a1      	b.n	800735a <_malloc_r+0x22>
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	e7de      	b.n	80073d8 <_malloc_r+0xa0>
 800741a:	bf00      	nop
 800741c:	20004794 	.word	0x20004794

08007420 <_puts_r>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	460e      	mov	r6, r1
 8007424:	4605      	mov	r5, r0
 8007426:	b118      	cbz	r0, 8007430 <_puts_r+0x10>
 8007428:	6983      	ldr	r3, [r0, #24]
 800742a:	b90b      	cbnz	r3, 8007430 <_puts_r+0x10>
 800742c:	f7ff fe88 	bl	8007140 <__sinit>
 8007430:	69ab      	ldr	r3, [r5, #24]
 8007432:	68ac      	ldr	r4, [r5, #8]
 8007434:	b913      	cbnz	r3, 800743c <_puts_r+0x1c>
 8007436:	4628      	mov	r0, r5
 8007438:	f7ff fe82 	bl	8007140 <__sinit>
 800743c:	4b2c      	ldr	r3, [pc, #176]	; (80074f0 <_puts_r+0xd0>)
 800743e:	429c      	cmp	r4, r3
 8007440:	d120      	bne.n	8007484 <_puts_r+0x64>
 8007442:	686c      	ldr	r4, [r5, #4]
 8007444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d405      	bmi.n	8007456 <_puts_r+0x36>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	0598      	lsls	r0, r3, #22
 800744e:	d402      	bmi.n	8007456 <_puts_r+0x36>
 8007450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007452:	f7ff ff38 	bl	80072c6 <__retarget_lock_acquire_recursive>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0719      	lsls	r1, r3, #28
 800745a:	d51d      	bpl.n	8007498 <_puts_r+0x78>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	b1db      	cbz	r3, 8007498 <_puts_r+0x78>
 8007460:	3e01      	subs	r6, #1
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007468:	3b01      	subs	r3, #1
 800746a:	60a3      	str	r3, [r4, #8]
 800746c:	bb39      	cbnz	r1, 80074be <_puts_r+0x9e>
 800746e:	2b00      	cmp	r3, #0
 8007470:	da38      	bge.n	80074e4 <_puts_r+0xc4>
 8007472:	4622      	mov	r2, r4
 8007474:	210a      	movs	r1, #10
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f9c6 	bl	8007808 <__swbuf_r>
 800747c:	3001      	adds	r0, #1
 800747e:	d011      	beq.n	80074a4 <_puts_r+0x84>
 8007480:	250a      	movs	r5, #10
 8007482:	e011      	b.n	80074a8 <_puts_r+0x88>
 8007484:	4b1b      	ldr	r3, [pc, #108]	; (80074f4 <_puts_r+0xd4>)
 8007486:	429c      	cmp	r4, r3
 8007488:	d101      	bne.n	800748e <_puts_r+0x6e>
 800748a:	68ac      	ldr	r4, [r5, #8]
 800748c:	e7da      	b.n	8007444 <_puts_r+0x24>
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <_puts_r+0xd8>)
 8007490:	429c      	cmp	r4, r3
 8007492:	bf08      	it	eq
 8007494:	68ec      	ldreq	r4, [r5, #12]
 8007496:	e7d5      	b.n	8007444 <_puts_r+0x24>
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 fa18 	bl	80078d0 <__swsetup_r>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d0dd      	beq.n	8007460 <_puts_r+0x40>
 80074a4:	f04f 35ff 	mov.w	r5, #4294967295
 80074a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074aa:	07da      	lsls	r2, r3, #31
 80074ac:	d405      	bmi.n	80074ba <_puts_r+0x9a>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	059b      	lsls	r3, r3, #22
 80074b2:	d402      	bmi.n	80074ba <_puts_r+0x9a>
 80074b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074b6:	f7ff ff07 	bl	80072c8 <__retarget_lock_release_recursive>
 80074ba:	4628      	mov	r0, r5
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da04      	bge.n	80074cc <_puts_r+0xac>
 80074c2:	69a2      	ldr	r2, [r4, #24]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	dc06      	bgt.n	80074d6 <_puts_r+0xb6>
 80074c8:	290a      	cmp	r1, #10
 80074ca:	d004      	beq.n	80074d6 <_puts_r+0xb6>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	7019      	strb	r1, [r3, #0]
 80074d4:	e7c5      	b.n	8007462 <_puts_r+0x42>
 80074d6:	4622      	mov	r2, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f995 	bl	8007808 <__swbuf_r>
 80074de:	3001      	adds	r0, #1
 80074e0:	d1bf      	bne.n	8007462 <_puts_r+0x42>
 80074e2:	e7df      	b.n	80074a4 <_puts_r+0x84>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	250a      	movs	r5, #10
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	701d      	strb	r5, [r3, #0]
 80074ee:	e7db      	b.n	80074a8 <_puts_r+0x88>
 80074f0:	080086c4 	.word	0x080086c4
 80074f4:	080086e4 	.word	0x080086e4
 80074f8:	080086a4 	.word	0x080086a4

080074fc <puts>:
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <puts+0xc>)
 80074fe:	4601      	mov	r1, r0
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f7ff bf8d 	b.w	8007420 <_puts_r>
 8007506:	bf00      	nop
 8007508:	2000001c 	.word	0x2000001c

0800750c <cleanup_glue>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	6809      	ldr	r1, [r1, #0]
 8007512:	4605      	mov	r5, r0
 8007514:	b109      	cbz	r1, 800751a <cleanup_glue+0xe>
 8007516:	f7ff fff9 	bl	800750c <cleanup_glue>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007522:	f000 bb99 	b.w	8007c58 <_free_r>
	...

08007528 <_reclaim_reent>:
 8007528:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <_reclaim_reent+0xb4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4283      	cmp	r3, r0
 800752e:	b570      	push	{r4, r5, r6, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	d051      	beq.n	80075d8 <_reclaim_reent+0xb0>
 8007534:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007536:	b143      	cbz	r3, 800754a <_reclaim_reent+0x22>
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d14a      	bne.n	80075d4 <_reclaim_reent+0xac>
 800753e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007540:	6819      	ldr	r1, [r3, #0]
 8007542:	b111      	cbz	r1, 800754a <_reclaim_reent+0x22>
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fb87 	bl	8007c58 <_free_r>
 800754a:	6961      	ldr	r1, [r4, #20]
 800754c:	b111      	cbz	r1, 8007554 <_reclaim_reent+0x2c>
 800754e:	4620      	mov	r0, r4
 8007550:	f000 fb82 	bl	8007c58 <_free_r>
 8007554:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007556:	b111      	cbz	r1, 800755e <_reclaim_reent+0x36>
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fb7d 	bl	8007c58 <_free_r>
 800755e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007560:	b111      	cbz	r1, 8007568 <_reclaim_reent+0x40>
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fb78 	bl	8007c58 <_free_r>
 8007568:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800756a:	b111      	cbz	r1, 8007572 <_reclaim_reent+0x4a>
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fb73 	bl	8007c58 <_free_r>
 8007572:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007574:	b111      	cbz	r1, 800757c <_reclaim_reent+0x54>
 8007576:	4620      	mov	r0, r4
 8007578:	f000 fb6e 	bl	8007c58 <_free_r>
 800757c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800757e:	b111      	cbz	r1, 8007586 <_reclaim_reent+0x5e>
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fb69 	bl	8007c58 <_free_r>
 8007586:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007588:	b111      	cbz	r1, 8007590 <_reclaim_reent+0x68>
 800758a:	4620      	mov	r0, r4
 800758c:	f000 fb64 	bl	8007c58 <_free_r>
 8007590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007592:	b111      	cbz	r1, 800759a <_reclaim_reent+0x72>
 8007594:	4620      	mov	r0, r4
 8007596:	f000 fb5f 	bl	8007c58 <_free_r>
 800759a:	69a3      	ldr	r3, [r4, #24]
 800759c:	b1e3      	cbz	r3, 80075d8 <_reclaim_reent+0xb0>
 800759e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075a0:	4620      	mov	r0, r4
 80075a2:	4798      	blx	r3
 80075a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075a6:	b1b9      	cbz	r1, 80075d8 <_reclaim_reent+0xb0>
 80075a8:	4620      	mov	r0, r4
 80075aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075ae:	f7ff bfad 	b.w	800750c <cleanup_glue>
 80075b2:	5949      	ldr	r1, [r1, r5]
 80075b4:	b941      	cbnz	r1, 80075c8 <_reclaim_reent+0xa0>
 80075b6:	3504      	adds	r5, #4
 80075b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ba:	2d80      	cmp	r5, #128	; 0x80
 80075bc:	68d9      	ldr	r1, [r3, #12]
 80075be:	d1f8      	bne.n	80075b2 <_reclaim_reent+0x8a>
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fb49 	bl	8007c58 <_free_r>
 80075c6:	e7ba      	b.n	800753e <_reclaim_reent+0x16>
 80075c8:	680e      	ldr	r6, [r1, #0]
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fb44 	bl	8007c58 <_free_r>
 80075d0:	4631      	mov	r1, r6
 80075d2:	e7ef      	b.n	80075b4 <_reclaim_reent+0x8c>
 80075d4:	2500      	movs	r5, #0
 80075d6:	e7ef      	b.n	80075b8 <_reclaim_reent+0x90>
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	bf00      	nop
 80075dc:	2000001c 	.word	0x2000001c

080075e0 <_sbrk_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d06      	ldr	r5, [pc, #24]	; (80075fc <_sbrk_r+0x1c>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f7fa f994 	bl	8001918 <_sbrk>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_sbrk_r+0x1a>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_sbrk_r+0x1a>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	2000479c 	.word	0x2000479c

08007600 <sniprintf>:
 8007600:	b40c      	push	{r2, r3}
 8007602:	b530      	push	{r4, r5, lr}
 8007604:	4b17      	ldr	r3, [pc, #92]	; (8007664 <sniprintf+0x64>)
 8007606:	1e0c      	subs	r4, r1, #0
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	b09d      	sub	sp, #116	; 0x74
 800760c:	da08      	bge.n	8007620 <sniprintf+0x20>
 800760e:	238b      	movs	r3, #139	; 0x8b
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	b01d      	add	sp, #116	; 0x74
 8007618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800761c:	b002      	add	sp, #8
 800761e:	4770      	bx	lr
 8007620:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007624:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007628:	bf14      	ite	ne
 800762a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800762e:	4623      	moveq	r3, r4
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	9307      	str	r3, [sp, #28]
 8007634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007638:	9002      	str	r0, [sp, #8]
 800763a:	9006      	str	r0, [sp, #24]
 800763c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007640:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007642:	ab21      	add	r3, sp, #132	; 0x84
 8007644:	a902      	add	r1, sp, #8
 8007646:	4628      	mov	r0, r5
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	f000 fbad 	bl	8007da8 <_svfiprintf_r>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	bfbc      	itt	lt
 8007652:	238b      	movlt	r3, #139	; 0x8b
 8007654:	602b      	strlt	r3, [r5, #0]
 8007656:	2c00      	cmp	r4, #0
 8007658:	d0dd      	beq.n	8007616 <sniprintf+0x16>
 800765a:	9b02      	ldr	r3, [sp, #8]
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e7d9      	b.n	8007616 <sniprintf+0x16>
 8007662:	bf00      	nop
 8007664:	2000001c 	.word	0x2000001c

08007668 <__sread>:
 8007668:	b510      	push	{r4, lr}
 800766a:	460c      	mov	r4, r1
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	f000 fe2e 	bl	80082d0 <_read_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	bfab      	itete	ge
 8007678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800767a:	89a3      	ldrhlt	r3, [r4, #12]
 800767c:	181b      	addge	r3, r3, r0
 800767e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007682:	bfac      	ite	ge
 8007684:	6563      	strge	r3, [r4, #84]	; 0x54
 8007686:	81a3      	strhlt	r3, [r4, #12]
 8007688:	bd10      	pop	{r4, pc}

0800768a <__swrite>:
 800768a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	461f      	mov	r7, r3
 8007690:	898b      	ldrh	r3, [r1, #12]
 8007692:	05db      	lsls	r3, r3, #23
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	4616      	mov	r6, r2
 800769a:	d505      	bpl.n	80076a8 <__swrite+0x1e>
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	2302      	movs	r3, #2
 80076a2:	2200      	movs	r2, #0
 80076a4:	f000 fa54 	bl	8007b50 <_lseek_r>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	4632      	mov	r2, r6
 80076b6:	463b      	mov	r3, r7
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	f000 b8f5 	b.w	80078ac <_write_r>

080076c2 <__sseek>:
 80076c2:	b510      	push	{r4, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ca:	f000 fa41 	bl	8007b50 <_lseek_r>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	bf15      	itete	ne
 80076d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076de:	81a3      	strheq	r3, [r4, #12]
 80076e0:	bf18      	it	ne
 80076e2:	81a3      	strhne	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__sclose>:
 80076e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ea:	f000 b95f 	b.w	80079ac <_close_r>
	...

080076f0 <_strtol_l.constprop.0>:
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f6:	d001      	beq.n	80076fc <_strtol_l.constprop.0+0xc>
 80076f8:	2b24      	cmp	r3, #36	; 0x24
 80076fa:	d906      	bls.n	800770a <_strtol_l.constprop.0+0x1a>
 80076fc:	f7ff fcc2 	bl	8007084 <__errno>
 8007700:	2316      	movs	r3, #22
 8007702:	6003      	str	r3, [r0, #0]
 8007704:	2000      	movs	r0, #0
 8007706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80077f0 <_strtol_l.constprop.0+0x100>
 800770e:	460d      	mov	r5, r1
 8007710:	462e      	mov	r6, r5
 8007712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007716:	f814 700c 	ldrb.w	r7, [r4, ip]
 800771a:	f017 0708 	ands.w	r7, r7, #8
 800771e:	d1f7      	bne.n	8007710 <_strtol_l.constprop.0+0x20>
 8007720:	2c2d      	cmp	r4, #45	; 0x2d
 8007722:	d132      	bne.n	800778a <_strtol_l.constprop.0+0x9a>
 8007724:	782c      	ldrb	r4, [r5, #0]
 8007726:	2701      	movs	r7, #1
 8007728:	1cb5      	adds	r5, r6, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d05b      	beq.n	80077e6 <_strtol_l.constprop.0+0xf6>
 800772e:	2b10      	cmp	r3, #16
 8007730:	d109      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 8007732:	2c30      	cmp	r4, #48	; 0x30
 8007734:	d107      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 8007736:	782c      	ldrb	r4, [r5, #0]
 8007738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800773c:	2c58      	cmp	r4, #88	; 0x58
 800773e:	d14d      	bne.n	80077dc <_strtol_l.constprop.0+0xec>
 8007740:	786c      	ldrb	r4, [r5, #1]
 8007742:	2310      	movs	r3, #16
 8007744:	3502      	adds	r5, #2
 8007746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800774a:	f108 38ff 	add.w	r8, r8, #4294967295
 800774e:	f04f 0c00 	mov.w	ip, #0
 8007752:	fbb8 f9f3 	udiv	r9, r8, r3
 8007756:	4666      	mov	r6, ip
 8007758:	fb03 8a19 	mls	sl, r3, r9, r8
 800775c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007760:	f1be 0f09 	cmp.w	lr, #9
 8007764:	d816      	bhi.n	8007794 <_strtol_l.constprop.0+0xa4>
 8007766:	4674      	mov	r4, lr
 8007768:	42a3      	cmp	r3, r4
 800776a:	dd24      	ble.n	80077b6 <_strtol_l.constprop.0+0xc6>
 800776c:	f1bc 0f00 	cmp.w	ip, #0
 8007770:	db1e      	blt.n	80077b0 <_strtol_l.constprop.0+0xc0>
 8007772:	45b1      	cmp	r9, r6
 8007774:	d31c      	bcc.n	80077b0 <_strtol_l.constprop.0+0xc0>
 8007776:	d101      	bne.n	800777c <_strtol_l.constprop.0+0x8c>
 8007778:	45a2      	cmp	sl, r4
 800777a:	db19      	blt.n	80077b0 <_strtol_l.constprop.0+0xc0>
 800777c:	fb06 4603 	mla	r6, r6, r3, r4
 8007780:	f04f 0c01 	mov.w	ip, #1
 8007784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007788:	e7e8      	b.n	800775c <_strtol_l.constprop.0+0x6c>
 800778a:	2c2b      	cmp	r4, #43	; 0x2b
 800778c:	bf04      	itt	eq
 800778e:	782c      	ldrbeq	r4, [r5, #0]
 8007790:	1cb5      	addeq	r5, r6, #2
 8007792:	e7ca      	b.n	800772a <_strtol_l.constprop.0+0x3a>
 8007794:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007798:	f1be 0f19 	cmp.w	lr, #25
 800779c:	d801      	bhi.n	80077a2 <_strtol_l.constprop.0+0xb2>
 800779e:	3c37      	subs	r4, #55	; 0x37
 80077a0:	e7e2      	b.n	8007768 <_strtol_l.constprop.0+0x78>
 80077a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80077a6:	f1be 0f19 	cmp.w	lr, #25
 80077aa:	d804      	bhi.n	80077b6 <_strtol_l.constprop.0+0xc6>
 80077ac:	3c57      	subs	r4, #87	; 0x57
 80077ae:	e7db      	b.n	8007768 <_strtol_l.constprop.0+0x78>
 80077b0:	f04f 3cff 	mov.w	ip, #4294967295
 80077b4:	e7e6      	b.n	8007784 <_strtol_l.constprop.0+0x94>
 80077b6:	f1bc 0f00 	cmp.w	ip, #0
 80077ba:	da05      	bge.n	80077c8 <_strtol_l.constprop.0+0xd8>
 80077bc:	2322      	movs	r3, #34	; 0x22
 80077be:	6003      	str	r3, [r0, #0]
 80077c0:	4646      	mov	r6, r8
 80077c2:	b942      	cbnz	r2, 80077d6 <_strtol_l.constprop.0+0xe6>
 80077c4:	4630      	mov	r0, r6
 80077c6:	e79e      	b.n	8007706 <_strtol_l.constprop.0+0x16>
 80077c8:	b107      	cbz	r7, 80077cc <_strtol_l.constprop.0+0xdc>
 80077ca:	4276      	negs	r6, r6
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	d0f9      	beq.n	80077c4 <_strtol_l.constprop.0+0xd4>
 80077d0:	f1bc 0f00 	cmp.w	ip, #0
 80077d4:	d000      	beq.n	80077d8 <_strtol_l.constprop.0+0xe8>
 80077d6:	1e69      	subs	r1, r5, #1
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	e7f3      	b.n	80077c4 <_strtol_l.constprop.0+0xd4>
 80077dc:	2430      	movs	r4, #48	; 0x30
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1b1      	bne.n	8007746 <_strtol_l.constprop.0+0x56>
 80077e2:	2308      	movs	r3, #8
 80077e4:	e7af      	b.n	8007746 <_strtol_l.constprop.0+0x56>
 80077e6:	2c30      	cmp	r4, #48	; 0x30
 80077e8:	d0a5      	beq.n	8007736 <_strtol_l.constprop.0+0x46>
 80077ea:	230a      	movs	r3, #10
 80077ec:	e7ab      	b.n	8007746 <_strtol_l.constprop.0+0x56>
 80077ee:	bf00      	nop
 80077f0:	08008709 	.word	0x08008709

080077f4 <strtol>:
 80077f4:	4613      	mov	r3, r2
 80077f6:	460a      	mov	r2, r1
 80077f8:	4601      	mov	r1, r0
 80077fa:	4802      	ldr	r0, [pc, #8]	; (8007804 <strtol+0x10>)
 80077fc:	6800      	ldr	r0, [r0, #0]
 80077fe:	f7ff bf77 	b.w	80076f0 <_strtol_l.constprop.0>
 8007802:	bf00      	nop
 8007804:	2000001c 	.word	0x2000001c

08007808 <__swbuf_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	460e      	mov	r6, r1
 800780c:	4614      	mov	r4, r2
 800780e:	4605      	mov	r5, r0
 8007810:	b118      	cbz	r0, 800781a <__swbuf_r+0x12>
 8007812:	6983      	ldr	r3, [r0, #24]
 8007814:	b90b      	cbnz	r3, 800781a <__swbuf_r+0x12>
 8007816:	f7ff fc93 	bl	8007140 <__sinit>
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <__swbuf_r+0x98>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d12b      	bne.n	8007878 <__swbuf_r+0x70>
 8007820:	686c      	ldr	r4, [r5, #4]
 8007822:	69a3      	ldr	r3, [r4, #24]
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	071a      	lsls	r2, r3, #28
 800782a:	d52f      	bpl.n	800788c <__swbuf_r+0x84>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	b36b      	cbz	r3, 800788c <__swbuf_r+0x84>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1ac0      	subs	r0, r0, r3
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b2f6      	uxtb	r6, r6
 800783a:	4283      	cmp	r3, r0
 800783c:	4637      	mov	r7, r6
 800783e:	dc04      	bgt.n	800784a <__swbuf_r+0x42>
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f948 	bl	8007ad8 <_fflush_r>
 8007848:	bb30      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	3b01      	subs	r3, #1
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	701e      	strb	r6, [r3, #0]
 8007858:	6963      	ldr	r3, [r4, #20]
 800785a:	3001      	adds	r0, #1
 800785c:	4283      	cmp	r3, r0
 800785e:	d004      	beq.n	800786a <__swbuf_r+0x62>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d506      	bpl.n	8007874 <__swbuf_r+0x6c>
 8007866:	2e0a      	cmp	r6, #10
 8007868:	d104      	bne.n	8007874 <__swbuf_r+0x6c>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f933 	bl	8007ad8 <_fflush_r>
 8007872:	b988      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 8007874:	4638      	mov	r0, r7
 8007876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <__swbuf_r+0x9c>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d101      	bne.n	8007882 <__swbuf_r+0x7a>
 800787e:	68ac      	ldr	r4, [r5, #8]
 8007880:	e7cf      	b.n	8007822 <__swbuf_r+0x1a>
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <__swbuf_r+0xa0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	bf08      	it	eq
 8007888:	68ec      	ldreq	r4, [r5, #12]
 800788a:	e7ca      	b.n	8007822 <__swbuf_r+0x1a>
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f81e 	bl	80078d0 <__swsetup_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	d0cb      	beq.n	8007830 <__swbuf_r+0x28>
 8007898:	f04f 37ff 	mov.w	r7, #4294967295
 800789c:	e7ea      	b.n	8007874 <__swbuf_r+0x6c>
 800789e:	bf00      	nop
 80078a0:	080086c4 	.word	0x080086c4
 80078a4:	080086e4 	.word	0x080086e4
 80078a8:	080086a4 	.word	0x080086a4

080078ac <_write_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_write_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7f9 ffdb 	bl	8001876 <_write>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_write_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_write_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	2000479c 	.word	0x2000479c

080078d0 <__swsetup_r>:
 80078d0:	4b32      	ldr	r3, [pc, #200]	; (800799c <__swsetup_r+0xcc>)
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	681d      	ldr	r5, [r3, #0]
 80078d6:	4606      	mov	r6, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	b125      	cbz	r5, 80078e6 <__swsetup_r+0x16>
 80078dc:	69ab      	ldr	r3, [r5, #24]
 80078de:	b913      	cbnz	r3, 80078e6 <__swsetup_r+0x16>
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7ff fc2d 	bl	8007140 <__sinit>
 80078e6:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <__swsetup_r+0xd0>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d10f      	bne.n	800790c <__swsetup_r+0x3c>
 80078ec:	686c      	ldr	r4, [r5, #4]
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f4:	0719      	lsls	r1, r3, #28
 80078f6:	d42c      	bmi.n	8007952 <__swsetup_r+0x82>
 80078f8:	06dd      	lsls	r5, r3, #27
 80078fa:	d411      	bmi.n	8007920 <__swsetup_r+0x50>
 80078fc:	2309      	movs	r3, #9
 80078fe:	6033      	str	r3, [r6, #0]
 8007900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	f04f 30ff 	mov.w	r0, #4294967295
 800790a:	e03e      	b.n	800798a <__swsetup_r+0xba>
 800790c:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <__swsetup_r+0xd4>)
 800790e:	429c      	cmp	r4, r3
 8007910:	d101      	bne.n	8007916 <__swsetup_r+0x46>
 8007912:	68ac      	ldr	r4, [r5, #8]
 8007914:	e7eb      	b.n	80078ee <__swsetup_r+0x1e>
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <__swsetup_r+0xd8>)
 8007918:	429c      	cmp	r4, r3
 800791a:	bf08      	it	eq
 800791c:	68ec      	ldreq	r4, [r5, #12]
 800791e:	e7e6      	b.n	80078ee <__swsetup_r+0x1e>
 8007920:	0758      	lsls	r0, r3, #29
 8007922:	d512      	bpl.n	800794a <__swsetup_r+0x7a>
 8007924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007926:	b141      	cbz	r1, 800793a <__swsetup_r+0x6a>
 8007928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800792c:	4299      	cmp	r1, r3
 800792e:	d002      	beq.n	8007936 <__swsetup_r+0x66>
 8007930:	4630      	mov	r0, r6
 8007932:	f000 f991 	bl	8007c58 <_free_r>
 8007936:	2300      	movs	r3, #0
 8007938:	6363      	str	r3, [r4, #52]	; 0x34
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	2300      	movs	r3, #0
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f043 0308 	orr.w	r3, r3, #8
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	b94b      	cbnz	r3, 800796a <__swsetup_r+0x9a>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800795c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007960:	d003      	beq.n	800796a <__swsetup_r+0x9a>
 8007962:	4621      	mov	r1, r4
 8007964:	4630      	mov	r0, r6
 8007966:	f000 f92b 	bl	8007bc0 <__smakebuf_r>
 800796a:	89a0      	ldrh	r0, [r4, #12]
 800796c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007970:	f010 0301 	ands.w	r3, r0, #1
 8007974:	d00a      	beq.n	800798c <__swsetup_r+0xbc>
 8007976:	2300      	movs	r3, #0
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	6963      	ldr	r3, [r4, #20]
 800797c:	425b      	negs	r3, r3
 800797e:	61a3      	str	r3, [r4, #24]
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	b943      	cbnz	r3, 8007996 <__swsetup_r+0xc6>
 8007984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007988:	d1ba      	bne.n	8007900 <__swsetup_r+0x30>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	0781      	lsls	r1, r0, #30
 800798e:	bf58      	it	pl
 8007990:	6963      	ldrpl	r3, [r4, #20]
 8007992:	60a3      	str	r3, [r4, #8]
 8007994:	e7f4      	b.n	8007980 <__swsetup_r+0xb0>
 8007996:	2000      	movs	r0, #0
 8007998:	e7f7      	b.n	800798a <__swsetup_r+0xba>
 800799a:	bf00      	nop
 800799c:	2000001c 	.word	0x2000001c
 80079a0:	080086c4 	.word	0x080086c4
 80079a4:	080086e4 	.word	0x080086e4
 80079a8:	080086a4 	.word	0x080086a4

080079ac <_close_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	; (80079c8 <_close_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7f9 ff79 	bl	80018ae <_close>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_close_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_close_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	2000479c 	.word	0x2000479c

080079cc <__sflush_r>:
 80079cc:	898a      	ldrh	r2, [r1, #12]
 80079ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	4605      	mov	r5, r0
 80079d4:	0710      	lsls	r0, r2, #28
 80079d6:	460c      	mov	r4, r1
 80079d8:	d458      	bmi.n	8007a8c <__sflush_r+0xc0>
 80079da:	684b      	ldr	r3, [r1, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dc05      	bgt.n	80079ec <__sflush_r+0x20>
 80079e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dc02      	bgt.n	80079ec <__sflush_r+0x20>
 80079e6:	2000      	movs	r0, #0
 80079e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ee:	2e00      	cmp	r6, #0
 80079f0:	d0f9      	beq.n	80079e6 <__sflush_r+0x1a>
 80079f2:	2300      	movs	r3, #0
 80079f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079f8:	682f      	ldr	r7, [r5, #0]
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	d032      	beq.n	8007a64 <__sflush_r+0x98>
 80079fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	075a      	lsls	r2, r3, #29
 8007a04:	d505      	bpl.n	8007a12 <__sflush_r+0x46>
 8007a06:	6863      	ldr	r3, [r4, #4]
 8007a08:	1ac0      	subs	r0, r0, r3
 8007a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a0c:	b10b      	cbz	r3, 8007a12 <__sflush_r+0x46>
 8007a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a10:	1ac0      	subs	r0, r0, r3
 8007a12:	2300      	movs	r3, #0
 8007a14:	4602      	mov	r2, r0
 8007a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a18:	6a21      	ldr	r1, [r4, #32]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b0      	blx	r6
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	d106      	bne.n	8007a32 <__sflush_r+0x66>
 8007a24:	6829      	ldr	r1, [r5, #0]
 8007a26:	291d      	cmp	r1, #29
 8007a28:	d82c      	bhi.n	8007a84 <__sflush_r+0xb8>
 8007a2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <__sflush_r+0x108>)
 8007a2c:	40ca      	lsrs	r2, r1
 8007a2e:	07d6      	lsls	r6, r2, #31
 8007a30:	d528      	bpl.n	8007a84 <__sflush_r+0xb8>
 8007a32:	2200      	movs	r2, #0
 8007a34:	6062      	str	r2, [r4, #4]
 8007a36:	04d9      	lsls	r1, r3, #19
 8007a38:	6922      	ldr	r2, [r4, #16]
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	d504      	bpl.n	8007a48 <__sflush_r+0x7c>
 8007a3e:	1c42      	adds	r2, r0, #1
 8007a40:	d101      	bne.n	8007a46 <__sflush_r+0x7a>
 8007a42:	682b      	ldr	r3, [r5, #0]
 8007a44:	b903      	cbnz	r3, 8007a48 <__sflush_r+0x7c>
 8007a46:	6560      	str	r0, [r4, #84]	; 0x54
 8007a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4a:	602f      	str	r7, [r5, #0]
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d0ca      	beq.n	80079e6 <__sflush_r+0x1a>
 8007a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a54:	4299      	cmp	r1, r3
 8007a56:	d002      	beq.n	8007a5e <__sflush_r+0x92>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f8fd 	bl	8007c58 <_free_r>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	6360      	str	r0, [r4, #52]	; 0x34
 8007a62:	e7c1      	b.n	80079e8 <__sflush_r+0x1c>
 8007a64:	6a21      	ldr	r1, [r4, #32]
 8007a66:	2301      	movs	r3, #1
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b0      	blx	r6
 8007a6c:	1c41      	adds	r1, r0, #1
 8007a6e:	d1c7      	bne.n	8007a00 <__sflush_r+0x34>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0c4      	beq.n	8007a00 <__sflush_r+0x34>
 8007a76:	2b1d      	cmp	r3, #29
 8007a78:	d001      	beq.n	8007a7e <__sflush_r+0xb2>
 8007a7a:	2b16      	cmp	r3, #22
 8007a7c:	d101      	bne.n	8007a82 <__sflush_r+0xb6>
 8007a7e:	602f      	str	r7, [r5, #0]
 8007a80:	e7b1      	b.n	80079e6 <__sflush_r+0x1a>
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	e7ad      	b.n	80079e8 <__sflush_r+0x1c>
 8007a8c:	690f      	ldr	r7, [r1, #16]
 8007a8e:	2f00      	cmp	r7, #0
 8007a90:	d0a9      	beq.n	80079e6 <__sflush_r+0x1a>
 8007a92:	0793      	lsls	r3, r2, #30
 8007a94:	680e      	ldr	r6, [r1, #0]
 8007a96:	bf08      	it	eq
 8007a98:	694b      	ldreq	r3, [r1, #20]
 8007a9a:	600f      	str	r7, [r1, #0]
 8007a9c:	bf18      	it	ne
 8007a9e:	2300      	movne	r3, #0
 8007aa0:	eba6 0807 	sub.w	r8, r6, r7
 8007aa4:	608b      	str	r3, [r1, #8]
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	dd9c      	ble.n	80079e6 <__sflush_r+0x1a>
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ab0:	4643      	mov	r3, r8
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	47b0      	blx	r6
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	dc06      	bgt.n	8007aca <__sflush_r+0xfe>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e78e      	b.n	80079e8 <__sflush_r+0x1c>
 8007aca:	4407      	add	r7, r0
 8007acc:	eba8 0800 	sub.w	r8, r8, r0
 8007ad0:	e7e9      	b.n	8007aa6 <__sflush_r+0xda>
 8007ad2:	bf00      	nop
 8007ad4:	20400001 	.word	0x20400001

08007ad8 <_fflush_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	690b      	ldr	r3, [r1, #16]
 8007adc:	4605      	mov	r5, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	b913      	cbnz	r3, 8007ae8 <_fflush_r+0x10>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	b118      	cbz	r0, 8007af2 <_fflush_r+0x1a>
 8007aea:	6983      	ldr	r3, [r0, #24]
 8007aec:	b90b      	cbnz	r3, 8007af2 <_fflush_r+0x1a>
 8007aee:	f7ff fb27 	bl	8007140 <__sinit>
 8007af2:	4b14      	ldr	r3, [pc, #80]	; (8007b44 <_fflush_r+0x6c>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d11b      	bne.n	8007b30 <_fflush_r+0x58>
 8007af8:	686c      	ldr	r4, [r5, #4]
 8007afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0ef      	beq.n	8007ae2 <_fflush_r+0xa>
 8007b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b04:	07d0      	lsls	r0, r2, #31
 8007b06:	d404      	bmi.n	8007b12 <_fflush_r+0x3a>
 8007b08:	0599      	lsls	r1, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_fflush_r+0x3a>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0e:	f7ff fbda 	bl	80072c6 <__retarget_lock_acquire_recursive>
 8007b12:	4628      	mov	r0, r5
 8007b14:	4621      	mov	r1, r4
 8007b16:	f7ff ff59 	bl	80079cc <__sflush_r>
 8007b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1c:	07da      	lsls	r2, r3, #31
 8007b1e:	4605      	mov	r5, r0
 8007b20:	d4e0      	bmi.n	8007ae4 <_fflush_r+0xc>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	059b      	lsls	r3, r3, #22
 8007b26:	d4dd      	bmi.n	8007ae4 <_fflush_r+0xc>
 8007b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2a:	f7ff fbcd 	bl	80072c8 <__retarget_lock_release_recursive>
 8007b2e:	e7d9      	b.n	8007ae4 <_fflush_r+0xc>
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <_fflush_r+0x70>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <_fflush_r+0x62>
 8007b36:	68ac      	ldr	r4, [r5, #8]
 8007b38:	e7df      	b.n	8007afa <_fflush_r+0x22>
 8007b3a:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <_fflush_r+0x74>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68ec      	ldreq	r4, [r5, #12]
 8007b42:	e7da      	b.n	8007afa <_fflush_r+0x22>
 8007b44:	080086c4 	.word	0x080086c4
 8007b48:	080086e4 	.word	0x080086e4
 8007b4c:	080086a4 	.word	0x080086a4

08007b50 <_lseek_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d07      	ldr	r5, [pc, #28]	; (8007b70 <_lseek_r+0x20>)
 8007b54:	4604      	mov	r4, r0
 8007b56:	4608      	mov	r0, r1
 8007b58:	4611      	mov	r1, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	602a      	str	r2, [r5, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f7f9 fecc 	bl	80018fc <_lseek>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_lseek_r+0x1e>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_lseek_r+0x1e>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	2000479c 	.word	0x2000479c

08007b74 <__swhatbuf_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	460e      	mov	r6, r1
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	b096      	sub	sp, #88	; 0x58
 8007b80:	4614      	mov	r4, r2
 8007b82:	461d      	mov	r5, r3
 8007b84:	da08      	bge.n	8007b98 <__swhatbuf_r+0x24>
 8007b86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	602a      	str	r2, [r5, #0]
 8007b8e:	061a      	lsls	r2, r3, #24
 8007b90:	d410      	bmi.n	8007bb4 <__swhatbuf_r+0x40>
 8007b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b96:	e00e      	b.n	8007bb6 <__swhatbuf_r+0x42>
 8007b98:	466a      	mov	r2, sp
 8007b9a:	f000 fbab 	bl	80082f4 <_fstat_r>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dbf1      	blt.n	8007b86 <__swhatbuf_r+0x12>
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bac:	425a      	negs	r2, r3
 8007bae:	415a      	adcs	r2, r3
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	e7ee      	b.n	8007b92 <__swhatbuf_r+0x1e>
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	b016      	add	sp, #88	; 0x58
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bc0 <__smakebuf_r>:
 8007bc0:	898b      	ldrh	r3, [r1, #12]
 8007bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc4:	079d      	lsls	r5, r3, #30
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	d507      	bpl.n	8007bdc <__smakebuf_r+0x1c>
 8007bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	6163      	str	r3, [r4, #20]
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	ab01      	add	r3, sp, #4
 8007bde:	466a      	mov	r2, sp
 8007be0:	f7ff ffc8 	bl	8007b74 <__swhatbuf_r>
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7ff fba5 	bl	8007338 <_malloc_r>
 8007bee:	b948      	cbnz	r0, 8007c04 <__smakebuf_r+0x44>
 8007bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf4:	059a      	lsls	r2, r3, #22
 8007bf6:	d4ef      	bmi.n	8007bd8 <__smakebuf_r+0x18>
 8007bf8:	f023 0303 	bic.w	r3, r3, #3
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	e7e3      	b.n	8007bcc <__smakebuf_r+0xc>
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <__smakebuf_r+0x7c>)
 8007c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	6163      	str	r3, [r4, #20]
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	6120      	str	r0, [r4, #16]
 8007c1a:	b15b      	cbz	r3, 8007c34 <__smakebuf_r+0x74>
 8007c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 fb79 	bl	8008318 <_isatty_r>
 8007c26:	b128      	cbz	r0, 8007c34 <__smakebuf_r+0x74>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	89a0      	ldrh	r0, [r4, #12]
 8007c36:	4305      	orrs	r5, r0
 8007c38:	81a5      	strh	r5, [r4, #12]
 8007c3a:	e7cd      	b.n	8007bd8 <__smakebuf_r+0x18>
 8007c3c:	080070d9 	.word	0x080070d9

08007c40 <__malloc_lock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__malloc_lock+0x8>)
 8007c42:	f7ff bb40 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 8007c46:	bf00      	nop
 8007c48:	20004790 	.word	0x20004790

08007c4c <__malloc_unlock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__malloc_unlock+0x8>)
 8007c4e:	f7ff bb3b 	b.w	80072c8 <__retarget_lock_release_recursive>
 8007c52:	bf00      	nop
 8007c54:	20004790 	.word	0x20004790

08007c58 <_free_r>:
 8007c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5a:	2900      	cmp	r1, #0
 8007c5c:	d044      	beq.n	8007ce8 <_free_r+0x90>
 8007c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c62:	9001      	str	r0, [sp, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f1a1 0404 	sub.w	r4, r1, #4
 8007c6a:	bfb8      	it	lt
 8007c6c:	18e4      	addlt	r4, r4, r3
 8007c6e:	f7ff ffe7 	bl	8007c40 <__malloc_lock>
 8007c72:	4a1e      	ldr	r2, [pc, #120]	; (8007cec <_free_r+0x94>)
 8007c74:	9801      	ldr	r0, [sp, #4]
 8007c76:	6813      	ldr	r3, [r2, #0]
 8007c78:	b933      	cbnz	r3, 8007c88 <_free_r+0x30>
 8007c7a:	6063      	str	r3, [r4, #4]
 8007c7c:	6014      	str	r4, [r2, #0]
 8007c7e:	b003      	add	sp, #12
 8007c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c84:	f7ff bfe2 	b.w	8007c4c <__malloc_unlock>
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d908      	bls.n	8007c9e <_free_r+0x46>
 8007c8c:	6825      	ldr	r5, [r4, #0]
 8007c8e:	1961      	adds	r1, r4, r5
 8007c90:	428b      	cmp	r3, r1
 8007c92:	bf01      	itttt	eq
 8007c94:	6819      	ldreq	r1, [r3, #0]
 8007c96:	685b      	ldreq	r3, [r3, #4]
 8007c98:	1949      	addeq	r1, r1, r5
 8007c9a:	6021      	streq	r1, [r4, #0]
 8007c9c:	e7ed      	b.n	8007c7a <_free_r+0x22>
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	b10b      	cbz	r3, 8007ca8 <_free_r+0x50>
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	d9fa      	bls.n	8007c9e <_free_r+0x46>
 8007ca8:	6811      	ldr	r1, [r2, #0]
 8007caa:	1855      	adds	r5, r2, r1
 8007cac:	42a5      	cmp	r5, r4
 8007cae:	d10b      	bne.n	8007cc8 <_free_r+0x70>
 8007cb0:	6824      	ldr	r4, [r4, #0]
 8007cb2:	4421      	add	r1, r4
 8007cb4:	1854      	adds	r4, r2, r1
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	6011      	str	r1, [r2, #0]
 8007cba:	d1e0      	bne.n	8007c7e <_free_r+0x26>
 8007cbc:	681c      	ldr	r4, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	6053      	str	r3, [r2, #4]
 8007cc2:	4421      	add	r1, r4
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	e7da      	b.n	8007c7e <_free_r+0x26>
 8007cc8:	d902      	bls.n	8007cd0 <_free_r+0x78>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	6003      	str	r3, [r0, #0]
 8007cce:	e7d6      	b.n	8007c7e <_free_r+0x26>
 8007cd0:	6825      	ldr	r5, [r4, #0]
 8007cd2:	1961      	adds	r1, r4, r5
 8007cd4:	428b      	cmp	r3, r1
 8007cd6:	bf04      	itt	eq
 8007cd8:	6819      	ldreq	r1, [r3, #0]
 8007cda:	685b      	ldreq	r3, [r3, #4]
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	bf04      	itt	eq
 8007ce0:	1949      	addeq	r1, r1, r5
 8007ce2:	6021      	streq	r1, [r4, #0]
 8007ce4:	6054      	str	r4, [r2, #4]
 8007ce6:	e7ca      	b.n	8007c7e <_free_r+0x26>
 8007ce8:	b003      	add	sp, #12
 8007cea:	bd30      	pop	{r4, r5, pc}
 8007cec:	20004794 	.word	0x20004794

08007cf0 <__ssputs_r>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	688e      	ldr	r6, [r1, #8]
 8007cf6:	429e      	cmp	r6, r3
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	4690      	mov	r8, r2
 8007cfe:	461f      	mov	r7, r3
 8007d00:	d838      	bhi.n	8007d74 <__ssputs_r+0x84>
 8007d02:	898a      	ldrh	r2, [r1, #12]
 8007d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d08:	d032      	beq.n	8007d70 <__ssputs_r+0x80>
 8007d0a:	6825      	ldr	r5, [r4, #0]
 8007d0c:	6909      	ldr	r1, [r1, #16]
 8007d0e:	eba5 0901 	sub.w	r9, r5, r1
 8007d12:	6965      	ldr	r5, [r4, #20]
 8007d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	444b      	add	r3, r9
 8007d20:	106d      	asrs	r5, r5, #1
 8007d22:	429d      	cmp	r5, r3
 8007d24:	bf38      	it	cc
 8007d26:	461d      	movcc	r5, r3
 8007d28:	0553      	lsls	r3, r2, #21
 8007d2a:	d531      	bpl.n	8007d90 <__ssputs_r+0xa0>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	f7ff fb03 	bl	8007338 <_malloc_r>
 8007d32:	4606      	mov	r6, r0
 8007d34:	b950      	cbnz	r0, 8007d4c <__ssputs_r+0x5c>
 8007d36:	230c      	movs	r3, #12
 8007d38:	f8ca 3000 	str.w	r3, [sl]
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4c:	6921      	ldr	r1, [r4, #16]
 8007d4e:	464a      	mov	r2, r9
 8007d50:	f7ff fabb 	bl	80072ca <memcpy>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	6126      	str	r6, [r4, #16]
 8007d62:	6165      	str	r5, [r4, #20]
 8007d64:	444e      	add	r6, r9
 8007d66:	eba5 0509 	sub.w	r5, r5, r9
 8007d6a:	6026      	str	r6, [r4, #0]
 8007d6c:	60a5      	str	r5, [r4, #8]
 8007d6e:	463e      	mov	r6, r7
 8007d70:	42be      	cmp	r6, r7
 8007d72:	d900      	bls.n	8007d76 <__ssputs_r+0x86>
 8007d74:	463e      	mov	r6, r7
 8007d76:	6820      	ldr	r0, [r4, #0]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	4641      	mov	r1, r8
 8007d7c:	f000 fadc 	bl	8008338 <memmove>
 8007d80:	68a3      	ldr	r3, [r4, #8]
 8007d82:	1b9b      	subs	r3, r3, r6
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	4433      	add	r3, r6
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7db      	b.n	8007d48 <__ssputs_r+0x58>
 8007d90:	462a      	mov	r2, r5
 8007d92:	f000 faeb 	bl	800836c <_realloc_r>
 8007d96:	4606      	mov	r6, r0
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d1e1      	bne.n	8007d60 <__ssputs_r+0x70>
 8007d9c:	6921      	ldr	r1, [r4, #16]
 8007d9e:	4650      	mov	r0, sl
 8007da0:	f7ff ff5a 	bl	8007c58 <_free_r>
 8007da4:	e7c7      	b.n	8007d36 <__ssputs_r+0x46>
	...

08007da8 <_svfiprintf_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4698      	mov	r8, r3
 8007dae:	898b      	ldrh	r3, [r1, #12]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	b09d      	sub	sp, #116	; 0x74
 8007db4:	4607      	mov	r7, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	d50e      	bpl.n	8007dda <_svfiprintf_r+0x32>
 8007dbc:	690b      	ldr	r3, [r1, #16]
 8007dbe:	b963      	cbnz	r3, 8007dda <_svfiprintf_r+0x32>
 8007dc0:	2140      	movs	r1, #64	; 0x40
 8007dc2:	f7ff fab9 	bl	8007338 <_malloc_r>
 8007dc6:	6028      	str	r0, [r5, #0]
 8007dc8:	6128      	str	r0, [r5, #16]
 8007dca:	b920      	cbnz	r0, 8007dd6 <_svfiprintf_r+0x2e>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e0d1      	b.n	8007f7a <_svfiprintf_r+0x1d2>
 8007dd6:	2340      	movs	r3, #64	; 0x40
 8007dd8:	616b      	str	r3, [r5, #20]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dde:	2320      	movs	r3, #32
 8007de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de8:	2330      	movs	r3, #48	; 0x30
 8007dea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f94 <_svfiprintf_r+0x1ec>
 8007dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007df2:	f04f 0901 	mov.w	r9, #1
 8007df6:	4623      	mov	r3, r4
 8007df8:	469a      	mov	sl, r3
 8007dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dfe:	b10a      	cbz	r2, 8007e04 <_svfiprintf_r+0x5c>
 8007e00:	2a25      	cmp	r2, #37	; 0x25
 8007e02:	d1f9      	bne.n	8007df8 <_svfiprintf_r+0x50>
 8007e04:	ebba 0b04 	subs.w	fp, sl, r4
 8007e08:	d00b      	beq.n	8007e22 <_svfiprintf_r+0x7a>
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff ff6d 	bl	8007cf0 <__ssputs_r>
 8007e16:	3001      	adds	r0, #1
 8007e18:	f000 80aa 	beq.w	8007f70 <_svfiprintf_r+0x1c8>
 8007e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e1e:	445a      	add	r2, fp
 8007e20:	9209      	str	r2, [sp, #36]	; 0x24
 8007e22:	f89a 3000 	ldrb.w	r3, [sl]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80a2 	beq.w	8007f70 <_svfiprintf_r+0x1c8>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e36:	f10a 0a01 	add.w	sl, sl, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	9307      	str	r3, [sp, #28]
 8007e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e42:	931a      	str	r3, [sp, #104]	; 0x68
 8007e44:	4654      	mov	r4, sl
 8007e46:	2205      	movs	r2, #5
 8007e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4c:	4851      	ldr	r0, [pc, #324]	; (8007f94 <_svfiprintf_r+0x1ec>)
 8007e4e:	f7f8 f9df 	bl	8000210 <memchr>
 8007e52:	9a04      	ldr	r2, [sp, #16]
 8007e54:	b9d8      	cbnz	r0, 8007e8e <_svfiprintf_r+0xe6>
 8007e56:	06d0      	lsls	r0, r2, #27
 8007e58:	bf44      	itt	mi
 8007e5a:	2320      	movmi	r3, #32
 8007e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e60:	0711      	lsls	r1, r2, #28
 8007e62:	bf44      	itt	mi
 8007e64:	232b      	movmi	r3, #43	; 0x2b
 8007e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e70:	d015      	beq.n	8007e9e <_svfiprintf_r+0xf6>
 8007e72:	9a07      	ldr	r2, [sp, #28]
 8007e74:	4654      	mov	r4, sl
 8007e76:	2000      	movs	r0, #0
 8007e78:	f04f 0c0a 	mov.w	ip, #10
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e82:	3b30      	subs	r3, #48	; 0x30
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d94e      	bls.n	8007f26 <_svfiprintf_r+0x17e>
 8007e88:	b1b0      	cbz	r0, 8007eb8 <_svfiprintf_r+0x110>
 8007e8a:	9207      	str	r2, [sp, #28]
 8007e8c:	e014      	b.n	8007eb8 <_svfiprintf_r+0x110>
 8007e8e:	eba0 0308 	sub.w	r3, r0, r8
 8007e92:	fa09 f303 	lsl.w	r3, r9, r3
 8007e96:	4313      	orrs	r3, r2
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	46a2      	mov	sl, r4
 8007e9c:	e7d2      	b.n	8007e44 <_svfiprintf_r+0x9c>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	1d19      	adds	r1, r3, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	9103      	str	r1, [sp, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbb      	ittet	lt
 8007eaa:	425b      	neglt	r3, r3
 8007eac:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb0:	9307      	strge	r3, [sp, #28]
 8007eb2:	9307      	strlt	r3, [sp, #28]
 8007eb4:	bfb8      	it	lt
 8007eb6:	9204      	strlt	r2, [sp, #16]
 8007eb8:	7823      	ldrb	r3, [r4, #0]
 8007eba:	2b2e      	cmp	r3, #46	; 0x2e
 8007ebc:	d10c      	bne.n	8007ed8 <_svfiprintf_r+0x130>
 8007ebe:	7863      	ldrb	r3, [r4, #1]
 8007ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec2:	d135      	bne.n	8007f30 <_svfiprintf_r+0x188>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	1d1a      	adds	r2, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	9203      	str	r2, [sp, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bfb8      	it	lt
 8007ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ed4:	3402      	adds	r4, #2
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fa4 <_svfiprintf_r+0x1fc>
 8007edc:	7821      	ldrb	r1, [r4, #0]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f7f8 f995 	bl	8000210 <memchr>
 8007ee6:	b140      	cbz	r0, 8007efa <_svfiprintf_r+0x152>
 8007ee8:	2340      	movs	r3, #64	; 0x40
 8007eea:	eba0 000a 	sub.w	r0, r0, sl
 8007eee:	fa03 f000 	lsl.w	r0, r3, r0
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	4303      	orrs	r3, r0
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4826      	ldr	r0, [pc, #152]	; (8007f98 <_svfiprintf_r+0x1f0>)
 8007f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f04:	2206      	movs	r2, #6
 8007f06:	f7f8 f983 	bl	8000210 <memchr>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d038      	beq.n	8007f80 <_svfiprintf_r+0x1d8>
 8007f0e:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <_svfiprintf_r+0x1f4>)
 8007f10:	bb1b      	cbnz	r3, 8007f5a <_svfiprintf_r+0x1b2>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f20:	4433      	add	r3, r6
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
 8007f24:	e767      	b.n	8007df6 <_svfiprintf_r+0x4e>
 8007f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	e7a5      	b.n	8007e7c <_svfiprintf_r+0xd4>
 8007f30:	2300      	movs	r3, #0
 8007f32:	3401      	adds	r4, #1
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	4619      	mov	r1, r3
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f42:	3a30      	subs	r2, #48	; 0x30
 8007f44:	2a09      	cmp	r2, #9
 8007f46:	d903      	bls.n	8007f50 <_svfiprintf_r+0x1a8>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0c5      	beq.n	8007ed8 <_svfiprintf_r+0x130>
 8007f4c:	9105      	str	r1, [sp, #20]
 8007f4e:	e7c3      	b.n	8007ed8 <_svfiprintf_r+0x130>
 8007f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f54:	4604      	mov	r4, r0
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7f0      	b.n	8007f3c <_svfiprintf_r+0x194>
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	462a      	mov	r2, r5
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <_svfiprintf_r+0x1f8>)
 8007f62:	a904      	add	r1, sp, #16
 8007f64:	4638      	mov	r0, r7
 8007f66:	f3af 8000 	nop.w
 8007f6a:	1c42      	adds	r2, r0, #1
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	d1d6      	bne.n	8007f1e <_svfiprintf_r+0x176>
 8007f70:	89ab      	ldrh	r3, [r5, #12]
 8007f72:	065b      	lsls	r3, r3, #25
 8007f74:	f53f af2c 	bmi.w	8007dd0 <_svfiprintf_r+0x28>
 8007f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f7a:	b01d      	add	sp, #116	; 0x74
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	ab03      	add	r3, sp, #12
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	462a      	mov	r2, r5
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <_svfiprintf_r+0x1f8>)
 8007f88:	a904      	add	r1, sp, #16
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f000 f87a 	bl	8008084 <_printf_i>
 8007f90:	e7eb      	b.n	8007f6a <_svfiprintf_r+0x1c2>
 8007f92:	bf00      	nop
 8007f94:	08008809 	.word	0x08008809
 8007f98:	08008813 	.word	0x08008813
 8007f9c:	00000000 	.word	0x00000000
 8007fa0:	08007cf1 	.word	0x08007cf1
 8007fa4:	0800880f 	.word	0x0800880f

08007fa8 <_printf_common>:
 8007fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fac:	4616      	mov	r6, r2
 8007fae:	4699      	mov	r9, r3
 8007fb0:	688a      	ldr	r2, [r1, #8]
 8007fb2:	690b      	ldr	r3, [r1, #16]
 8007fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	bfb8      	it	lt
 8007fbc:	4613      	movlt	r3, r2
 8007fbe:	6033      	str	r3, [r6, #0]
 8007fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b10a      	cbz	r2, 8007fce <_printf_common+0x26>
 8007fca:	3301      	adds	r3, #1
 8007fcc:	6033      	str	r3, [r6, #0]
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	0699      	lsls	r1, r3, #26
 8007fd2:	bf42      	ittt	mi
 8007fd4:	6833      	ldrmi	r3, [r6, #0]
 8007fd6:	3302      	addmi	r3, #2
 8007fd8:	6033      	strmi	r3, [r6, #0]
 8007fda:	6825      	ldr	r5, [r4, #0]
 8007fdc:	f015 0506 	ands.w	r5, r5, #6
 8007fe0:	d106      	bne.n	8007ff0 <_printf_common+0x48>
 8007fe2:	f104 0a19 	add.w	sl, r4, #25
 8007fe6:	68e3      	ldr	r3, [r4, #12]
 8007fe8:	6832      	ldr	r2, [r6, #0]
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	42ab      	cmp	r3, r5
 8007fee:	dc26      	bgt.n	800803e <_printf_common+0x96>
 8007ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ff4:	1e13      	subs	r3, r2, #0
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	bf18      	it	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	0692      	lsls	r2, r2, #26
 8007ffe:	d42b      	bmi.n	8008058 <_printf_common+0xb0>
 8008000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008004:	4649      	mov	r1, r9
 8008006:	4638      	mov	r0, r7
 8008008:	47c0      	blx	r8
 800800a:	3001      	adds	r0, #1
 800800c:	d01e      	beq.n	800804c <_printf_common+0xa4>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	68e5      	ldr	r5, [r4, #12]
 8008012:	6832      	ldr	r2, [r6, #0]
 8008014:	f003 0306 	and.w	r3, r3, #6
 8008018:	2b04      	cmp	r3, #4
 800801a:	bf08      	it	eq
 800801c:	1aad      	subeq	r5, r5, r2
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	bf0c      	ite	eq
 8008024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008028:	2500      	movne	r5, #0
 800802a:	4293      	cmp	r3, r2
 800802c:	bfc4      	itt	gt
 800802e:	1a9b      	subgt	r3, r3, r2
 8008030:	18ed      	addgt	r5, r5, r3
 8008032:	2600      	movs	r6, #0
 8008034:	341a      	adds	r4, #26
 8008036:	42b5      	cmp	r5, r6
 8008038:	d11a      	bne.n	8008070 <_printf_common+0xc8>
 800803a:	2000      	movs	r0, #0
 800803c:	e008      	b.n	8008050 <_printf_common+0xa8>
 800803e:	2301      	movs	r3, #1
 8008040:	4652      	mov	r2, sl
 8008042:	4649      	mov	r1, r9
 8008044:	4638      	mov	r0, r7
 8008046:	47c0      	blx	r8
 8008048:	3001      	adds	r0, #1
 800804a:	d103      	bne.n	8008054 <_printf_common+0xac>
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008054:	3501      	adds	r5, #1
 8008056:	e7c6      	b.n	8007fe6 <_printf_common+0x3e>
 8008058:	18e1      	adds	r1, r4, r3
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	2030      	movs	r0, #48	; 0x30
 800805e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008062:	4422      	add	r2, r4
 8008064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800806c:	3302      	adds	r3, #2
 800806e:	e7c7      	b.n	8008000 <_printf_common+0x58>
 8008070:	2301      	movs	r3, #1
 8008072:	4622      	mov	r2, r4
 8008074:	4649      	mov	r1, r9
 8008076:	4638      	mov	r0, r7
 8008078:	47c0      	blx	r8
 800807a:	3001      	adds	r0, #1
 800807c:	d0e6      	beq.n	800804c <_printf_common+0xa4>
 800807e:	3601      	adds	r6, #1
 8008080:	e7d9      	b.n	8008036 <_printf_common+0x8e>
	...

08008084 <_printf_i>:
 8008084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	7e0f      	ldrb	r7, [r1, #24]
 800808a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800808c:	2f78      	cmp	r7, #120	; 0x78
 800808e:	4691      	mov	r9, r2
 8008090:	4680      	mov	r8, r0
 8008092:	460c      	mov	r4, r1
 8008094:	469a      	mov	sl, r3
 8008096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800809a:	d807      	bhi.n	80080ac <_printf_i+0x28>
 800809c:	2f62      	cmp	r7, #98	; 0x62
 800809e:	d80a      	bhi.n	80080b6 <_printf_i+0x32>
 80080a0:	2f00      	cmp	r7, #0
 80080a2:	f000 80d8 	beq.w	8008256 <_printf_i+0x1d2>
 80080a6:	2f58      	cmp	r7, #88	; 0x58
 80080a8:	f000 80a3 	beq.w	80081f2 <_printf_i+0x16e>
 80080ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080b4:	e03a      	b.n	800812c <_printf_i+0xa8>
 80080b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080ba:	2b15      	cmp	r3, #21
 80080bc:	d8f6      	bhi.n	80080ac <_printf_i+0x28>
 80080be:	a101      	add	r1, pc, #4	; (adr r1, 80080c4 <_printf_i+0x40>)
 80080c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080c4:	0800811d 	.word	0x0800811d
 80080c8:	08008131 	.word	0x08008131
 80080cc:	080080ad 	.word	0x080080ad
 80080d0:	080080ad 	.word	0x080080ad
 80080d4:	080080ad 	.word	0x080080ad
 80080d8:	080080ad 	.word	0x080080ad
 80080dc:	08008131 	.word	0x08008131
 80080e0:	080080ad 	.word	0x080080ad
 80080e4:	080080ad 	.word	0x080080ad
 80080e8:	080080ad 	.word	0x080080ad
 80080ec:	080080ad 	.word	0x080080ad
 80080f0:	0800823d 	.word	0x0800823d
 80080f4:	08008161 	.word	0x08008161
 80080f8:	0800821f 	.word	0x0800821f
 80080fc:	080080ad 	.word	0x080080ad
 8008100:	080080ad 	.word	0x080080ad
 8008104:	0800825f 	.word	0x0800825f
 8008108:	080080ad 	.word	0x080080ad
 800810c:	08008161 	.word	0x08008161
 8008110:	080080ad 	.word	0x080080ad
 8008114:	080080ad 	.word	0x080080ad
 8008118:	08008227 	.word	0x08008227
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	1d1a      	adds	r2, r3, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	602a      	str	r2, [r5, #0]
 8008124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800812c:	2301      	movs	r3, #1
 800812e:	e0a3      	b.n	8008278 <_printf_i+0x1f4>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	6829      	ldr	r1, [r5, #0]
 8008134:	0606      	lsls	r6, r0, #24
 8008136:	f101 0304 	add.w	r3, r1, #4
 800813a:	d50a      	bpl.n	8008152 <_printf_i+0xce>
 800813c:	680e      	ldr	r6, [r1, #0]
 800813e:	602b      	str	r3, [r5, #0]
 8008140:	2e00      	cmp	r6, #0
 8008142:	da03      	bge.n	800814c <_printf_i+0xc8>
 8008144:	232d      	movs	r3, #45	; 0x2d
 8008146:	4276      	negs	r6, r6
 8008148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800814c:	485e      	ldr	r0, [pc, #376]	; (80082c8 <_printf_i+0x244>)
 800814e:	230a      	movs	r3, #10
 8008150:	e019      	b.n	8008186 <_printf_i+0x102>
 8008152:	680e      	ldr	r6, [r1, #0]
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	f010 0f40 	tst.w	r0, #64	; 0x40
 800815a:	bf18      	it	ne
 800815c:	b236      	sxthne	r6, r6
 800815e:	e7ef      	b.n	8008140 <_printf_i+0xbc>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	6820      	ldr	r0, [r4, #0]
 8008164:	1d19      	adds	r1, r3, #4
 8008166:	6029      	str	r1, [r5, #0]
 8008168:	0601      	lsls	r1, r0, #24
 800816a:	d501      	bpl.n	8008170 <_printf_i+0xec>
 800816c:	681e      	ldr	r6, [r3, #0]
 800816e:	e002      	b.n	8008176 <_printf_i+0xf2>
 8008170:	0646      	lsls	r6, r0, #25
 8008172:	d5fb      	bpl.n	800816c <_printf_i+0xe8>
 8008174:	881e      	ldrh	r6, [r3, #0]
 8008176:	4854      	ldr	r0, [pc, #336]	; (80082c8 <_printf_i+0x244>)
 8008178:	2f6f      	cmp	r7, #111	; 0x6f
 800817a:	bf0c      	ite	eq
 800817c:	2308      	moveq	r3, #8
 800817e:	230a      	movne	r3, #10
 8008180:	2100      	movs	r1, #0
 8008182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008186:	6865      	ldr	r5, [r4, #4]
 8008188:	60a5      	str	r5, [r4, #8]
 800818a:	2d00      	cmp	r5, #0
 800818c:	bfa2      	ittt	ge
 800818e:	6821      	ldrge	r1, [r4, #0]
 8008190:	f021 0104 	bicge.w	r1, r1, #4
 8008194:	6021      	strge	r1, [r4, #0]
 8008196:	b90e      	cbnz	r6, 800819c <_printf_i+0x118>
 8008198:	2d00      	cmp	r5, #0
 800819a:	d04d      	beq.n	8008238 <_printf_i+0x1b4>
 800819c:	4615      	mov	r5, r2
 800819e:	fbb6 f1f3 	udiv	r1, r6, r3
 80081a2:	fb03 6711 	mls	r7, r3, r1, r6
 80081a6:	5dc7      	ldrb	r7, [r0, r7]
 80081a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081ac:	4637      	mov	r7, r6
 80081ae:	42bb      	cmp	r3, r7
 80081b0:	460e      	mov	r6, r1
 80081b2:	d9f4      	bls.n	800819e <_printf_i+0x11a>
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d10b      	bne.n	80081d0 <_printf_i+0x14c>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	07de      	lsls	r6, r3, #31
 80081bc:	d508      	bpl.n	80081d0 <_printf_i+0x14c>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6861      	ldr	r1, [r4, #4]
 80081c2:	4299      	cmp	r1, r3
 80081c4:	bfde      	ittt	le
 80081c6:	2330      	movle	r3, #48	; 0x30
 80081c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081d0:	1b52      	subs	r2, r2, r5
 80081d2:	6122      	str	r2, [r4, #16]
 80081d4:	f8cd a000 	str.w	sl, [sp]
 80081d8:	464b      	mov	r3, r9
 80081da:	aa03      	add	r2, sp, #12
 80081dc:	4621      	mov	r1, r4
 80081de:	4640      	mov	r0, r8
 80081e0:	f7ff fee2 	bl	8007fa8 <_printf_common>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d14c      	bne.n	8008282 <_printf_i+0x1fe>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	b004      	add	sp, #16
 80081ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f2:	4835      	ldr	r0, [pc, #212]	; (80082c8 <_printf_i+0x244>)
 80081f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081f8:	6829      	ldr	r1, [r5, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008200:	6029      	str	r1, [r5, #0]
 8008202:	061d      	lsls	r5, r3, #24
 8008204:	d514      	bpl.n	8008230 <_printf_i+0x1ac>
 8008206:	07df      	lsls	r7, r3, #31
 8008208:	bf44      	itt	mi
 800820a:	f043 0320 	orrmi.w	r3, r3, #32
 800820e:	6023      	strmi	r3, [r4, #0]
 8008210:	b91e      	cbnz	r6, 800821a <_printf_i+0x196>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	f023 0320 	bic.w	r3, r3, #32
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	2310      	movs	r3, #16
 800821c:	e7b0      	b.n	8008180 <_printf_i+0xfc>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	f043 0320 	orr.w	r3, r3, #32
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	2378      	movs	r3, #120	; 0x78
 8008228:	4828      	ldr	r0, [pc, #160]	; (80082cc <_printf_i+0x248>)
 800822a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800822e:	e7e3      	b.n	80081f8 <_printf_i+0x174>
 8008230:	0659      	lsls	r1, r3, #25
 8008232:	bf48      	it	mi
 8008234:	b2b6      	uxthmi	r6, r6
 8008236:	e7e6      	b.n	8008206 <_printf_i+0x182>
 8008238:	4615      	mov	r5, r2
 800823a:	e7bb      	b.n	80081b4 <_printf_i+0x130>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	6826      	ldr	r6, [r4, #0]
 8008240:	6961      	ldr	r1, [r4, #20]
 8008242:	1d18      	adds	r0, r3, #4
 8008244:	6028      	str	r0, [r5, #0]
 8008246:	0635      	lsls	r5, r6, #24
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	d501      	bpl.n	8008250 <_printf_i+0x1cc>
 800824c:	6019      	str	r1, [r3, #0]
 800824e:	e002      	b.n	8008256 <_printf_i+0x1d2>
 8008250:	0670      	lsls	r0, r6, #25
 8008252:	d5fb      	bpl.n	800824c <_printf_i+0x1c8>
 8008254:	8019      	strh	r1, [r3, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	4615      	mov	r5, r2
 800825c:	e7ba      	b.n	80081d4 <_printf_i+0x150>
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	1d1a      	adds	r2, r3, #4
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	681d      	ldr	r5, [r3, #0]
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	2100      	movs	r1, #0
 800826a:	4628      	mov	r0, r5
 800826c:	f7f7 ffd0 	bl	8000210 <memchr>
 8008270:	b108      	cbz	r0, 8008276 <_printf_i+0x1f2>
 8008272:	1b40      	subs	r0, r0, r5
 8008274:	6060      	str	r0, [r4, #4]
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	2300      	movs	r3, #0
 800827c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008280:	e7a8      	b.n	80081d4 <_printf_i+0x150>
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	462a      	mov	r2, r5
 8008286:	4649      	mov	r1, r9
 8008288:	4640      	mov	r0, r8
 800828a:	47d0      	blx	sl
 800828c:	3001      	adds	r0, #1
 800828e:	d0ab      	beq.n	80081e8 <_printf_i+0x164>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	079b      	lsls	r3, r3, #30
 8008294:	d413      	bmi.n	80082be <_printf_i+0x23a>
 8008296:	68e0      	ldr	r0, [r4, #12]
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	4298      	cmp	r0, r3
 800829c:	bfb8      	it	lt
 800829e:	4618      	movlt	r0, r3
 80082a0:	e7a4      	b.n	80081ec <_printf_i+0x168>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4632      	mov	r2, r6
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	47d0      	blx	sl
 80082ac:	3001      	adds	r0, #1
 80082ae:	d09b      	beq.n	80081e8 <_printf_i+0x164>
 80082b0:	3501      	adds	r5, #1
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	9903      	ldr	r1, [sp, #12]
 80082b6:	1a5b      	subs	r3, r3, r1
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dcf2      	bgt.n	80082a2 <_printf_i+0x21e>
 80082bc:	e7eb      	b.n	8008296 <_printf_i+0x212>
 80082be:	2500      	movs	r5, #0
 80082c0:	f104 0619 	add.w	r6, r4, #25
 80082c4:	e7f5      	b.n	80082b2 <_printf_i+0x22e>
 80082c6:	bf00      	nop
 80082c8:	0800881a 	.word	0x0800881a
 80082cc:	0800882b 	.word	0x0800882b

080082d0 <_read_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_read_r+0x20>)
 80082d4:	4604      	mov	r4, r0
 80082d6:	4608      	mov	r0, r1
 80082d8:	4611      	mov	r1, r2
 80082da:	2200      	movs	r2, #0
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7f9 faac 	bl	800183c <_read>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_read_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_read_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	2000479c 	.word	0x2000479c

080082f4 <_fstat_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d07      	ldr	r5, [pc, #28]	; (8008314 <_fstat_r+0x20>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	f7f9 fae0 	bl	80018c6 <_fstat>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d102      	bne.n	8008310 <_fstat_r+0x1c>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	b103      	cbz	r3, 8008310 <_fstat_r+0x1c>
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	bd38      	pop	{r3, r4, r5, pc}
 8008312:	bf00      	nop
 8008314:	2000479c 	.word	0x2000479c

08008318 <_isatty_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d06      	ldr	r5, [pc, #24]	; (8008334 <_isatty_r+0x1c>)
 800831c:	2300      	movs	r3, #0
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	f7f9 fadf 	bl	80018e6 <_isatty>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_isatty_r+0x1a>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_isatty_r+0x1a>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	2000479c 	.word	0x2000479c

08008338 <memmove>:
 8008338:	4288      	cmp	r0, r1
 800833a:	b510      	push	{r4, lr}
 800833c:	eb01 0402 	add.w	r4, r1, r2
 8008340:	d902      	bls.n	8008348 <memmove+0x10>
 8008342:	4284      	cmp	r4, r0
 8008344:	4623      	mov	r3, r4
 8008346:	d807      	bhi.n	8008358 <memmove+0x20>
 8008348:	1e43      	subs	r3, r0, #1
 800834a:	42a1      	cmp	r1, r4
 800834c:	d008      	beq.n	8008360 <memmove+0x28>
 800834e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008356:	e7f8      	b.n	800834a <memmove+0x12>
 8008358:	4402      	add	r2, r0
 800835a:	4601      	mov	r1, r0
 800835c:	428a      	cmp	r2, r1
 800835e:	d100      	bne.n	8008362 <memmove+0x2a>
 8008360:	bd10      	pop	{r4, pc}
 8008362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800836a:	e7f7      	b.n	800835c <memmove+0x24>

0800836c <_realloc_r>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	4680      	mov	r8, r0
 8008372:	4614      	mov	r4, r2
 8008374:	460e      	mov	r6, r1
 8008376:	b921      	cbnz	r1, 8008382 <_realloc_r+0x16>
 8008378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	4611      	mov	r1, r2
 800837e:	f7fe bfdb 	b.w	8007338 <_malloc_r>
 8008382:	b92a      	cbnz	r2, 8008390 <_realloc_r+0x24>
 8008384:	f7ff fc68 	bl	8007c58 <_free_r>
 8008388:	4625      	mov	r5, r4
 800838a:	4628      	mov	r0, r5
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008390:	f000 f81b 	bl	80083ca <_malloc_usable_size_r>
 8008394:	4284      	cmp	r4, r0
 8008396:	4607      	mov	r7, r0
 8008398:	d802      	bhi.n	80083a0 <_realloc_r+0x34>
 800839a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800839e:	d812      	bhi.n	80083c6 <_realloc_r+0x5a>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4640      	mov	r0, r8
 80083a4:	f7fe ffc8 	bl	8007338 <_malloc_r>
 80083a8:	4605      	mov	r5, r0
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0ed      	beq.n	800838a <_realloc_r+0x1e>
 80083ae:	42bc      	cmp	r4, r7
 80083b0:	4622      	mov	r2, r4
 80083b2:	4631      	mov	r1, r6
 80083b4:	bf28      	it	cs
 80083b6:	463a      	movcs	r2, r7
 80083b8:	f7fe ff87 	bl	80072ca <memcpy>
 80083bc:	4631      	mov	r1, r6
 80083be:	4640      	mov	r0, r8
 80083c0:	f7ff fc4a 	bl	8007c58 <_free_r>
 80083c4:	e7e1      	b.n	800838a <_realloc_r+0x1e>
 80083c6:	4635      	mov	r5, r6
 80083c8:	e7df      	b.n	800838a <_realloc_r+0x1e>

080083ca <_malloc_usable_size_r>:
 80083ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ce:	1f18      	subs	r0, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bfbc      	itt	lt
 80083d4:	580b      	ldrlt	r3, [r1, r0]
 80083d6:	18c0      	addlt	r0, r0, r3
 80083d8:	4770      	bx	lr
	...

080083dc <_init>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr

080083e8 <_fini>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr
